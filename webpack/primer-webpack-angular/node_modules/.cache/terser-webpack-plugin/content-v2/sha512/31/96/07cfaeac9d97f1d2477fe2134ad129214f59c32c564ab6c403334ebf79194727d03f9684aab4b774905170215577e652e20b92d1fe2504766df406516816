{"map":"{\"version\":3,\"sources\":[\"webpack/bootstrap\"],\"names\":[\"webpackJsonpCallback\",\"data\",\"moduleId\",\"chunkId\",\"chunkIds\",\"moreModules\",\"executeModules\",\"i\",\"resolves\",\"length\",\"installedChunks\",\"push\",\"Object\",\"prototype\",\"hasOwnProperty\",\"call\",\"modules\",\"parentJsonpFunction\",\"shift\",\"deferredModules\",\"apply\",\"checkDeferredModules\",\"result\",\"deferredModule\",\"fulfilled\",\"j\",\"depId\",\"splice\",\"__webpack_require__\",\"s\",\"installedModules\",\"4\",\"exports\",\"module\",\"l\",\"m\",\"c\",\"d\",\"name\",\"getter\",\"o\",\"defineProperty\",\"enumerable\",\"get\",\"r\",\"Symbol\",\"toStringTag\",\"value\",\"t\",\"mode\",\"__esModule\",\"ns\",\"create\",\"key\",\"bind\",\"n\",\"object\",\"property\",\"p\",\"jsonpArray\",\"window\",\"oldJsonpFunction\",\"slice\"],\"mappings\":\"aACA,SAAAA,EAAAC,GAQA,IAPA,IAMAC,EAAAC,EANAC,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GACAK,EAAAL,EAAA,GAIAM,EAAA,EAAAC,EAAA,GACQD,EAAAH,EAAAK,OAAoBF,IAC5BJ,EAAAC,EAAAG,GACAG,EAAAP,IACAK,EAAAG,KAAAD,EAAAP,GAAA,IAEAO,EAAAP,GAAA,EAEA,IAAAD,KAAAG,EACAO,OAAAC,UAAAC,eAAAC,KAAAV,EAAAH,KACAc,EAAAd,GAAAG,EAAAH,IAKA,IAFAe,GAAAA,EAAAhB,GAEAO,EAAAC,QACAD,EAAAU,OAAAV,GAOA,OAHAW,EAAAR,KAAAS,MAAAD,EAAAb,GAAA,IAGAe,IAEA,SAAAA,IAEA,IADA,IAAAC,EACAf,EAAA,EAAiBA,EAAAY,EAAAV,OAA4BF,IAAA,CAG7C,IAFA,IAAAgB,EAAAJ,EAAAZ,GACAiB,GAAA,EACAC,EAAA,EAAkBA,EAAAF,EAAAd,OAA2BgB,IAAA,CAC7C,IAAAC,EAAAH,EAAAE,GACA,IAAAf,EAAAgB,KAAAF,GAAA,GAEAA,IACAL,EAAAQ,OAAApB,IAAA,GACAe,EAAAM,EAAAA,EAAAC,EAAAN,EAAA,KAGA,OAAAD,EAIA,IAAAQ,EAAA,GAKApB,EAAA,CACAqB,EAAA,GAGAZ,EAAA,GAGA,SAAAS,EAAA1B,GAGA,GAAA4B,EAAA5B,GACA,OAAA4B,EAAA5B,GAAA8B,QAGA,IAAAC,EAAAH,EAAA5B,GAAA,CACAK,EAAAL,EACAgC,GAAA,EACAF,QAAA,IAUA,OANAhB,EAAAd,GAAAa,KAAAkB,EAAAD,QAAAC,EAAAA,EAAAD,QAAAJ,GAGAK,EAAAC,GAAA,EAGAD,EAAAD,QAKAJ,EAAAO,EAAAnB,EAGAY,EAAAQ,EAAAN,EAGAF,EAAAS,EAAA,SAAAL,EAAAM,EAAAC,GACAX,EAAAY,EAAAR,EAAAM,IACA1B,OAAA6B,eAAAT,EAAAM,EAAA,CAA0CI,YAAA,EAAAC,IAAAJ,KAK1CX,EAAAgB,EAAA,SAAAZ,GACA,oBAAAa,QAAAA,OAAAC,aACAlC,OAAA6B,eAAAT,EAAAa,OAAAC,YAAA,CAAwDC,MAAA,WAExDnC,OAAA6B,eAAAT,EAAA,aAAA,CAAiDe,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,GAAA,EAAAE,GAAA,iBAAAF,GAAAA,GAAAA,EAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAvC,OAAAwC,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAvC,OAAA6B,eAAAU,EAAA,UAAA,CAAyCT,YAAA,EAAAK,MAAAA,IACzC,EAAAE,GAAA,iBAAAF,EAAA,IAAA,IAAAM,KAAAN,EAAAnB,EAAAS,EAAAc,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAtB,GACA,IAAAM,EAAAN,GAAAA,EAAAiB,WACA,WAA2B,OAAAjB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAL,EAAAS,EAAAE,EAAA,IAAAA,GACAA,GAIAX,EAAAY,EAAA,SAAAgB,EAAAC,GAAsD,OAAA7C,OAAAC,UAAAC,eAAAC,KAAAyC,EAAAC,IAGtD7B,EAAA8B,EAAA,IAEA,IAAAC,EAAAC,OAAA,aAAAA,OAAA,cAAA,GACAC,EAAAF,EAAAhD,KAAA2C,KAAAK,GACAA,EAAAhD,KAAAX,EACA2D,EAAAA,EAAAG,QACA,IAAA,IAAAvD,EAAA,EAAgBA,EAAAoD,EAAAlD,OAAuBF,IAAAP,EAAA2D,EAAApD,IACvC,IAAAU,EAAA4C,EAIA1C,EAAAR,KAAA,CAAA,IAAA,EAAA,IAEAU\",\"sourcesContent\":[\" \\t// install a JSONP callback for chunk loading\\n \\tfunction webpackJsonpCallback(data) {\\n \\t\\tvar chunkIds = data[0];\\n \\t\\tvar moreModules = data[1];\\n \\t\\tvar executeModules = data[2];\\n\\n \\t\\t// add \\\"moreModules\\\" to the modules object,\\n \\t\\t// then flag all \\\"chunkIds\\\" as loaded and fire callback\\n \\t\\tvar moduleId, chunkId, i = 0, resolves = [];\\n \\t\\tfor(;i < chunkIds.length; i++) {\\n \\t\\t\\tchunkId = chunkIds[i];\\n \\t\\t\\tif(installedChunks[chunkId]) {\\n \\t\\t\\t\\tresolves.push(installedChunks[chunkId][0]);\\n \\t\\t\\t}\\n \\t\\t\\tinstalledChunks[chunkId] = 0;\\n \\t\\t}\\n \\t\\tfor(moduleId in moreModules) {\\n \\t\\t\\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\\n \\t\\t\\t\\tmodules[moduleId] = moreModules[moduleId];\\n \\t\\t\\t}\\n \\t\\t}\\n \\t\\tif(parentJsonpFunction) parentJsonpFunction(data);\\n\\n \\t\\twhile(resolves.length) {\\n \\t\\t\\tresolves.shift()();\\n \\t\\t}\\n\\n \\t\\t// add entry modules from loaded chunk to deferred list\\n \\t\\tdeferredModules.push.apply(deferredModules, executeModules || []);\\n\\n \\t\\t// run deferred modules when all chunks ready\\n \\t\\treturn checkDeferredModules();\\n \\t};\\n \\tfunction checkDeferredModules() {\\n \\t\\tvar result;\\n \\t\\tfor(var i = 0; i < deferredModules.length; i++) {\\n \\t\\t\\tvar deferredModule = deferredModules[i];\\n \\t\\t\\tvar fulfilled = true;\\n \\t\\t\\tfor(var j = 1; j < deferredModule.length; j++) {\\n \\t\\t\\t\\tvar depId = deferredModule[j];\\n \\t\\t\\t\\tif(installedChunks[depId] !== 0) fulfilled = false;\\n \\t\\t\\t}\\n \\t\\t\\tif(fulfilled) {\\n \\t\\t\\t\\tdeferredModules.splice(i--, 1);\\n \\t\\t\\t\\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\\n \\t\\t\\t}\\n \\t\\t}\\n \\t\\treturn result;\\n \\t}\\n\\n \\t// The module cache\\n \\tvar installedModules = {};\\n\\n \\t// object to store loaded and loading chunks\\n \\t// undefined = chunk not loaded, null = chunk preloaded/prefetched\\n \\t// Promise = chunk loading, 0 = chunk loaded\\n \\tvar installedChunks = {\\n \\t\\t4: 0\\n \\t};\\n\\n \\tvar deferredModules = [];\\n\\n \\t// The require function\\n \\tfunction __webpack_require__(moduleId) {\\n\\n \\t\\t// Check if module is in cache\\n \\t\\tif(installedModules[moduleId]) {\\n \\t\\t\\treturn installedModules[moduleId].exports;\\n \\t\\t}\\n \\t\\t// Create a new module (and put it into the cache)\\n \\t\\tvar module = installedModules[moduleId] = {\\n \\t\\t\\ti: moduleId,\\n \\t\\t\\tl: false,\\n \\t\\t\\texports: {}\\n \\t\\t};\\n\\n \\t\\t// Execute the module function\\n \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n \\t\\t// Flag the module as loaded\\n \\t\\tmodule.l = true;\\n\\n \\t\\t// Return the exports of the module\\n \\t\\treturn module.exports;\\n \\t}\\n\\n\\n \\t// expose the modules object (__webpack_modules__)\\n \\t__webpack_require__.m = modules;\\n\\n \\t// expose the module cache\\n \\t__webpack_require__.c = installedModules;\\n\\n \\t// define getter function for harmony exports\\n \\t__webpack_require__.d = function(exports, name, getter) {\\n \\t\\tif(!__webpack_require__.o(exports, name)) {\\n \\t\\t\\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\\n \\t\\t}\\n \\t};\\n\\n \\t// define __esModule on exports\\n \\t__webpack_require__.r = function(exports) {\\n \\t\\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\\n \\t\\t\\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\\n \\t\\t}\\n \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n \\t};\\n\\n \\t// create a fake namespace object\\n \\t// mode & 1: value is a module id, require it\\n \\t// mode & 2: merge all properties of value into the ns\\n \\t// mode & 4: return value when already ns object\\n \\t// mode & 8|1: behave like require\\n \\t__webpack_require__.t = function(value, mode) {\\n \\t\\tif(mode & 1) value = __webpack_require__(value);\\n \\t\\tif(mode & 8) return value;\\n \\t\\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\\n \\t\\tvar ns = Object.create(null);\\n \\t\\t__webpack_require__.r(ns);\\n \\t\\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\\n \\t\\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\\n \\t\\treturn ns;\\n \\t};\\n\\n \\t// getDefaultExport function for compatibility with non-harmony modules\\n \\t__webpack_require__.n = function(module) {\\n \\t\\tvar getter = module && module.__esModule ?\\n \\t\\t\\tfunction getDefault() { return module['default']; } :\\n \\t\\t\\tfunction getModuleExports() { return module; };\\n \\t\\t__webpack_require__.d(getter, 'a', getter);\\n \\t\\treturn getter;\\n \\t};\\n\\n \\t// Object.prototype.hasOwnProperty.call\\n \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n\\n \\t// __webpack_public_path__\\n \\t__webpack_require__.p = \\\"/\\\";\\n\\n \\tvar jsonpArray = window[\\\"webpackJsonp\\\"] = window[\\\"webpackJsonp\\\"] || [];\\n \\tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\\n \\tjsonpArray.push = webpackJsonpCallback;\\n \\tjsonpArray = jsonpArray.slice();\\n \\tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\\n \\tvar parentJsonpFunction = oldJsonpFunction;\\n\\n\\n \\t// add entry module to deferred list\\n \\tdeferredModules.push([346,0,1]);\\n \\t// run deferred modules when ready\\n \\treturn checkDeferredModules();\\n\"]}","code":"!function(g){function I(I){for(var e,C,l=I[0],i=I[1],B=I[2],b=0,u=[];b<l.length;b++)C=l[b],t[C]&&u.push(t[C][0]),t[C]=0;for(e in i)Object.prototype.hasOwnProperty.call(i,e)&&(g[e]=i[e]);for(A&&A(I);u.length;)u.shift()();return c.push.apply(c,B||[]),n()}function n(){for(var g,I=0;I<c.length;I++){for(var n=c[I],e=!0,l=1;l<n.length;l++){var i=n[l];0!==t[i]&&(e=!1)}e&&(c.splice(I--,1),g=C(C.s=n[0]))}return g}var e={},t={4:0},c=[];function C(I){if(e[I])return e[I].exports;var n=e[I]={i:I,l:!1,exports:{}};return g[I].call(n.exports,n,n.exports,C),n.l=!0,n.exports}C.m=g,C.c=e,C.d=function(g,I,n){C.o(g,I)||Object.defineProperty(g,I,{enumerable:!0,get:n})},C.r=function(g){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(g,\"__esModule\",{value:!0})},C.t=function(g,I){if(1&I&&(g=C(g)),8&I)return g;if(4&I&&\"object\"==typeof g&&g&&g.__esModule)return g;var n=Object.create(null);if(C.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:g}),2&I&&\"string\"!=typeof g)for(var e in g)C.d(n,e,function(I){return g[I]}.bind(null,e));return n},C.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return C.d(I,\"a\",I),I},C.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},C.p=\"/\";var l=window.webpackJsonp=window.webpackJsonp||[],i=l.push.bind(l);l.push=I,l=l.slice();for(var B=0;B<l.length;B++)I(l[B]);var A=i;c.push([346,0,1]),n()}({105:function(module,exports,__webpack_require__){eval('var map = {\\n\\t\"./log\": 106\\n};\\n\\n\\nfunction webpackContext(req) {\\n\\tvar id = webpackContextResolve(req);\\n\\treturn __webpack_require__(id);\\n}\\nfunction webpackContextResolve(req) {\\n\\tvar id = map[req];\\n\\tif(!(id + 1)) { // check for number or string\\n\\t\\tvar e = new Error(\"Cannot find module \\'\" + req + \"\\'\");\\n\\t\\te.code = \\'MODULE_NOT_FOUND\\';\\n\\t\\tthrow e;\\n\\t}\\n\\treturn id;\\n}\\nwebpackContext.keys = function webpackContextKeys() {\\n\\treturn Object.keys(map);\\n};\\nwebpackContext.resolve = webpackContextResolve;\\nmodule.exports = webpackContext;\\nwebpackContext.id = 105;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9ob3Qgc3luYyBub25yZWN1cnNpdmUgXlxcLlxcL2xvZyQ/MWMzZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbWFwID0ge1xuXHRcIi4vbG9nXCI6IDEwNlxufTtcblxuXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0dmFyIGlkID0gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSk7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcbn1cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0dmFyIGlkID0gbWFwW3JlcV07XG5cdGlmKCEoaWQgKyAxKSkgeyAvLyBjaGVjayBmb3IgbnVtYmVyIG9yIHN0cmluZ1xuXHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fVxuXHRyZXR1cm4gaWQ7XG59XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gMTA1OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///105\\n')},11:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return EMPTY; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return empty; });\\n/* unused harmony export emptyScheduled */\\n/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);\\n/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\\n\\nvar EMPTY = /*@__PURE__*/ new _Observable__WEBPACK_IMPORTED_MODULE_0__[/* Observable */ \"a\"](function (subscriber) { return subscriber.complete(); });\\nfunction empty(scheduler) {\\n    return scheduler ? emptyScheduled(scheduler) : EMPTY;\\n}\\nfunction emptyScheduled(scheduler) {\\n    return new _Observable__WEBPACK_IMPORTED_MODULE_0__[/* Observable */ \"a\"](function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });\\n}\\n//# sourceMappingURL=empty.js.map\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2VtcHR5LmpzPzFiOTIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5leHBvcnQgdmFyIEVNUFRZID0gLypAX19QVVJFX18qLyBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikgeyByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9KTtcbmV4cG9ydCBmdW5jdGlvbiBlbXB0eShzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gc2NoZWR1bGVyID8gZW1wdHlTY2hlZHVsZWQoc2NoZWR1bGVyKSA6IEVNUFRZO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGVtcHR5U2NoZWR1bGVkKHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikgeyByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSk7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW1wdHkuanMubWFwXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///11\\n')},128:function(module,exports){eval(\"function webpackEmptyAsyncContext(req) {\\n\\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\\n\\t// uncaught exception popping up in devtools\\n\\treturn Promise.resolve().then(function() {\\n\\t\\tvar e = new Error(\\\"Cannot find module '\\\" + req + \\\"'\\\");\\n\\t\\te.code = 'MODULE_NOT_FOUND';\\n\\t\\tthrow e;\\n\\t});\\n}\\nwebpackEmptyAsyncContext.keys = function() { return []; };\\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\\nmodule.exports = webpackEmptyAsyncContext;\\nwebpackEmptyAsyncContext.id = 128;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bhbmd1bGFyL2NvcmUvZmVzbTUgbGF6eSBuYW1lc3BhY2Ugb2JqZWN0P2MzODAiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gd2VicGFja0VtcHR5QXN5bmNDb250ZXh0KHJlcSkge1xuXHQvLyBIZXJlIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKSBpcyB1c2VkIGluc3RlYWQgb2YgbmV3IFByb21pc2UoKSB0byBwcmV2ZW50XG5cdC8vIHVuY2F1Z2h0IGV4Y2VwdGlvbiBwb3BwaW5nIHVwIGluIGRldnRvb2xzXG5cdHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fSk7XG59XG53ZWJwYWNrRW1wdHlBc3luY0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gW107IH07XG53ZWJwYWNrRW1wdHlBc3luY0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tFbXB0eUFzeW5jQ29udGV4dDtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0VtcHR5QXN5bmNDb250ZXh0O1xud2VicGFja0VtcHR5QXN5bmNDb250ZXh0LmlkID0gMTI4OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///128\\n\")},162:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return BehaviorSubject; });\\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\\n/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(20);\\n/* harmony import */ var _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(33);\\n/** PURE_IMPORTS_START tslib,_Subject,_util_ObjectUnsubscribedError PURE_IMPORTS_END */\\n\\n\\n\\nvar BehaviorSubject = /*@__PURE__*/ (function (_super) {\\n    tslib__WEBPACK_IMPORTED_MODULE_0__[/* __extends */ \"c\"](BehaviorSubject, _super);\\n    function BehaviorSubject(_value) {\\n        var _this = _super.call(this) || this;\\n        _this._value = _value;\\n        return _this;\\n    }\\n    Object.defineProperty(BehaviorSubject.prototype, \"value\", {\\n        get: function () {\\n            return this.getValue();\\n        },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    BehaviorSubject.prototype._subscribe = function (subscriber) {\\n        var subscription = _super.prototype._subscribe.call(this, subscriber);\\n        if (subscription && !subscription.closed) {\\n            subscriber.next(this._value);\\n        }\\n        return subscription;\\n    };\\n    BehaviorSubject.prototype.getValue = function () {\\n        if (this.hasError) {\\n            throw this.thrownError;\\n        }\\n        else if (this.closed) {\\n            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_2__[/* ObjectUnsubscribedError */ \"a\"]();\\n        }\\n        else {\\n            return this._value;\\n        }\\n    };\\n    BehaviorSubject.prototype.next = function (value) {\\n        _super.prototype.next.call(this, this._value = value);\\n    };\\n    return BehaviorSubject;\\n}(_Subject__WEBPACK_IMPORTED_MODULE_1__[/* Subject */ \"a\"]));\\n\\n//# sourceMappingURL=BehaviorSubject.js.map\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvQmVoYXZpb3JTdWJqZWN0LmpzP2RiYTEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3ViamVjdCxfdXRpbF9PYmplY3RVbnN1YnNjcmliZWRFcnJvciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJy4vU3ViamVjdCc7XG5pbXBvcnQgeyBPYmplY3RVbnN1YnNjcmliZWRFcnJvciB9IGZyb20gJy4vdXRpbC9PYmplY3RVbnN1YnNjcmliZWRFcnJvcic7XG52YXIgQmVoYXZpb3JTdWJqZWN0ID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEJlaGF2aW9yU3ViamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBCZWhhdmlvclN1YmplY3QoX3ZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl92YWx1ZSA9IF92YWx1ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQmVoYXZpb3JTdWJqZWN0LnByb3RvdHlwZSwgXCJ2YWx1ZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgQmVoYXZpb3JTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IF9zdXBlci5wcm90b3R5cGUuX3N1YnNjcmliZS5jYWxsKHRoaXMsIHN1YnNjcmliZXIpO1xuICAgICAgICBpZiAoc3Vic2NyaXB0aW9uICYmICFzdWJzY3JpcHRpb24uY2xvc2VkKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodGhpcy5fdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgfTtcbiAgICBCZWhhdmlvclN1YmplY3QucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5oYXNFcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgdGhpcy50aHJvd25FcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm5leHQuY2FsbCh0aGlzLCB0aGlzLl92YWx1ZSA9IHZhbHVlKTtcbiAgICB9O1xuICAgIHJldHVybiBCZWhhdmlvclN1YmplY3Q7XG59KFN1YmplY3QpKTtcbmV4cG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QmVoYXZpb3JTdWJqZWN0LmpzLm1hcFxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///162\\n')},163:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return concatAll; });\\n/* harmony import */ var _mergeAll__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(94);\\n/** PURE_IMPORTS_START _mergeAll PURE_IMPORTS_END */\\n\\nfunction concatAll() {\\n    return Object(_mergeAll__WEBPACK_IMPORTED_MODULE_0__[/* mergeAll */ \"a\"])(1);\\n}\\n//# sourceMappingURL=concatAll.js.map\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2NvbmNhdEFsbC5qcz80ZjE4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX21lcmdlQWxsIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IG1lcmdlQWxsIH0gZnJvbSAnLi9tZXJnZUFsbCc7XG5leHBvcnQgZnVuY3Rpb24gY29uY2F0QWxsKCkge1xuICAgIHJldHVybiBtZXJnZUFsbCgxKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdEFsbC5qcy5tYXBcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///163\\n')},346:function(g,I,n){n(104),g.exports=n(347)},347:function(module,exports,__webpack_require__){\"use strict\";eval('\\nObject.defineProperty(exports, \"__esModule\", { value: true });\\n// Angular\\n__webpack_require__(62);\\n__webpack_require__(348);\\n__webpack_require__(1);\\n__webpack_require__(14);\\n__webpack_require__(349);\\n__webpack_require__(354);\\n// RxJS\\n__webpack_require__(90);\\n// Other vendors for example jQuery, Lodash or Bootstrap\\n// You can import js, ts, css, sass, ...\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQ3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3ZlbmRvci50cz8zZmQwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEFuZ3VsYXJcclxuaW1wb3J0ICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuaW1wb3J0ICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyLWR5bmFtaWMnO1xyXG5pbXBvcnQgJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCAnQGFuZ3VsYXIvaHR0cCc7XHJcbmltcG9ydCAnQGFuZ3VsYXIvcm91dGVyJztcclxuXHJcbi8vIFJ4SlNcclxuaW1wb3J0ICdyeGpzJztcclxuXHJcbi8vIE90aGVyIHZlbmRvcnMgZm9yIGV4YW1wbGUgalF1ZXJ5LCBMb2Rhc2ggb3IgQm9vdHN0cmFwXHJcbi8vIFlvdSBjYW4gaW1wb3J0IGpzLCB0cywgY3NzLCBzYXNzLCAuLi4iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///347\\n')},349:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"ɵangular_packages_http_http_e\\\", function() { return BrowserJsonp; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"ɵangular_packages_http_http_f\\\", function() { return Body; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"ɵangular_packages_http_http_a\\\", function() { return _createDefaultCookieXSRFStrategy; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"ɵangular_packages_http_http_b\\\", function() { return httpFactory; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"ɵangular_packages_http_http_c\\\", function() { return jsonpFactory; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"BrowserXhr\\\", function() { return BrowserXhr; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"JSONPBackend\\\", function() { return JSONPBackend; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"JSONPConnection\\\", function() { return JSONPConnection; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"CookieXSRFStrategy\\\", function() { return CookieXSRFStrategy; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"XHRBackend\\\", function() { return XHRBackend; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"XHRConnection\\\", function() { return XHRConnection; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"BaseRequestOptions\\\", function() { return BaseRequestOptions; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"RequestOptions\\\", function() { return RequestOptions; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"BaseResponseOptions\\\", function() { return BaseResponseOptions; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"ResponseOptions\\\", function() { return ResponseOptions; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"ReadyState\\\", function() { return ReadyState; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"RequestMethod\\\", function() { return RequestMethod; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"ResponseContentType\\\", function() { return ResponseContentType; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"ResponseType\\\", function() { return ResponseType; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"Headers\\\", function() { return Headers; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"Http\\\", function() { return Http; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"Jsonp\\\", function() { return Jsonp; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"HttpModule\\\", function() { return HttpModule; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"JsonpModule\\\", function() { return JsonpModule; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"Connection\\\", function() { return Connection; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"ConnectionBackend\\\", function() { return ConnectionBackend; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"XSRFStrategy\\\", function() { return XSRFStrategy; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"Request\\\", function() { return Request; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"Response\\\", function() { return Response; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"QueryEncoder\\\", function() { return QueryEncoder; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"URLSearchParams\\\", function() { return URLSearchParams; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"VERSION\\\", function() { return VERSION; });\\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);\\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);\\n/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(62);\\n/**\\n * @license Angular v7.0.4\\n * (c) 2010-2018 Google, Inc. https://angular.io/\\n * License: MIT\\n */\\n\\n\\n\\n\\n\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n/**\\n * A backend for http that uses the `XMLHttpRequest` browser API.\\n *\\n * Take care not to evaluate this in non-browser contexts.\\n *\\n * @deprecated see https://angular.io/guide/http\\n * @publicApi\\n */\\nvar BrowserXhr = /** @class */ (function () {\\n    function BrowserXhr() {\\n    }\\n    BrowserXhr.prototype.build = function () { return (new XMLHttpRequest()); };\\n    BrowserXhr = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __decorate */ \\\"b\\\"])([\\n        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\\\"Injectable\\\"])(),\\n        Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __metadata */ \\\"d\\\"])(\\\"design:paramtypes\\\", [])\\n    ], BrowserXhr);\\n    return BrowserXhr;\\n}());\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n/**\\n * Supported http methods.\\n * @deprecated see https://angular.io/guide/http\\n * @publicApi\\n */\\nvar RequestMethod;\\n(function (RequestMethod) {\\n    RequestMethod[RequestMethod[\\\"Get\\\"] = 0] = \\\"Get\\\";\\n    RequestMethod[RequestMethod[\\\"Post\\\"] = 1] = \\\"Post\\\";\\n    RequestMethod[RequestMethod[\\\"Put\\\"] = 2] = \\\"Put\\\";\\n    RequestMethod[RequestMethod[\\\"Delete\\\"] = 3] = \\\"Delete\\\";\\n    RequestMethod[RequestMethod[\\\"Options\\\"] = 4] = \\\"Options\\\";\\n    RequestMethod[RequestMethod[\\\"Head\\\"] = 5] = \\\"Head\\\";\\n    RequestMethod[RequestMethod[\\\"Patch\\\"] = 6] = \\\"Patch\\\";\\n})(RequestMethod || (RequestMethod = {}));\\n/**\\n * All possible states in which a connection can be, based on\\n * [States](http://www.w3.org/TR/XMLHttpRequest/#states) from the `XMLHttpRequest` spec, but with an\\n * additional \\\"CANCELLED\\\" state.\\n * @deprecated see https://angular.io/guide/http\\n * @publicApi\\n */\\nvar ReadyState;\\n(function (ReadyState) {\\n    ReadyState[ReadyState[\\\"Unsent\\\"] = 0] = \\\"Unsent\\\";\\n    ReadyState[ReadyState[\\\"Open\\\"] = 1] = \\\"Open\\\";\\n    ReadyState[ReadyState[\\\"HeadersReceived\\\"] = 2] = \\\"HeadersReceived\\\";\\n    ReadyState[ReadyState[\\\"Loading\\\"] = 3] = \\\"Loading\\\";\\n    ReadyState[ReadyState[\\\"Done\\\"] = 4] = \\\"Done\\\";\\n    ReadyState[ReadyState[\\\"Cancelled\\\"] = 5] = \\\"Cancelled\\\";\\n})(ReadyState || (ReadyState = {}));\\n/**\\n * Acceptable response types to be associated with a {@link Response}, based on\\n * [ResponseType](https://fetch.spec.whatwg.org/#responsetype) from the Fetch spec.\\n * @deprecated see https://angular.io/guide/http\\n * @publicApi\\n */\\nvar ResponseType;\\n(function (ResponseType) {\\n    ResponseType[ResponseType[\\\"Basic\\\"] = 0] = \\\"Basic\\\";\\n    ResponseType[ResponseType[\\\"Cors\\\"] = 1] = \\\"Cors\\\";\\n    ResponseType[ResponseType[\\\"Default\\\"] = 2] = \\\"Default\\\";\\n    ResponseType[ResponseType[\\\"Error\\\"] = 3] = \\\"Error\\\";\\n    ResponseType[ResponseType[\\\"Opaque\\\"] = 4] = \\\"Opaque\\\";\\n})(ResponseType || (ResponseType = {}));\\n/**\\n * Supported content type to be automatically associated with a {@link Request}.\\n * @deprecated see https://angular.io/guide/http\\n */\\nvar ContentType;\\n(function (ContentType) {\\n    ContentType[ContentType[\\\"NONE\\\"] = 0] = \\\"NONE\\\";\\n    ContentType[ContentType[\\\"JSON\\\"] = 1] = \\\"JSON\\\";\\n    ContentType[ContentType[\\\"FORM\\\"] = 2] = \\\"FORM\\\";\\n    ContentType[ContentType[\\\"FORM_DATA\\\"] = 3] = \\\"FORM_DATA\\\";\\n    ContentType[ContentType[\\\"TEXT\\\"] = 4] = \\\"TEXT\\\";\\n    ContentType[ContentType[\\\"BLOB\\\"] = 5] = \\\"BLOB\\\";\\n    ContentType[ContentType[\\\"ARRAY_BUFFER\\\"] = 6] = \\\"ARRAY_BUFFER\\\";\\n})(ContentType || (ContentType = {}));\\n/**\\n * Define which buffer to use to store the response\\n * @deprecated see https://angular.io/guide/http\\n * @publicApi\\n */\\nvar ResponseContentType;\\n(function (ResponseContentType) {\\n    ResponseContentType[ResponseContentType[\\\"Text\\\"] = 0] = \\\"Text\\\";\\n    ResponseContentType[ResponseContentType[\\\"Json\\\"] = 1] = \\\"Json\\\";\\n    ResponseContentType[ResponseContentType[\\\"ArrayBuffer\\\"] = 2] = \\\"ArrayBuffer\\\";\\n    ResponseContentType[ResponseContentType[\\\"Blob\\\"] = 3] = \\\"Blob\\\";\\n})(ResponseContentType || (ResponseContentType = {}));\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n/**\\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\\n *\\n * The only known difference between this `Headers` implementation and the spec is the\\n * lack of an `entries` method.\\n *\\n * @usageNotes\\n * ### Example\\n *\\n * ```\\n * import {Headers} from '@angular/http';\\n *\\n * var firstHeaders = new Headers();\\n * firstHeaders.append('Content-Type', 'image/jpeg');\\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\\n *\\n * // Create headers from Plain Old JavaScript Object\\n * var secondHeaders = new Headers({\\n *   'X-My-Custom-Header': 'Angular'\\n * });\\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\\n *\\n * var thirdHeaders = new Headers(secondHeaders);\\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\\n * ```\\n *\\n * @deprecated see https://angular.io/guide/http\\n * @publicApi\\n */\\nvar Headers = /** @class */ (function () {\\n    // TODO(vicb): any -> string|string[]\\n    function Headers(headers) {\\n        var _this = this;\\n        /** @internal header names are lower case */\\n        this._headers = new Map();\\n        /** @internal map lower case names to actual names */\\n        this._normalizedNames = new Map();\\n        if (!headers) {\\n            return;\\n        }\\n        if (headers instanceof Headers) {\\n            headers.forEach(function (values, name) {\\n                values.forEach(function (value) { return _this.append(name, value); });\\n            });\\n            return;\\n        }\\n        Object.keys(headers).forEach(function (name) {\\n            var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\\n            _this.delete(name);\\n            values.forEach(function (value) { return _this.append(name, value); });\\n        });\\n    }\\n    /**\\n     * Returns a new Headers instance from the given DOMString of Response Headers\\n     */\\n    Headers.fromResponseHeaderString = function (headersString) {\\n        var headers = new Headers();\\n        headersString.split('\\\\n').forEach(function (line) {\\n            var index = line.indexOf(':');\\n            if (index > 0) {\\n                var name_1 = line.slice(0, index);\\n                var value = line.slice(index + 1).trim();\\n                headers.set(name_1, value);\\n            }\\n        });\\n        return headers;\\n    };\\n    /**\\n     * Appends a header to existing list of header values for a given header name.\\n     */\\n    Headers.prototype.append = function (name, value) {\\n        var values = this.getAll(name);\\n        if (values === null) {\\n            this.set(name, value);\\n        }\\n        else {\\n            values.push(value);\\n        }\\n    };\\n    /**\\n     * Deletes all header values for the given name.\\n     */\\n    Headers.prototype.delete = function (name) {\\n        var lcName = name.toLowerCase();\\n        this._normalizedNames.delete(lcName);\\n        this._headers.delete(lcName);\\n    };\\n    Headers.prototype.forEach = function (fn) {\\n        var _this = this;\\n        this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });\\n    };\\n    /**\\n     * Returns first header that matches given name.\\n     */\\n    Headers.prototype.get = function (name) {\\n        var values = this.getAll(name);\\n        if (values === null) {\\n            return null;\\n        }\\n        return values.length > 0 ? values[0] : null;\\n    };\\n    /**\\n     * Checks for existence of header by given name.\\n     */\\n    Headers.prototype.has = function (name) { return this._headers.has(name.toLowerCase()); };\\n    /**\\n     * Returns the names of the headers\\n     */\\n    Headers.prototype.keys = function () { return Array.from(this._normalizedNames.values()); };\\n    /**\\n     * Sets or overrides header value for given name.\\n     */\\n    Headers.prototype.set = function (name, value) {\\n        if (Array.isArray(value)) {\\n            if (value.length) {\\n                this._headers.set(name.toLowerCase(), [value.join(',')]);\\n            }\\n        }\\n        else {\\n            this._headers.set(name.toLowerCase(), [value]);\\n        }\\n        this.mayBeSetNormalizedName(name);\\n    };\\n    /**\\n     * Returns values of all headers.\\n     */\\n    Headers.prototype.values = function () { return Array.from(this._headers.values()); };\\n    /**\\n     * Returns string of all headers.\\n     */\\n    // TODO(vicb): returns {[name: string]: string[]}\\n    Headers.prototype.toJSON = function () {\\n        var _this = this;\\n        var serialized = {};\\n        this._headers.forEach(function (values, name) {\\n            var split = [];\\n            values.forEach(function (v) { return split.push.apply(split, Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __spread */ \\\"g\\\"])(v.split(','))); });\\n            serialized[_this._normalizedNames.get(name)] = split;\\n        });\\n        return serialized;\\n    };\\n    /**\\n     * Returns list of header values for a given name.\\n     */\\n    Headers.prototype.getAll = function (name) {\\n        return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\\n    };\\n    /**\\n     * This method is not implemented.\\n     */\\n    Headers.prototype.entries = function () { throw new Error('\\\"entries\\\" method is not implemented on Headers class'); };\\n    Headers.prototype.mayBeSetNormalizedName = function (name) {\\n        var lcName = name.toLowerCase();\\n        if (!this._normalizedNames.has(lcName)) {\\n            this._normalizedNames.set(lcName, name);\\n        }\\n    };\\n    return Headers;\\n}());\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n/**\\n * Creates a response options object to be optionally provided when instantiating a\\n * {@link Response}.\\n *\\n * This class is based on the `ResponseInit` description in the [Fetch\\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\\n *\\n * All values are null by default. Typical defaults can be found in the\\n * {@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\\n *\\n * This class may be used in tests to build {@link Response Responses} for\\n * mock responses (see {@link MockBackend}).\\n *\\n * @usageNotes\\n * ### Example\\n *\\n * ```typescript\\n * import {ResponseOptions, Response} from '@angular/http';\\n *\\n * var options = new ResponseOptions({\\n *   body: '{\\\"name\\\":\\\"Jeff\\\"}'\\n * });\\n * var res = new Response(options);\\n *\\n * console.log('res.json():', res.json()); // Object {name: \\\"Jeff\\\"}\\n * ```\\n *\\n * @deprecated see https://angular.io/guide/http\\n * @publicApi\\n */\\nvar ResponseOptions = /** @class */ (function () {\\n    function ResponseOptions(opts) {\\n        if (opts === void 0) { opts = {}; }\\n        var body = opts.body, status = opts.status, headers = opts.headers, statusText = opts.statusText, type = opts.type, url = opts.url;\\n        this.body = body != null ? body : null;\\n        this.status = status != null ? status : null;\\n        this.headers = headers != null ? headers : null;\\n        this.statusText = statusText != null ? statusText : null;\\n        this.type = type != null ? type : null;\\n        this.url = url != null ? url : null;\\n    }\\n    /**\\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\\n     * override\\n     * existing values. This method will not change the values of the instance on which it is being\\n     * called.\\n     *\\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\\n     * where certain properties may change from test to test.\\n     *\\n     * @usageNotes\\n     * ### Example\\n     *\\n     * ```typescript\\n     * import {ResponseOptions, Response} from '@angular/http';\\n     *\\n     * var options = new ResponseOptions({\\n     *   body: {name: 'Jeff'}\\n     * });\\n     * var res = new Response(options.merge({\\n     *   url: 'https://google.com'\\n     * }));\\n     * console.log('options.url:', options.url); // null\\n     * console.log('res.json():', res.json()); // Object {name: \\\"Jeff\\\"}\\n     * console.log('res.url:', res.url); // https://google.com\\n     * ```\\n     */\\n    ResponseOptions.prototype.merge = function (options) {\\n        return new ResponseOptions({\\n            body: options && options.body != null ? options.body : this.body,\\n            status: options && options.status != null ? options.status : this.status,\\n            headers: options && options.headers != null ? options.headers : this.headers,\\n            statusText: options && options.statusText != null ? options.statusText : this.statusText,\\n            type: options && options.type != null ? options.type : this.type,\\n            url: options && options.url != null ? options.url : this.url,\\n        });\\n    };\\n    return ResponseOptions;\\n}());\\n/**\\n * Subclass of {@link ResponseOptions}, with default values.\\n *\\n * Default values:\\n *  * status: 200\\n *  * headers: empty {@link Headers} object\\n *\\n * This class could be extended and bound to the {@link ResponseOptions} class\\n * when configuring an {@link Injector}, in order to override the default options\\n * used by {@link Http} to create {@link Response Responses}.\\n *\\n * @usageNotes\\n * ### Example\\n *\\n * ```typescript\\n * import {provide} from '@angular/core';\\n * import {bootstrap} from '@angular/platform-browser/browser';\\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\\n * '@angular/http';\\n * import {App} from './myapp';\\n *\\n * class MyOptions extends BaseResponseOptions {\\n *   headers:Headers = new Headers({network: 'github'});\\n * }\\n *\\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\\n * ```\\n *\\n * The options could also be extended when manually creating a {@link Response}\\n * object.\\n *\\n * ### Example\\n *\\n * ```\\n * import {BaseResponseOptions, Response} from '@angular/http';\\n *\\n * var options = new BaseResponseOptions();\\n * var res = new Response(options.merge({\\n *   body: 'Angular',\\n *   headers: new Headers({framework: 'angular'})\\n * }));\\n * console.log('res.headers.get(\\\"framework\\\"):', res.headers.get('framework')); // angular\\n * console.log('res.text():', res.text()); // Angular;\\n * ```\\n *\\n * @deprecated see https://angular.io/guide/http\\n * @publicApi\\n */\\nvar BaseResponseOptions = /** @class */ (function (_super) {\\n    Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __extends */ \\\"c\\\"])(BaseResponseOptions, _super);\\n    function BaseResponseOptions() {\\n        return _super.call(this, { status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers() }) || this;\\n    }\\n    BaseResponseOptions = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __decorate */ \\\"b\\\"])([\\n        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\\\"Injectable\\\"])(),\\n        Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __metadata */ \\\"d\\\"])(\\\"design:paramtypes\\\", [])\\n    ], BaseResponseOptions);\\n    return BaseResponseOptions;\\n}(ResponseOptions));\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n/**\\n * Abstract class from which real backends are derived.\\n *\\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\\n * {@link Request}.\\n *\\n * @deprecated see https://angular.io/guide/http\\n * @publicApi\\n */\\nvar ConnectionBackend = /** @class */ (function () {\\n    function ConnectionBackend() {\\n    }\\n    return ConnectionBackend;\\n}());\\n/**\\n * Abstract class from which real connections are derived.\\n *\\n * @deprecated see https://angular.io/guide/http\\n * @publicApi\\n */\\nvar Connection = /** @class */ (function () {\\n    function Connection() {\\n    }\\n    return Connection;\\n}());\\n/**\\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\\n *\\n * @deprecated see https://angular.io/guide/http\\n * @publicApi\\n */\\nvar XSRFStrategy = /** @class */ (function () {\\n    function XSRFStrategy() {\\n    }\\n    return XSRFStrategy;\\n}());\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\nfunction normalizeMethodName(method) {\\n    if (typeof method !== 'string')\\n        return method;\\n    switch (method.toUpperCase()) {\\n        case 'GET':\\n            return RequestMethod.Get;\\n        case 'POST':\\n            return RequestMethod.Post;\\n        case 'PUT':\\n            return RequestMethod.Put;\\n        case 'DELETE':\\n            return RequestMethod.Delete;\\n        case 'OPTIONS':\\n            return RequestMethod.Options;\\n        case 'HEAD':\\n            return RequestMethod.Head;\\n        case 'PATCH':\\n            return RequestMethod.Patch;\\n    }\\n    throw new Error(\\\"Invalid request method. The method \\\\\\\"\\\" + method + \\\"\\\\\\\" is not supported.\\\");\\n}\\nvar isSuccess = function (status) { return (status >= 200 && status < 300); };\\nfunction getResponseURL(xhr) {\\n    if ('responseURL' in xhr) {\\n        return xhr.responseURL;\\n    }\\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\\n        return xhr.getResponseHeader('X-Request-URL');\\n    }\\n    return null;\\n}\\nfunction stringToArrayBuffer(input) {\\n    var view = new Uint16Array(input.length);\\n    for (var i = 0, strLen = input.length; i < strLen; i++) {\\n        view[i] = input.charCodeAt(i);\\n    }\\n    return view.buffer;\\n}\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\nfunction paramParser(rawParams) {\\n    if (rawParams === void 0) { rawParams = ''; }\\n    var map = new Map();\\n    if (rawParams.length > 0) {\\n        var params = rawParams.split('&');\\n        params.forEach(function (param) {\\n            var eqIdx = param.indexOf('=');\\n            var _a = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __read */ \\\"f\\\"])(eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], 2), key = _a[0], val = _a[1];\\n            var list = map.get(key) || [];\\n            list.push(val);\\n            map.set(key, list);\\n        });\\n    }\\n    return map;\\n}\\n/**\\n * @deprecated see https://angular.io/guide/http\\n * @publicApi\\n **/\\nvar QueryEncoder = /** @class */ (function () {\\n    function QueryEncoder() {\\n    }\\n    QueryEncoder.prototype.encodeKey = function (key) { return standardEncoding(key); };\\n    QueryEncoder.prototype.encodeValue = function (value) { return standardEncoding(value); };\\n    return QueryEncoder;\\n}());\\nfunction standardEncoding(v) {\\n    return encodeURIComponent(v)\\n        .replace(/%40/gi, '@')\\n        .replace(/%3A/gi, ':')\\n        .replace(/%24/gi, '$')\\n        .replace(/%2C/gi, ',')\\n        .replace(/%3B/gi, ';')\\n        .replace(/%2B/gi, '+')\\n        .replace(/%3D/gi, '=')\\n        .replace(/%3F/gi, '?')\\n        .replace(/%2F/gi, '/');\\n}\\n/**\\n * Map-like representation of url search parameters, based on\\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\\n * with several extensions for merging URLSearchParams objects:\\n *   - setAll()\\n *   - appendAll()\\n *   - replaceAll()\\n *\\n * This class accepts an optional second parameter of ${@link QueryEncoder},\\n * which is used to serialize parameters before making a request. By default,\\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\\n * and then un-encodes certain characters that are allowed to be part of the query\\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\\n *\\n * These are the characters that are not encoded: `! $ \\\\' ( ) * + , ; A 9 - . _ ~ ? /`\\n *\\n * If the set of allowed query characters is not acceptable for a particular backend,\\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\\n *\\n * ```\\n * import {URLSearchParams, QueryEncoder} from '@angular/http';\\n * class MyQueryEncoder extends QueryEncoder {\\n *   encodeKey(k: string): string {\\n *     return myEncodingFunction(k);\\n *   }\\n *\\n *   encodeValue(v: string): string {\\n *     return myEncodingFunction(v);\\n *   }\\n * }\\n *\\n * let params = new URLSearchParams('', new MyQueryEncoder());\\n * ```\\n * @deprecated see https://angular.io/guide/http\\n * @publicApi\\n */\\nvar URLSearchParams = /** @class */ (function () {\\n    function URLSearchParams(rawParams, queryEncoder) {\\n        if (rawParams === void 0) { rawParams = ''; }\\n        if (queryEncoder === void 0) { queryEncoder = new QueryEncoder(); }\\n        this.rawParams = rawParams;\\n        this.queryEncoder = queryEncoder;\\n        this.paramsMap = paramParser(rawParams);\\n    }\\n    URLSearchParams.prototype.clone = function () {\\n        var clone = new URLSearchParams('', this.queryEncoder);\\n        clone.appendAll(this);\\n        return clone;\\n    };\\n    URLSearchParams.prototype.has = function (param) { return this.paramsMap.has(param); };\\n    URLSearchParams.prototype.get = function (param) {\\n        var storedParam = this.paramsMap.get(param);\\n        return Array.isArray(storedParam) ? storedParam[0] : null;\\n    };\\n    URLSearchParams.prototype.getAll = function (param) { return this.paramsMap.get(param) || []; };\\n    URLSearchParams.prototype.set = function (param, val) {\\n        if (val === void 0 || val === null) {\\n            this.delete(param);\\n            return;\\n        }\\n        var list = this.paramsMap.get(param) || [];\\n        list.length = 0;\\n        list.push(val);\\n        this.paramsMap.set(param, list);\\n    };\\n    // A merge operation\\n    // For each name-values pair in `searchParams`, perform `set(name, values[0])`\\n    //\\n    // E.g: \\\"a=[1,2,3], c=[8]\\\" + \\\"a=[4,5,6], b=[7]\\\" = \\\"a=[4], c=[8], b=[7]\\\"\\n    //\\n    // TODO(@caitp): document this better\\n    URLSearchParams.prototype.setAll = function (searchParams) {\\n        var _this = this;\\n        searchParams.paramsMap.forEach(function (value, param) {\\n            var list = _this.paramsMap.get(param) || [];\\n            list.length = 0;\\n            list.push(value[0]);\\n            _this.paramsMap.set(param, list);\\n        });\\n    };\\n    URLSearchParams.prototype.append = function (param, val) {\\n        if (val === void 0 || val === null)\\n            return;\\n        var list = this.paramsMap.get(param) || [];\\n        list.push(val);\\n        this.paramsMap.set(param, list);\\n    };\\n    // A merge operation\\n    // For each name-values pair in `searchParams`, perform `append(name, value)`\\n    // for each value in `values`.\\n    //\\n    // E.g: \\\"a=[1,2], c=[8]\\\" + \\\"a=[3,4], b=[7]\\\" = \\\"a=[1,2,3,4], c=[8], b=[7]\\\"\\n    //\\n    // TODO(@caitp): document this better\\n    URLSearchParams.prototype.appendAll = function (searchParams) {\\n        var _this = this;\\n        searchParams.paramsMap.forEach(function (value, param) {\\n            var list = _this.paramsMap.get(param) || [];\\n            for (var i = 0; i < value.length; ++i) {\\n                list.push(value[i]);\\n            }\\n            _this.paramsMap.set(param, list);\\n        });\\n    };\\n    // A merge operation\\n    // For each name-values pair in `searchParams`, perform `delete(name)`,\\n    // followed by `set(name, values)`\\n    //\\n    // E.g: \\\"a=[1,2,3], c=[8]\\\" + \\\"a=[4,5,6], b=[7]\\\" = \\\"a=[4,5,6], c=[8], b=[7]\\\"\\n    //\\n    // TODO(@caitp): document this better\\n    URLSearchParams.prototype.replaceAll = function (searchParams) {\\n        var _this = this;\\n        searchParams.paramsMap.forEach(function (value, param) {\\n            var list = _this.paramsMap.get(param) || [];\\n            list.length = 0;\\n            for (var i = 0; i < value.length; ++i) {\\n                list.push(value[i]);\\n            }\\n            _this.paramsMap.set(param, list);\\n        });\\n    };\\n    URLSearchParams.prototype.toString = function () {\\n        var _this = this;\\n        var paramsList = [];\\n        this.paramsMap.forEach(function (values, k) {\\n            values.forEach(function (v) { return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v)); });\\n        });\\n        return paramsList.join('&');\\n    };\\n    URLSearchParams.prototype.delete = function (param) { this.paramsMap.delete(param); };\\n    return URLSearchParams;\\n}());\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n/**\\n * HTTP request body used by both {@link Request} and {@link Response}\\n * https://fetch.spec.whatwg.org/#body\\n */\\nvar Body = /** @class */ (function () {\\n    function Body() {\\n    }\\n    /**\\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\\n     */\\n    Body.prototype.json = function () {\\n        if (typeof this._body === 'string') {\\n            return JSON.parse(this._body);\\n        }\\n        if (this._body instanceof ArrayBuffer) {\\n            return JSON.parse(this.text());\\n        }\\n        return this._body;\\n    };\\n    /**\\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\\n     *\\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\\n     * bytes in the buffer will be interpreted. Valid values are:\\n     *\\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\\n     *   considered deprecated.\\n     *\\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\\n     */\\n    Body.prototype.text = function (encodingHint) {\\n        if (encodingHint === void 0) { encodingHint = 'legacy'; }\\n        if (this._body instanceof URLSearchParams) {\\n            return this._body.toString();\\n        }\\n        if (this._body instanceof ArrayBuffer) {\\n            switch (encodingHint) {\\n                case 'legacy':\\n                    return String.fromCharCode.apply(null, new Uint16Array(this._body));\\n                case 'iso-8859':\\n                    return String.fromCharCode.apply(null, new Uint8Array(this._body));\\n                default:\\n                    throw new Error(\\\"Invalid value for encodingHint: \\\" + encodingHint);\\n            }\\n        }\\n        if (this._body == null) {\\n            return '';\\n        }\\n        if (typeof this._body === 'object') {\\n            return JSON.stringify(this._body, null, 2);\\n        }\\n        return this._body.toString();\\n    };\\n    /**\\n     * Return the body as an ArrayBuffer\\n     */\\n    Body.prototype.arrayBuffer = function () {\\n        if (this._body instanceof ArrayBuffer) {\\n            return this._body;\\n        }\\n        return stringToArrayBuffer(this.text());\\n    };\\n    /**\\n      * Returns the request's body as a Blob, assuming that body exists.\\n      */\\n    Body.prototype.blob = function () {\\n        if (this._body instanceof Blob) {\\n            return this._body;\\n        }\\n        if (this._body instanceof ArrayBuffer) {\\n            return new Blob([this._body]);\\n        }\\n        throw new Error('The request body isn\\\\'t either a blob or an array buffer');\\n    };\\n    return Body;\\n}());\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n/**\\n * Creates `Response` instances from provided values.\\n *\\n * Though this object isn't\\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\\n * add data to a view.\\n *\\n * @usageNotes\\n * ### Example\\n *\\n * ```\\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\\n * ```\\n *\\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\\n * can be accessed many times. There are other differences in the implementation, but this is the\\n * most significant.\\n *\\n * @deprecated see https://angular.io/guide/http\\n * @publicApi\\n */\\nvar Response = /** @class */ (function (_super) {\\n    Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __extends */ \\\"c\\\"])(Response, _super);\\n    function Response(responseOptions) {\\n        var _this = _super.call(this) || this;\\n        _this._body = responseOptions.body;\\n        _this.status = responseOptions.status;\\n        _this.ok = (_this.status >= 200 && _this.status <= 299);\\n        _this.statusText = responseOptions.statusText;\\n        _this.headers = responseOptions.headers;\\n        _this.type = responseOptions.type;\\n        _this.url = responseOptions.url;\\n        return _this;\\n    }\\n    Response.prototype.toString = function () {\\n        return \\\"Response with status: \\\" + this.status + \\\" \\\" + this.statusText + \\\" for URL: \\\" + this.url;\\n    };\\n    return Response;\\n}(Body));\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\nvar _nextRequestId = 0;\\nvar JSONP_HOME = '__ng_jsonp__';\\nvar _jsonpConnections = null;\\nfunction _getJsonpConnections() {\\n    var w = typeof window == 'object' ? window : {};\\n    if (_jsonpConnections === null) {\\n        _jsonpConnections = w[JSONP_HOME] = {};\\n    }\\n    return _jsonpConnections;\\n}\\n// Make sure not to evaluate this in a non-browser environment!\\nvar BrowserJsonp = /** @class */ (function () {\\n    function BrowserJsonp() {\\n    }\\n    // Construct a <script> element with the specified URL\\n    BrowserJsonp.prototype.build = function (url) {\\n        var node = document.createElement('script');\\n        node.src = url;\\n        return node;\\n    };\\n    BrowserJsonp.prototype.nextRequestID = function () { return \\\"__req\\\" + _nextRequestId++; };\\n    BrowserJsonp.prototype.requestCallback = function (id) { return JSONP_HOME + \\\".\\\" + id + \\\".finished\\\"; };\\n    BrowserJsonp.prototype.exposeConnection = function (id, connection) {\\n        var connections = _getJsonpConnections();\\n        connections[id] = connection;\\n    };\\n    BrowserJsonp.prototype.removeConnection = function (id) {\\n        var connections = _getJsonpConnections();\\n        connections[id] = null;\\n    };\\n    // Attach the <script> element to the DOM\\n    BrowserJsonp.prototype.send = function (node) { document.body.appendChild((node)); };\\n    // Remove <script> element from the DOM\\n    BrowserJsonp.prototype.cleanup = function (node) {\\n        if (node.parentNode) {\\n            node.parentNode.removeChild((node));\\n        }\\n    };\\n    BrowserJsonp = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __decorate */ \\\"b\\\"])([\\n        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\\\"Injectable\\\"])()\\n    ], BrowserJsonp);\\n    return BrowserJsonp;\\n}());\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\\n/**\\n * Base class for an in-flight JSONP request.\\n *\\n * @deprecated see https://angular.io/guide/http\\n * @publicApi\\n */\\nvar JSONPConnection = /** @class */ (function () {\\n    /** @internal */\\n    function JSONPConnection(req, _dom, baseResponseOptions) {\\n        var _this = this;\\n        this._dom = _dom;\\n        this.baseResponseOptions = baseResponseOptions;\\n        this._finished = false;\\n        if (req.method !== RequestMethod.Get) {\\n            throw new TypeError(JSONP_ERR_WRONG_METHOD);\\n        }\\n        this.request = req;\\n        this.response = new rxjs__WEBPACK_IMPORTED_MODULE_2__[/* Observable */ \\\"a\\\"](function (responseObserver) {\\n            _this.readyState = ReadyState.Loading;\\n            var id = _this._id = _dom.nextRequestID();\\n            _dom.exposeConnection(id, _this);\\n            // Workaround Dart\\n            // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\\n            var callback = _dom.requestCallback(_this._id);\\n            var url = req.url;\\n            if (url.indexOf('=JSONP_CALLBACK&') > -1) {\\n                url = url.replace('=JSONP_CALLBACK&', \\\"=\\\" + callback + \\\"&\\\");\\n            }\\n            else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\\n                url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + (\\\"=\\\" + callback);\\n            }\\n            var script = _this._script = _dom.build(url);\\n            var onLoad = function (event) {\\n                if (_this.readyState === ReadyState.Cancelled)\\n                    return;\\n                _this.readyState = ReadyState.Done;\\n                _dom.cleanup(script);\\n                if (!_this._finished) {\\n                    var responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url: url });\\n                    if (baseResponseOptions) {\\n                        responseOptions_1 = baseResponseOptions.merge(responseOptions_1);\\n                    }\\n                    responseObserver.error(new Response(responseOptions_1));\\n                    return;\\n                }\\n                var responseOptions = new ResponseOptions({ body: _this._responseData, url: url });\\n                if (_this.baseResponseOptions) {\\n                    responseOptions = _this.baseResponseOptions.merge(responseOptions);\\n                }\\n                responseObserver.next(new Response(responseOptions));\\n                responseObserver.complete();\\n            };\\n            var onError = function (error) {\\n                if (_this.readyState === ReadyState.Cancelled)\\n                    return;\\n                _this.readyState = ReadyState.Done;\\n                _dom.cleanup(script);\\n                var responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });\\n                if (baseResponseOptions) {\\n                    responseOptions = baseResponseOptions.merge(responseOptions);\\n                }\\n                responseObserver.error(new Response(responseOptions));\\n            };\\n            script.addEventListener('load', onLoad);\\n            script.addEventListener('error', onError);\\n            _dom.send(script);\\n            return function () {\\n                _this.readyState = ReadyState.Cancelled;\\n                script.removeEventListener('load', onLoad);\\n                script.removeEventListener('error', onError);\\n                _this._dom.cleanup(script);\\n            };\\n        });\\n    }\\n    /**\\n     * Callback called when the JSONP request completes, to notify the application\\n     * of the new data.\\n     */\\n    JSONPConnection.prototype.finished = function (data) {\\n        // Don't leak connections\\n        this._finished = true;\\n        this._dom.removeConnection(this._id);\\n        if (this.readyState === ReadyState.Cancelled)\\n            return;\\n        this._responseData = data;\\n    };\\n    return JSONPConnection;\\n}());\\n/**\\n * A {@link ConnectionBackend} that uses the JSONP strategy of making requests.\\n *\\n * @deprecated see https://angular.io/guide/http\\n * @publicApi\\n */\\nvar JSONPBackend = /** @class */ (function (_super) {\\n    Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __extends */ \\\"c\\\"])(JSONPBackend, _super);\\n    /** @internal */\\n    function JSONPBackend(_browserJSONP, _baseResponseOptions) {\\n        var _this = _super.call(this) || this;\\n        _this._browserJSONP = _browserJSONP;\\n        _this._baseResponseOptions = _baseResponseOptions;\\n        return _this;\\n    }\\n    JSONPBackend.prototype.createConnection = function (request) {\\n        return new JSONPConnection(request, this._browserJSONP, this._baseResponseOptions);\\n    };\\n    JSONPBackend = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __decorate */ \\\"b\\\"])([\\n        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\\\"Injectable\\\"])(),\\n        Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __metadata */ \\\"d\\\"])(\\\"design:paramtypes\\\", [BrowserJsonp, ResponseOptions])\\n    ], JSONPBackend);\\n    return JSONPBackend;\\n}(ConnectionBackend));\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\nvar XSSI_PREFIX = /^\\\\)\\\\]\\\\}',?\\\\n/;\\n/**\\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\\n * request.\\n *\\n * This class would typically not be created or interacted with directly inside applications, though\\n * the {@link MockConnection} may be interacted with in tests.\\n *\\n * @deprecated see https://angular.io/guide/http\\n * @publicApi\\n */\\nvar XHRConnection = /** @class */ (function () {\\n    function XHRConnection(req, browserXHR, baseResponseOptions) {\\n        var _this = this;\\n        this.request = req;\\n        this.response = new rxjs__WEBPACK_IMPORTED_MODULE_2__[/* Observable */ \\\"a\\\"](function (responseObserver) {\\n            var _xhr = browserXHR.build();\\n            _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\\n            if (req.withCredentials != null) {\\n                _xhr.withCredentials = req.withCredentials;\\n            }\\n            // load event handler\\n            var onLoad = function () {\\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\\n                var status = _xhr.status === 1223 ? 204 : _xhr.status;\\n                var body = null;\\n                // HTTP 204 means no content\\n                if (status !== 204) {\\n                    // responseText is the old-school way of retrieving response (supported by IE8 & 9)\\n                    // response/responseType properties were introduced in ResourceLoader Level2 spec\\n                    // (supported by IE10)\\n                    body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\\n                    // Implicitly strip a potential XSSI prefix.\\n                    if (typeof body === 'string') {\\n                        body = body.replace(XSSI_PREFIX, '');\\n                    }\\n                }\\n                // fix status code when it is 0 (0 status is undocumented).\\n                // Occurs when accessing file resources or on Android 4.1 stock browser\\n                // while retrieving files from application cache.\\n                if (status === 0) {\\n                    status = body ? 200 : 0;\\n                }\\n                var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\\n                // IE 9 does not provide the way to get URL of response\\n                var url = getResponseURL(_xhr) || req.url;\\n                var statusText = _xhr.statusText || 'OK';\\n                var responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });\\n                if (baseResponseOptions != null) {\\n                    responseOptions = baseResponseOptions.merge(responseOptions);\\n                }\\n                var response = new Response(responseOptions);\\n                response.ok = isSuccess(status);\\n                if (response.ok) {\\n                    responseObserver.next(response);\\n                    // TODO(gdi2290): defer complete if array buffer until done\\n                    responseObserver.complete();\\n                    return;\\n                }\\n                responseObserver.error(response);\\n            };\\n            // error event handler\\n            var onError = function (err) {\\n                var responseOptions = new ResponseOptions({\\n                    body: err,\\n                    type: ResponseType.Error,\\n                    status: _xhr.status,\\n                    statusText: _xhr.statusText,\\n                });\\n                if (baseResponseOptions != null) {\\n                    responseOptions = baseResponseOptions.merge(responseOptions);\\n                }\\n                responseObserver.error(new Response(responseOptions));\\n            };\\n            _this.setDetectedContentType(req, _xhr);\\n            if (req.headers == null) {\\n                req.headers = new Headers();\\n            }\\n            if (!req.headers.has('Accept')) {\\n                req.headers.append('Accept', 'application/json, text/plain, */*');\\n            }\\n            req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(name, values.join(',')); });\\n            // Select the correct buffer type to store the response\\n            if (req.responseType != null && _xhr.responseType != null) {\\n                switch (req.responseType) {\\n                    case ResponseContentType.ArrayBuffer:\\n                        _xhr.responseType = 'arraybuffer';\\n                        break;\\n                    case ResponseContentType.Json:\\n                        _xhr.responseType = 'json';\\n                        break;\\n                    case ResponseContentType.Text:\\n                        _xhr.responseType = 'text';\\n                        break;\\n                    case ResponseContentType.Blob:\\n                        _xhr.responseType = 'blob';\\n                        break;\\n                    default:\\n                        throw new Error('The selected responseType is not supported');\\n                }\\n            }\\n            _xhr.addEventListener('load', onLoad);\\n            _xhr.addEventListener('error', onError);\\n            _xhr.send(_this.request.getBody());\\n            return function () {\\n                _xhr.removeEventListener('load', onLoad);\\n                _xhr.removeEventListener('error', onError);\\n                _xhr.abort();\\n            };\\n        });\\n    }\\n    XHRConnection.prototype.setDetectedContentType = function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {\\n        // Skip if a custom Content-Type header is provided\\n        if (req.headers != null && req.headers.get('Content-Type') != null) {\\n            return;\\n        }\\n        // Set the detected content type\\n        switch (req.contentType) {\\n            case ContentType.NONE:\\n                break;\\n            case ContentType.JSON:\\n                _xhr.setRequestHeader('content-type', 'application/json');\\n                break;\\n            case ContentType.FORM:\\n                _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\\n                break;\\n            case ContentType.TEXT:\\n                _xhr.setRequestHeader('content-type', 'text/plain');\\n                break;\\n            case ContentType.BLOB:\\n                var blob = req.blob();\\n                if (blob.type) {\\n                    _xhr.setRequestHeader('content-type', blob.type);\\n                }\\n                break;\\n        }\\n    };\\n    return XHRConnection;\\n}());\\n/**\\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\\n * for more information on XSRF.\\n *\\n * Applications can configure custom cookie and header names by binding an instance of this class\\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\\n * details.\\n *\\n * @deprecated see https://angular.io/guide/http\\n * @publicApi\\n */\\nvar CookieXSRFStrategy = /** @class */ (function () {\\n    function CookieXSRFStrategy(_cookieName, _headerName) {\\n        if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }\\n        if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }\\n        this._cookieName = _cookieName;\\n        this._headerName = _headerName;\\n    }\\n    CookieXSRFStrategy.prototype.configureRequest = function (req) {\\n        var xsrfToken = Object(_angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__[\\\"ɵgetDOM\\\"])().getCookie(this._cookieName);\\n        if (xsrfToken) {\\n            req.headers.set(this._headerName, xsrfToken);\\n        }\\n    };\\n    return CookieXSRFStrategy;\\n}());\\n/**\\n * Creates {@link XHRConnection} instances.\\n *\\n * This class would typically not be used by end users, but could be\\n * overridden if a different backend implementation should be used,\\n * such as in a node backend.\\n *\\n * @usageNotes\\n * ### Example\\n *\\n * ```\\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '@angular/http';\\n * @Component({\\n *   viewProviders: [\\n *     HTTP_PROVIDERS,\\n *     {provide: Http, useFactory: (backend, options) => {\\n *       return new Http(backend, options);\\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\\n * })\\n * class MyComponent {\\n *   constructor(http:Http) {\\n *     http.request('people.json').subscribe(res => this.people = res.json());\\n *   }\\n * }\\n * ```\\n * @deprecated see https://angular.io/guide/http\\n * @publicApi\\n */\\nvar XHRBackend = /** @class */ (function () {\\n    function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\\n        this._browserXHR = _browserXHR;\\n        this._baseResponseOptions = _baseResponseOptions;\\n        this._xsrfStrategy = _xsrfStrategy;\\n    }\\n    XHRBackend.prototype.createConnection = function (request) {\\n        this._xsrfStrategy.configureRequest(request);\\n        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\\n    };\\n    XHRBackend = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __decorate */ \\\"b\\\"])([\\n        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\\\"Injectable\\\"])(),\\n        Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __metadata */ \\\"d\\\"])(\\\"design:paramtypes\\\", [BrowserXhr, ResponseOptions,\\n            XSRFStrategy])\\n    ], XHRBackend);\\n    return XHRBackend;\\n}());\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n/**\\n * Creates a request options object to be optionally provided when instantiating a\\n * {@link Request}.\\n *\\n * This class is based on the `RequestInit` description in the [Fetch\\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\\n *\\n * All values are null by default. Typical defaults can be found in the {@link BaseRequestOptions}\\n * class, which sub-classes `RequestOptions`.\\n *\\n * ```typescript\\n * import {RequestOptions, Request, RequestMethod} from '@angular/http';\\n *\\n * const options = new RequestOptions({\\n *   method: RequestMethod.Post,\\n *   url: 'https://google.com'\\n * });\\n * const req = new Request(options);\\n * console.log('req.method:', RequestMethod[req.method]); // Post\\n * console.log('options.url:', options.url); // https://google.com\\n * ```\\n *\\n * @deprecated see https://angular.io/guide/http\\n * @publicApi\\n */\\nvar RequestOptions = /** @class */ (function () {\\n    // TODO(Dzmitry): remove search when this.search is removed\\n    function RequestOptions(opts) {\\n        if (opts === void 0) { opts = {}; }\\n        var method = opts.method, headers = opts.headers, body = opts.body, url = opts.url, search = opts.search, params = opts.params, withCredentials = opts.withCredentials, responseType = opts.responseType;\\n        this.method = method != null ? normalizeMethodName(method) : null;\\n        this.headers = headers != null ? headers : null;\\n        this.body = body != null ? body : null;\\n        this.url = url != null ? url : null;\\n        this.params = this._mergeSearchParams(params || search);\\n        this.withCredentials = withCredentials != null ? withCredentials : null;\\n        this.responseType = responseType != null ? responseType : null;\\n    }\\n    Object.defineProperty(RequestOptions.prototype, \\\"search\\\", {\\n        /**\\n         * @deprecated from 4.0.0. Use params instead.\\n         */\\n        get: function () { return this.params; },\\n        /**\\n         * @deprecated from 4.0.0. Use params instead.\\n         */\\n        set: function (params) { this.params = params; },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    /**\\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\\n     * existing values. This method will not change the values of the instance on which it is being\\n     * called.\\n     *\\n     * Note that `headers` and `search` will override existing values completely if present in\\n     * the `options` object. If these values should be merged, it should be done prior to calling\\n     * `merge` on the `RequestOptions` instance.\\n     *\\n     * ```typescript\\n     * import {RequestOptions, Request, RequestMethod} from '@angular/http';\\n     *\\n     * const options = new RequestOptions({\\n     *   method: RequestMethod.Post\\n     * });\\n     * const req = new Request(options.merge({\\n     *   url: 'https://google.com'\\n     * }));\\n     * console.log('req.method:', RequestMethod[req.method]); // Post\\n     * console.log('options.url:', options.url); // null\\n     * console.log('req.url:', req.url); // https://google.com\\n     * ```\\n     */\\n    RequestOptions.prototype.merge = function (options) {\\n        return new RequestOptions({\\n            method: options && options.method != null ? options.method : this.method,\\n            headers: options && options.headers != null ? options.headers : new Headers(this.headers),\\n            body: options && options.body != null ? options.body : this.body,\\n            url: options && options.url != null ? options.url : this.url,\\n            params: options && this._mergeSearchParams(options.params || options.search),\\n            withCredentials: options && options.withCredentials != null ? options.withCredentials :\\n                this.withCredentials,\\n            responseType: options && options.responseType != null ? options.responseType :\\n                this.responseType\\n        });\\n    };\\n    RequestOptions.prototype._mergeSearchParams = function (params) {\\n        if (!params)\\n            return this.params;\\n        if (params instanceof URLSearchParams) {\\n            return params.clone();\\n        }\\n        if (typeof params === 'string') {\\n            return new URLSearchParams(params);\\n        }\\n        return this._parseParams(params);\\n    };\\n    RequestOptions.prototype._parseParams = function (objParams) {\\n        var _this = this;\\n        if (objParams === void 0) { objParams = {}; }\\n        var params = new URLSearchParams();\\n        Object.keys(objParams).forEach(function (key) {\\n            var value = objParams[key];\\n            if (Array.isArray(value)) {\\n                value.forEach(function (item) { return _this._appendParam(key, item, params); });\\n            }\\n            else {\\n                _this._appendParam(key, value, params);\\n            }\\n        });\\n        return params;\\n    };\\n    RequestOptions.prototype._appendParam = function (key, value, params) {\\n        if (typeof value !== 'string') {\\n            value = JSON.stringify(value);\\n        }\\n        params.append(key, value);\\n    };\\n    return RequestOptions;\\n}());\\n/**\\n * Subclass of {@link RequestOptions}, with default values.\\n *\\n * Default values:\\n *  * method: {@link RequestMethod RequestMethod.Get}\\n *  * headers: empty {@link Headers} object\\n *\\n * This class could be extended and bound to the {@link RequestOptions} class\\n * when configuring an {@link Injector}, in order to override the default options\\n * used by {@link Http} to create and send {@link Request Requests}.\\n *\\n * ```typescript\\n * import {BaseRequestOptions, RequestOptions} from '@angular/http';\\n *\\n * class MyOptions extends BaseRequestOptions {\\n *   search: string = 'coreTeam=true';\\n * }\\n *\\n * {provide: RequestOptions, useClass: MyOptions};\\n * ```\\n *\\n * The options could also be extended when manually creating a {@link Request}\\n * object.\\n *\\n * ```\\n * import {BaseRequestOptions, Request, RequestMethod} from '@angular/http';\\n *\\n * const options = new BaseRequestOptions();\\n * const req = new Request(options.merge({\\n *   method: RequestMethod.Post,\\n *   url: 'https://google.com'\\n * }));\\n * console.log('req.method:', RequestMethod[req.method]); // Post\\n * console.log('options.url:', options.url); // null\\n * console.log('req.url:', req.url); // https://google.com\\n * ```\\n *\\n * @deprecated see https://angular.io/guide/http\\n * @publicApi\\n */\\nvar BaseRequestOptions = /** @class */ (function (_super) {\\n    Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __extends */ \\\"c\\\"])(BaseRequestOptions, _super);\\n    function BaseRequestOptions() {\\n        return _super.call(this, { method: RequestMethod.Get, headers: new Headers() }) || this;\\n    }\\n    BaseRequestOptions = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __decorate */ \\\"b\\\"])([\\n        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\\\"Injectable\\\"])(),\\n        Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __metadata */ \\\"d\\\"])(\\\"design:paramtypes\\\", [])\\n    ], BaseRequestOptions);\\n    return BaseRequestOptions;\\n}(RequestOptions));\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n// TODO(jeffbcross): properly implement body accessors\\n/**\\n * Creates `Request` instances from provided values.\\n *\\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\\n * Spec](https://fetch.spec.whatwg.org/#request-class),\\n * but is considered a static value whose body can be accessed many times. There are other\\n * differences in the implementation, but this is the most significant.\\n *\\n * `Request` instances are typically created by higher-level classes, like {@link Http} and\\n * {@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\\n * One such example is when creating services that wrap higher-level services, like {@link Http},\\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\\n *\\n * ```typescript\\n * import {Injectable, Injector} from '@angular/core';\\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '@angular/http';\\n *\\n * @Injectable()\\n * class AutoAuthenticator {\\n *   constructor(public http:Http) {}\\n *   request(url:string) {\\n *     return this.http.request(new Request({\\n *       method: RequestMethod.Get,\\n *       url: url,\\n *       search: 'password=123'\\n *     }));\\n *   }\\n * }\\n *\\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\\n * var authenticator = injector.get(AutoAuthenticator);\\n * authenticator.request('people.json').subscribe(res => {\\n *   //URL should have included '?password=123'\\n *   console.log('people', res.json());\\n * });\\n * ```\\n *\\n * @deprecated see https://angular.io/guide/http\\n * @publicApi\\n */\\nvar Request = /** @class */ (function (_super) {\\n    Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __extends */ \\\"c\\\"])(Request, _super);\\n    function Request(requestOptions) {\\n        var _this = _super.call(this) || this;\\n        // TODO: assert that url is present\\n        var url = requestOptions.url;\\n        _this.url = requestOptions.url;\\n        var paramsArg = requestOptions.params || requestOptions.search;\\n        if (paramsArg) {\\n            var params = void 0;\\n            if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\\n                params = urlEncodeParams(paramsArg).toString();\\n            }\\n            else {\\n                params = paramsArg.toString();\\n            }\\n            if (params.length > 0) {\\n                var prefix = '?';\\n                if (_this.url.indexOf('?') != -1) {\\n                    prefix = (_this.url[_this.url.length - 1] == '&') ? '' : '&';\\n                }\\n                // TODO: just delete search-query-looking string in url?\\n                _this.url = url + prefix + params;\\n            }\\n        }\\n        _this._body = requestOptions.body;\\n        _this.method = normalizeMethodName(requestOptions.method);\\n        // TODO(jeffbcross): implement behavior\\n        // Defaults to 'omit', consistent with browser\\n        _this.headers = new Headers(requestOptions.headers);\\n        _this.contentType = _this.detectContentType();\\n        _this.withCredentials = requestOptions.withCredentials;\\n        _this.responseType = requestOptions.responseType;\\n        return _this;\\n    }\\n    /**\\n     * Returns the content type enum based on header options.\\n     */\\n    Request.prototype.detectContentType = function () {\\n        switch (this.headers.get('content-type')) {\\n            case 'application/json':\\n                return ContentType.JSON;\\n            case 'application/x-www-form-urlencoded':\\n                return ContentType.FORM;\\n            case 'multipart/form-data':\\n                return ContentType.FORM_DATA;\\n            case 'text/plain':\\n            case 'text/html':\\n                return ContentType.TEXT;\\n            case 'application/octet-stream':\\n                return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\\n            default:\\n                return this.detectContentTypeFromBody();\\n        }\\n    };\\n    /**\\n     * Returns the content type of request's body based on its type.\\n     */\\n    Request.prototype.detectContentTypeFromBody = function () {\\n        if (this._body == null) {\\n            return ContentType.NONE;\\n        }\\n        else if (this._body instanceof URLSearchParams) {\\n            return ContentType.FORM;\\n        }\\n        else if (this._body instanceof FormData) {\\n            return ContentType.FORM_DATA;\\n        }\\n        else if (this._body instanceof Blob$1) {\\n            return ContentType.BLOB;\\n        }\\n        else if (this._body instanceof ArrayBuffer$1) {\\n            return ContentType.ARRAY_BUFFER;\\n        }\\n        else if (this._body && typeof this._body === 'object') {\\n            return ContentType.JSON;\\n        }\\n        else {\\n            return ContentType.TEXT;\\n        }\\n    };\\n    /**\\n     * Returns the request's body according to its type. If body is undefined, return\\n     * null.\\n     */\\n    Request.prototype.getBody = function () {\\n        switch (this.contentType) {\\n            case ContentType.JSON:\\n                return this.text();\\n            case ContentType.FORM:\\n                return this.text();\\n            case ContentType.FORM_DATA:\\n                return this._body;\\n            case ContentType.TEXT:\\n                return this.text();\\n            case ContentType.BLOB:\\n                return this.blob();\\n            case ContentType.ARRAY_BUFFER:\\n                return this.arrayBuffer();\\n            default:\\n                return null;\\n        }\\n    };\\n    return Request;\\n}(Body));\\nfunction urlEncodeParams(params) {\\n    var searchParams = new URLSearchParams();\\n    Object.keys(params).forEach(function (key) {\\n        var value = params[key];\\n        if (value && Array.isArray(value)) {\\n            value.forEach(function (element) { return searchParams.append(key, element.toString()); });\\n        }\\n        else {\\n            searchParams.append(key, value.toString());\\n        }\\n    });\\n    return searchParams;\\n}\\nvar noop = function () { };\\nvar w = typeof window == 'object' ? window : noop;\\nvar FormData = w /** TODO #9100 */['FormData'] || noop;\\nvar Blob$1 = w /** TODO #9100 */['Blob'] || noop;\\nvar ArrayBuffer$1 = w /** TODO #9100 */['ArrayBuffer'] || noop;\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\nfunction httpRequest(backend, request) {\\n    return backend.createConnection(request).response;\\n}\\nfunction mergeOptions(defaultOpts, providedOpts, method, url) {\\n    var newOptions = defaultOpts;\\n    if (providedOpts) {\\n        // Hack so Dart can used named parameters\\n        return newOptions.merge(new RequestOptions({\\n            method: providedOpts.method || method,\\n            url: providedOpts.url || url,\\n            search: providedOpts.search,\\n            params: providedOpts.params,\\n            headers: providedOpts.headers,\\n            body: providedOpts.body,\\n            withCredentials: providedOpts.withCredentials,\\n            responseType: providedOpts.responseType\\n        }));\\n    }\\n    return newOptions.merge(new RequestOptions({ method: method, url: url }));\\n}\\n/**\\n * Performs http requests using `XMLHttpRequest` as the default backend.\\n *\\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\\n * `request` returns an `Observable` which will emit a single {@link Response} when a\\n * response is received.\\n *\\n * @usageNotes\\n * ### Example\\n *\\n * ```typescript\\n * import {Http, HTTP_PROVIDERS} from '@angular/http';\\n * import {map} from 'rxjs/operators';\\n *\\n * @Component({\\n *   selector: 'http-app',\\n *   viewProviders: [HTTP_PROVIDERS],\\n *   templateUrl: 'people.html'\\n * })\\n * class PeopleComponent {\\n *   constructor(http: Http) {\\n *     http.get('people.json')\\n *       // Call map on the response observable to get the parsed people object\\n *       .pipe(map(res => res.json()))\\n *       // Subscribe to the observable to get the parsed people object and attach it to the\\n *       // component\\n *       .subscribe(people => this.people = people);\\n *   }\\n * }\\n * ```\\n *\\n *\\n * ### Example\\n *\\n * ```\\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\\n * ```\\n *\\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \\\"Backend\\\" (\\n * {@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\\n * the {@link XHRBackend} provider, as in the following example:\\n *\\n * ### Example\\n *\\n * ```typescript\\n * import {BaseRequestOptions, Http} from '@angular/http';\\n * import {MockBackend} from '@angular/http/testing';\\n * var injector = Injector.resolveAndCreate([\\n *   BaseRequestOptions,\\n *   MockBackend,\\n *   {provide: Http, useFactory:\\n *       function(backend, defaultOptions) {\\n *         return new Http(backend, defaultOptions);\\n *       },\\n *       deps: [MockBackend, BaseRequestOptions]}\\n * ]);\\n * var http = injector.get(Http);\\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\\n * ```\\n *\\n * @deprecated see https://angular.io/guide/http\\n * @publicApi\\n */\\nvar Http = /** @class */ (function () {\\n    function Http(_backend, _defaultOptions) {\\n        this._backend = _backend;\\n        this._defaultOptions = _defaultOptions;\\n    }\\n    /**\\n     * Performs any type of http request. First argument is required, and can either be a url or\\n     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\\n     * object can be provided as the 2nd argument. The options object will be merged with the values\\n     * of {@link BaseRequestOptions} before performing the request.\\n     */\\n    Http.prototype.request = function (url, options) {\\n        var responseObservable;\\n        if (typeof url === 'string') {\\n            responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\\n        }\\n        else if (url instanceof Request) {\\n            responseObservable = httpRequest(this._backend, url);\\n        }\\n        else {\\n            throw new Error('First argument must be a url string or Request instance.');\\n        }\\n        return responseObservable;\\n    };\\n    /**\\n     * Performs a request with `get` http method.\\n     */\\n    Http.prototype.get = function (url, options) {\\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\\n    };\\n    /**\\n     * Performs a request with `post` http method.\\n     */\\n    Http.prototype.post = function (url, body, options) {\\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url)));\\n    };\\n    /**\\n     * Performs a request with `put` http method.\\n     */\\n    Http.prototype.put = function (url, body, options) {\\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url)));\\n    };\\n    /**\\n     * Performs a request with `delete` http method.\\n     */\\n    Http.prototype.delete = function (url, options) {\\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\\n    };\\n    /**\\n     * Performs a request with `patch` http method.\\n     */\\n    Http.prototype.patch = function (url, body, options) {\\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url)));\\n    };\\n    /**\\n     * Performs a request with `head` http method.\\n     */\\n    Http.prototype.head = function (url, options) {\\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\\n    };\\n    /**\\n     * Performs a request with `options` http method.\\n     */\\n    Http.prototype.options = function (url, options) {\\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\\n    };\\n    Http = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __decorate */ \\\"b\\\"])([\\n        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\\\"Injectable\\\"])(),\\n        Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __metadata */ \\\"d\\\"])(\\\"design:paramtypes\\\", [ConnectionBackend, RequestOptions])\\n    ], Http);\\n    return Http;\\n}());\\n/**\\n * @deprecated see https://angular.io/guide/http\\n * @publicApi\\n */\\nvar Jsonp = /** @class */ (function (_super) {\\n    Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __extends */ \\\"c\\\"])(Jsonp, _super);\\n    function Jsonp(backend, defaultOptions) {\\n        return _super.call(this, backend, defaultOptions) || this;\\n    }\\n    /**\\n     * Performs any type of http request. First argument is required, and can either be a url or\\n     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\\n     * object can be provided as the 2nd argument. The options object will be merged with the values\\n     * of {@link BaseRequestOptions} before performing the request.\\n     *\\n     * @security Regular XHR is the safest alternative to JSONP for most applications, and is\\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\\n     * future security issues (e.g. content sniffing).  For more detail, see the\\n     * [Security Guide](http://g.co/ng/security).\\n     */\\n    Jsonp.prototype.request = function (url, options) {\\n        var responseObservable;\\n        if (typeof url === 'string') {\\n            url =\\n                new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url));\\n        }\\n        if (url instanceof Request) {\\n            if (url.method !== RequestMethod.Get) {\\n                throw new Error('JSONP requests must use GET request method.');\\n            }\\n            responseObservable = httpRequest(this._backend, url);\\n        }\\n        else {\\n            throw new Error('First argument must be a url string or Request instance.');\\n        }\\n        return responseObservable;\\n    };\\n    Jsonp = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __decorate */ \\\"b\\\"])([\\n        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\\\"Injectable\\\"])(),\\n        Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __metadata */ \\\"d\\\"])(\\\"design:paramtypes\\\", [ConnectionBackend, RequestOptions])\\n    ], Jsonp);\\n    return Jsonp;\\n}(Http));\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\nfunction _createDefaultCookieXSRFStrategy() {\\n    return new CookieXSRFStrategy();\\n}\\nfunction httpFactory(xhrBackend, requestOptions) {\\n    return new Http(xhrBackend, requestOptions);\\n}\\nfunction jsonpFactory(jsonpBackend, requestOptions) {\\n    return new Jsonp(jsonpBackend, requestOptions);\\n}\\n/**\\n * The module that includes http's providers\\n *\\n * @deprecated see https://angular.io/guide/http\\n * @publicApi\\n */\\nvar HttpModule = /** @class */ (function () {\\n    function HttpModule() {\\n    }\\n    HttpModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __decorate */ \\\"b\\\"])([\\n        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\\\"NgModule\\\"])({\\n            providers: [\\n                // TODO(pascal): use factory type annotations once supported in DI\\n                // issue: https://github.com/angular/angular/issues/3183\\n                { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\\n                BrowserXhr,\\n                { provide: RequestOptions, useClass: BaseRequestOptions },\\n                { provide: ResponseOptions, useClass: BaseResponseOptions },\\n                XHRBackend,\\n                { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\\n            ],\\n        })\\n    ], HttpModule);\\n    return HttpModule;\\n}());\\n/**\\n * The module that includes jsonp's providers\\n *\\n * @deprecated see https://angular.io/guide/http\\n * @publicApi\\n */\\nvar JsonpModule = /** @class */ (function () {\\n    function JsonpModule() {\\n    }\\n    JsonpModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __decorate */ \\\"b\\\"])([\\n        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\\\"NgModule\\\"])({\\n            providers: [\\n                // TODO(pascal): use factory type annotations once supported in DI\\n                // issue: https://github.com/angular/angular/issues/3183\\n                { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\\n                BrowserJsonp,\\n                { provide: RequestOptions, useClass: BaseRequestOptions },\\n                { provide: ResponseOptions, useClass: BaseResponseOptions },\\n                JSONPBackend,\\n            ],\\n        })\\n    ], JsonpModule);\\n    return JsonpModule;\\n}());\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n/**\\n * @deprecated see https://angular.io/guide/http\\n * @publicApi\\n */\\nvar VERSION = new _angular_core__WEBPACK_IMPORTED_MODULE_1__[\\\"Version\\\"]('7.0.4');\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n// This file only reexports content of the `src` folder. Keep it that way.\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n\\n/**\\n * Generated bundle index. Do not edit.\\n */\\n\\n\\n//# sourceMappingURL=http.js.map\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///349\\n\")},354:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js\\nvar tslib_es6 = __webpack_require__(0);\\n\\n// EXTERNAL MODULE: ./node_modules/@angular/core/fesm5/core.js\\nvar core = __webpack_require__(1);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/of.js + 1 modules\\nvar of = __webpack_require__(72);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/from.js + 5 modules\\nvar from = __webpack_require__(22);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/BehaviorSubject.js\\nvar BehaviorSubject = __webpack_require__(162);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Observable.js + 1 modules\\nvar Observable = __webpack_require__(4);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/EmptyError.js\\nvar EmptyError = __webpack_require__(54);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Subject.js\\nvar Subject = __webpack_require__(20);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/empty.js\\nvar empty = __webpack_require__(11);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/map.js\\nvar map = __webpack_require__(23);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/concatAll.js\\nvar concatAll = __webpack_require__(163);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Subscriber.js\\nvar Subscriber = __webpack_require__(5);\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/filter.js\\n/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\\n\\n\\nfunction filter(predicate, thisArg) {\\n    return function filterOperatorFunction(source) {\\n        return source.lift(new FilterOperator(predicate, thisArg));\\n    };\\n}\\nvar FilterOperator = /*@__PURE__*/ (function () {\\n    function FilterOperator(predicate, thisArg) {\\n        this.predicate = predicate;\\n        this.thisArg = thisArg;\\n    }\\n    FilterOperator.prototype.call = function (subscriber, source) {\\n        return source.subscribe(new filter_FilterSubscriber(subscriber, this.predicate, this.thisArg));\\n    };\\n    return FilterOperator;\\n}());\\nvar filter_FilterSubscriber = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](FilterSubscriber, _super);\\n    function FilterSubscriber(destination, predicate, thisArg) {\\n        var _this = _super.call(this, destination) || this;\\n        _this.predicate = predicate;\\n        _this.thisArg = thisArg;\\n        _this.count = 0;\\n        return _this;\\n    }\\n    FilterSubscriber.prototype._next = function (value) {\\n        var result;\\n        try {\\n            result = this.predicate.call(this.thisArg, value, this.count++);\\n        }\\n        catch (err) {\\n            this.destination.error(err);\\n            return;\\n        }\\n        if (result) {\\n            this.destination.next(value);\\n        }\\n    };\\n    return FilterSubscriber;\\n}(Subscriber[\"a\" /* Subscriber */]));\\n//# sourceMappingURL=filter.js.map\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/ArgumentOutOfRangeError.js\\nvar ArgumentOutOfRangeError = __webpack_require__(71);\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/takeLast.js\\n/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */\\n\\n\\n\\n\\nfunction takeLast(count) {\\n    return function takeLastOperatorFunction(source) {\\n        if (count === 0) {\\n            return Object(empty[\"b\" /* empty */])();\\n        }\\n        else {\\n            return source.lift(new takeLast_TakeLastOperator(count));\\n        }\\n    };\\n}\\nvar takeLast_TakeLastOperator = /*@__PURE__*/ (function () {\\n    function TakeLastOperator(total) {\\n        this.total = total;\\n        if (this.total < 0) {\\n            throw new ArgumentOutOfRangeError[\"a\" /* ArgumentOutOfRangeError */];\\n        }\\n    }\\n    TakeLastOperator.prototype.call = function (subscriber, source) {\\n        return source.subscribe(new takeLast_TakeLastSubscriber(subscriber, this.total));\\n    };\\n    return TakeLastOperator;\\n}());\\nvar takeLast_TakeLastSubscriber = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](TakeLastSubscriber, _super);\\n    function TakeLastSubscriber(destination, total) {\\n        var _this = _super.call(this, destination) || this;\\n        _this.total = total;\\n        _this.ring = new Array();\\n        _this.count = 0;\\n        return _this;\\n    }\\n    TakeLastSubscriber.prototype._next = function (value) {\\n        var ring = this.ring;\\n        var total = this.total;\\n        var count = this.count++;\\n        if (ring.length < total) {\\n            ring.push(value);\\n        }\\n        else {\\n            var index = count % total;\\n            ring[index] = value;\\n        }\\n    };\\n    TakeLastSubscriber.prototype._complete = function () {\\n        var destination = this.destination;\\n        var count = this.count;\\n        if (count > 0) {\\n            var total = this.count >= this.total ? this.total : this.count;\\n            var ring = this.ring;\\n            for (var i = 0; i < total; i++) {\\n                var idx = (count++) % total;\\n                destination.next(ring[idx]);\\n            }\\n        }\\n        destination.complete();\\n    };\\n    return TakeLastSubscriber;\\n}(Subscriber[\"a\" /* Subscriber */]));\\n//# sourceMappingURL=takeLast.js.map\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/noop.js\\nvar noop = __webpack_require__(21);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/isFunction.js\\nvar isFunction = __webpack_require__(37);\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/tap.js\\n/** PURE_IMPORTS_START tslib,_Subscriber,_util_noop,_util_isFunction PURE_IMPORTS_END */\\n\\n\\n\\n\\nfunction tap(nextOrObserver, error, complete) {\\n    return function tapOperatorFunction(source) {\\n        return source.lift(new DoOperator(nextOrObserver, error, complete));\\n    };\\n}\\nvar DoOperator = /*@__PURE__*/ (function () {\\n    function DoOperator(nextOrObserver, error, complete) {\\n        this.nextOrObserver = nextOrObserver;\\n        this.error = error;\\n        this.complete = complete;\\n    }\\n    DoOperator.prototype.call = function (subscriber, source) {\\n        return source.subscribe(new tap_TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\\n    };\\n    return DoOperator;\\n}());\\nvar tap_TapSubscriber = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](TapSubscriber, _super);\\n    function TapSubscriber(destination, observerOrNext, error, complete) {\\n        var _this = _super.call(this, destination) || this;\\n        _this._tapNext = noop[\"a\" /* noop */];\\n        _this._tapError = noop[\"a\" /* noop */];\\n        _this._tapComplete = noop[\"a\" /* noop */];\\n        _this._tapError = error || noop[\"a\" /* noop */];\\n        _this._tapComplete = complete || noop[\"a\" /* noop */];\\n        if (Object(isFunction[\"a\" /* isFunction */])(observerOrNext)) {\\n            _this._context = _this;\\n            _this._tapNext = observerOrNext;\\n        }\\n        else if (observerOrNext) {\\n            _this._context = observerOrNext;\\n            _this._tapNext = observerOrNext.next || noop[\"a\" /* noop */];\\n            _this._tapError = observerOrNext.error || noop[\"a\" /* noop */];\\n            _this._tapComplete = observerOrNext.complete || noop[\"a\" /* noop */];\\n        }\\n        return _this;\\n    }\\n    TapSubscriber.prototype._next = function (value) {\\n        try {\\n            this._tapNext.call(this._context, value);\\n        }\\n        catch (err) {\\n            this.destination.error(err);\\n            return;\\n        }\\n        this.destination.next(value);\\n    };\\n    TapSubscriber.prototype._error = function (err) {\\n        try {\\n            this._tapError.call(this._context, err);\\n        }\\n        catch (err) {\\n            this.destination.error(err);\\n            return;\\n        }\\n        this.destination.error(err);\\n    };\\n    TapSubscriber.prototype._complete = function () {\\n        try {\\n            this._tapComplete.call(this._context);\\n        }\\n        catch (err) {\\n            this.destination.error(err);\\n            return;\\n        }\\n        return this.destination.complete();\\n    };\\n    return TapSubscriber;\\n}(Subscriber[\"a\" /* Subscriber */]));\\n//# sourceMappingURL=tap.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/throwIfEmpty.js\\n/** PURE_IMPORTS_START _tap,_util_EmptyError PURE_IMPORTS_END */\\n\\n\\nvar throwIfEmpty = function (errorFactory) {\\n    if (errorFactory === void 0) {\\n        errorFactory = defaultErrorFactory;\\n    }\\n    return tap({\\n        hasValue: false,\\n        next: function () { this.hasValue = true; },\\n        complete: function () {\\n            if (!this.hasValue) {\\n                throw errorFactory();\\n            }\\n        }\\n    });\\n};\\nfunction defaultErrorFactory() {\\n    return new EmptyError[\"a\" /* EmptyError */]();\\n}\\n//# sourceMappingURL=throwIfEmpty.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/defaultIfEmpty.js\\n/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\\n\\n\\nfunction defaultIfEmpty(defaultValue) {\\n    if (defaultValue === void 0) {\\n        defaultValue = null;\\n    }\\n    return function (source) { return source.lift(new DefaultIfEmptyOperator(defaultValue)); };\\n}\\nvar DefaultIfEmptyOperator = /*@__PURE__*/ (function () {\\n    function DefaultIfEmptyOperator(defaultValue) {\\n        this.defaultValue = defaultValue;\\n    }\\n    DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {\\n        return source.subscribe(new defaultIfEmpty_DefaultIfEmptySubscriber(subscriber, this.defaultValue));\\n    };\\n    return DefaultIfEmptyOperator;\\n}());\\nvar defaultIfEmpty_DefaultIfEmptySubscriber = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](DefaultIfEmptySubscriber, _super);\\n    function DefaultIfEmptySubscriber(destination, defaultValue) {\\n        var _this = _super.call(this, destination) || this;\\n        _this.defaultValue = defaultValue;\\n        _this.isEmpty = true;\\n        return _this;\\n    }\\n    DefaultIfEmptySubscriber.prototype._next = function (value) {\\n        this.isEmpty = false;\\n        this.destination.next(value);\\n    };\\n    DefaultIfEmptySubscriber.prototype._complete = function () {\\n        if (this.isEmpty) {\\n            this.destination.next(this.defaultValue);\\n        }\\n        this.destination.complete();\\n    };\\n    return DefaultIfEmptySubscriber;\\n}(Subscriber[\"a\" /* Subscriber */]));\\n//# sourceMappingURL=defaultIfEmpty.js.map\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/identity.js\\nvar identity = __webpack_require__(36);\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/last.js\\n/** PURE_IMPORTS_START _util_EmptyError,_filter,_takeLast,_throwIfEmpty,_defaultIfEmpty,_util_identity PURE_IMPORTS_END */\\n\\n\\n\\n\\n\\n\\nfunction last(predicate, defaultValue) {\\n    var hasDefaultValue = arguments.length >= 2;\\n    return function (source) { return source.pipe(predicate ? filter(function (v, i) { return predicate(v, i, source); }) : identity[\"a\" /* identity */], takeLast(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function () { return new EmptyError[\"a\" /* EmptyError */](); })); };\\n}\\n//# sourceMappingURL=last.js.map\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/mergeAll.js\\nvar mergeAll = __webpack_require__(94);\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/every.js\\n/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\\n\\n\\nfunction every(predicate, thisArg) {\\n    return function (source) { return source.lift(new EveryOperator(predicate, thisArg, source)); };\\n}\\nvar EveryOperator = /*@__PURE__*/ (function () {\\n    function EveryOperator(predicate, thisArg, source) {\\n        this.predicate = predicate;\\n        this.thisArg = thisArg;\\n        this.source = source;\\n    }\\n    EveryOperator.prototype.call = function (observer, source) {\\n        return source.subscribe(new every_EverySubscriber(observer, this.predicate, this.thisArg, this.source));\\n    };\\n    return EveryOperator;\\n}());\\nvar every_EverySubscriber = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](EverySubscriber, _super);\\n    function EverySubscriber(destination, predicate, thisArg, source) {\\n        var _this = _super.call(this, destination) || this;\\n        _this.predicate = predicate;\\n        _this.thisArg = thisArg;\\n        _this.source = source;\\n        _this.index = 0;\\n        _this.thisArg = thisArg || _this;\\n        return _this;\\n    }\\n    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {\\n        this.destination.next(everyValueMatch);\\n        this.destination.complete();\\n    };\\n    EverySubscriber.prototype._next = function (value) {\\n        var result = false;\\n        try {\\n            result = this.predicate.call(this.thisArg, value, this.index++, this.source);\\n        }\\n        catch (err) {\\n            this.destination.error(err);\\n            return;\\n        }\\n        if (!result) {\\n            this.notifyComplete(false);\\n        }\\n    };\\n    EverySubscriber.prototype._complete = function () {\\n        this.notifyComplete(true);\\n    };\\n    return EverySubscriber;\\n}(Subscriber[\"a\" /* Subscriber */]));\\n//# sourceMappingURL=every.js.map\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/OuterSubscriber.js\\nvar OuterSubscriber = __webpack_require__(25);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/InnerSubscriber.js\\nvar InnerSubscriber = __webpack_require__(55);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/subscribeToResult.js\\nvar subscribeToResult = __webpack_require__(24);\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/catchError.js\\n/** PURE_IMPORTS_START tslib,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\\n\\n\\n\\n\\nfunction catchError(selector) {\\n    return function catchErrorOperatorFunction(source) {\\n        var operator = new CatchOperator(selector);\\n        var caught = source.lift(operator);\\n        return (operator.caught = caught);\\n    };\\n}\\nvar CatchOperator = /*@__PURE__*/ (function () {\\n    function CatchOperator(selector) {\\n        this.selector = selector;\\n    }\\n    CatchOperator.prototype.call = function (subscriber, source) {\\n        return source.subscribe(new catchError_CatchSubscriber(subscriber, this.selector, this.caught));\\n    };\\n    return CatchOperator;\\n}());\\nvar catchError_CatchSubscriber = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](CatchSubscriber, _super);\\n    function CatchSubscriber(destination, selector, caught) {\\n        var _this = _super.call(this, destination) || this;\\n        _this.selector = selector;\\n        _this.caught = caught;\\n        return _this;\\n    }\\n    CatchSubscriber.prototype.error = function (err) {\\n        if (!this.isStopped) {\\n            var result = void 0;\\n            try {\\n                result = this.selector(err, this.caught);\\n            }\\n            catch (err2) {\\n                _super.prototype.error.call(this, err2);\\n                return;\\n            }\\n            this._unsubscribeAndRecycle();\\n            var innerSubscriber = new InnerSubscriber[\"a\" /* InnerSubscriber */](this, undefined, undefined);\\n            this.add(innerSubscriber);\\n            Object(subscribeToResult[\"a\" /* subscribeToResult */])(this, result, undefined, undefined, innerSubscriber);\\n        }\\n    };\\n    return CatchSubscriber;\\n}(OuterSubscriber[\"a\" /* OuterSubscriber */]));\\n//# sourceMappingURL=catchError.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/take.js\\n/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */\\n\\n\\n\\n\\nfunction take(count) {\\n    return function (source) {\\n        if (count === 0) {\\n            return Object(empty[\"b\" /* empty */])();\\n        }\\n        else {\\n            return source.lift(new take_TakeOperator(count));\\n        }\\n    };\\n}\\nvar take_TakeOperator = /*@__PURE__*/ (function () {\\n    function TakeOperator(total) {\\n        this.total = total;\\n        if (this.total < 0) {\\n            throw new ArgumentOutOfRangeError[\"a\" /* ArgumentOutOfRangeError */];\\n        }\\n    }\\n    TakeOperator.prototype.call = function (subscriber, source) {\\n        return source.subscribe(new take_TakeSubscriber(subscriber, this.total));\\n    };\\n    return TakeOperator;\\n}());\\nvar take_TakeSubscriber = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](TakeSubscriber, _super);\\n    function TakeSubscriber(destination, total) {\\n        var _this = _super.call(this, destination) || this;\\n        _this.total = total;\\n        _this.count = 0;\\n        return _this;\\n    }\\n    TakeSubscriber.prototype._next = function (value) {\\n        var total = this.total;\\n        var count = ++this.count;\\n        if (count <= total) {\\n            this.destination.next(value);\\n            if (count === total) {\\n                this.destination.complete();\\n                this.unsubscribe();\\n            }\\n        }\\n    };\\n    return TakeSubscriber;\\n}(Subscriber[\"a\" /* Subscriber */]));\\n//# sourceMappingURL=take.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/first.js\\n/** PURE_IMPORTS_START _util_EmptyError,_filter,_take,_defaultIfEmpty,_throwIfEmpty,_util_identity PURE_IMPORTS_END */\\n\\n\\n\\n\\n\\n\\nfunction first(predicate, defaultValue) {\\n    var hasDefaultValue = arguments.length >= 2;\\n    return function (source) { return source.pipe(predicate ? filter(function (v, i) { return predicate(v, i, source); }) : identity[\"a\" /* identity */], take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function () { return new EmptyError[\"a\" /* EmptyError */](); })); };\\n}\\n//# sourceMappingURL=first.js.map\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/mergeMap.js\\nvar mergeMap = __webpack_require__(95);\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/switchMap.js\\n/** PURE_IMPORTS_START tslib,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult,_map,_observable_from PURE_IMPORTS_END */\\n\\n\\n\\n\\n\\n\\nfunction switchMap(project, resultSelector) {\\n    if (typeof resultSelector === \\'function\\') {\\n        return function (source) { return source.pipe(switchMap(function (a, i) { return Object(from[\"a\" /* from */])(project(a, i)).pipe(Object(map[\"a\" /* map */])(function (b, ii) { return resultSelector(a, b, i, ii); })); })); };\\n    }\\n    return function (source) { return source.lift(new SwitchMapOperator(project)); };\\n}\\nvar SwitchMapOperator = /*@__PURE__*/ (function () {\\n    function SwitchMapOperator(project) {\\n        this.project = project;\\n    }\\n    SwitchMapOperator.prototype.call = function (subscriber, source) {\\n        return source.subscribe(new switchMap_SwitchMapSubscriber(subscriber, this.project));\\n    };\\n    return SwitchMapOperator;\\n}());\\nvar switchMap_SwitchMapSubscriber = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](SwitchMapSubscriber, _super);\\n    function SwitchMapSubscriber(destination, project) {\\n        var _this = _super.call(this, destination) || this;\\n        _this.project = project;\\n        _this.index = 0;\\n        return _this;\\n    }\\n    SwitchMapSubscriber.prototype._next = function (value) {\\n        var result;\\n        var index = this.index++;\\n        try {\\n            result = this.project(value, index);\\n        }\\n        catch (error) {\\n            this.destination.error(error);\\n            return;\\n        }\\n        this._innerSub(result, value, index);\\n    };\\n    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\\n        var innerSubscription = this.innerSubscription;\\n        if (innerSubscription) {\\n            innerSubscription.unsubscribe();\\n        }\\n        var innerSubscriber = new InnerSubscriber[\"a\" /* InnerSubscriber */](this, undefined, undefined);\\n        var destination = this.destination;\\n        destination.add(innerSubscriber);\\n        this.innerSubscription = Object(subscribeToResult[\"a\" /* subscribeToResult */])(this, result, value, index, innerSubscriber);\\n    };\\n    SwitchMapSubscriber.prototype._complete = function () {\\n        var innerSubscription = this.innerSubscription;\\n        if (!innerSubscription || innerSubscription.closed) {\\n            _super.prototype._complete.call(this);\\n        }\\n        this.unsubscribe();\\n    };\\n    SwitchMapSubscriber.prototype._unsubscribe = function () {\\n        this.innerSubscription = null;\\n    };\\n    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\\n        var destination = this.destination;\\n        destination.remove(innerSub);\\n        this.innerSubscription = null;\\n        if (this.isStopped) {\\n            _super.prototype._complete.call(this);\\n        }\\n    };\\n    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\\n        this.destination.next(innerValue);\\n    };\\n    return SwitchMapSubscriber;\\n}(OuterSubscriber[\"a\" /* OuterSubscriber */]));\\n//# sourceMappingURL=switchMap.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/concatMap.js\\n/** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */\\n\\nfunction concatMap(project, resultSelector) {\\n    return Object(mergeMap[\"a\" /* mergeMap */])(project, resultSelector, 1);\\n}\\n//# sourceMappingURL=concatMap.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/scan.js\\n/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\\n\\n\\nfunction scan(accumulator, seed) {\\n    var hasSeed = false;\\n    if (arguments.length >= 2) {\\n        hasSeed = true;\\n    }\\n    return function scanOperatorFunction(source) {\\n        return source.lift(new ScanOperator(accumulator, seed, hasSeed));\\n    };\\n}\\nvar ScanOperator = /*@__PURE__*/ (function () {\\n    function ScanOperator(accumulator, seed, hasSeed) {\\n        if (hasSeed === void 0) {\\n            hasSeed = false;\\n        }\\n        this.accumulator = accumulator;\\n        this.seed = seed;\\n        this.hasSeed = hasSeed;\\n    }\\n    ScanOperator.prototype.call = function (subscriber, source) {\\n        return source.subscribe(new scan_ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\\n    };\\n    return ScanOperator;\\n}());\\nvar scan_ScanSubscriber = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](ScanSubscriber, _super);\\n    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\\n        var _this = _super.call(this, destination) || this;\\n        _this.accumulator = accumulator;\\n        _this._seed = _seed;\\n        _this.hasSeed = hasSeed;\\n        _this.index = 0;\\n        return _this;\\n    }\\n    Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\\n        get: function () {\\n            return this._seed;\\n        },\\n        set: function (value) {\\n            this.hasSeed = true;\\n            this._seed = value;\\n        },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    ScanSubscriber.prototype._next = function (value) {\\n        if (!this.hasSeed) {\\n            this.seed = value;\\n            this.destination.next(value);\\n        }\\n        else {\\n            return this._tryNext(value);\\n        }\\n    };\\n    ScanSubscriber.prototype._tryNext = function (value) {\\n        var index = this.index++;\\n        var result;\\n        try {\\n            result = this.accumulator(this.seed, value, index);\\n        }\\n        catch (err) {\\n            this.destination.error(err);\\n        }\\n        this.seed = result;\\n        this.destination.next(result);\\n    };\\n    return ScanSubscriber;\\n}(Subscriber[\"a\" /* Subscriber */]));\\n//# sourceMappingURL=scan.js.map\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/pipe.js\\nvar pipe = __webpack_require__(63);\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/reduce.js\\n/** PURE_IMPORTS_START _scan,_takeLast,_defaultIfEmpty,_util_pipe PURE_IMPORTS_END */\\n\\n\\n\\n\\nfunction reduce(accumulator, seed) {\\n    if (arguments.length >= 2) {\\n        return function reduceOperatorFunctionWithSeed(source) {\\n            return Object(pipe[\"a\" /* pipe */])(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);\\n        };\\n    }\\n    return function reduceOperatorFunction(source) {\\n        return Object(pipe[\"a\" /* pipe */])(scan(function (acc, value, index) { return accumulator(acc, value, index + 1); }), takeLast(1))(source);\\n    };\\n}\\n//# sourceMappingURL=reduce.js.map\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Subscription.js + 2 modules\\nvar Subscription = __webpack_require__(6);\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/finalize.js\\n/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription PURE_IMPORTS_END */\\n\\n\\n\\nfunction finalize(callback) {\\n    return function (source) { return source.lift(new FinallyOperator(callback)); };\\n}\\nvar FinallyOperator = /*@__PURE__*/ (function () {\\n    function FinallyOperator(callback) {\\n        this.callback = callback;\\n    }\\n    FinallyOperator.prototype.call = function (subscriber, source) {\\n        return source.subscribe(new finalize_FinallySubscriber(subscriber, this.callback));\\n    };\\n    return FinallyOperator;\\n}());\\nvar finalize_FinallySubscriber = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](FinallySubscriber, _super);\\n    function FinallySubscriber(destination, callback) {\\n        var _this = _super.call(this, destination) || this;\\n        _this.add(new Subscription[\"a\" /* Subscription */](callback));\\n        return _this;\\n    }\\n    return FinallySubscriber;\\n}(Subscriber[\"a\" /* Subscriber */]));\\n//# sourceMappingURL=finalize.js.map\\n\\n// EXTERNAL MODULE: ./node_modules/@angular/common/fesm5/common.js\\nvar common = __webpack_require__(14);\\n\\n// EXTERNAL MODULE: ./node_modules/@angular/platform-browser/fesm5/platform-browser.js\\nvar platform_browser = __webpack_require__(62);\\n\\n// CONCATENATED MODULE: ./node_modules/@angular/router/fesm5/router.js\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵangular_packages_router_router_a\", function() { return ROUTER_FORROOT_GUARD; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵangular_packages_router_router_h\", function() { return router_RouterInitializer; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵangular_packages_router_router_c\", function() { return createRouterScroller; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵangular_packages_router_router_i\", function() { return getAppInitializer; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵangular_packages_router_router_j\", function() { return getBootstrapListener; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵangular_packages_router_router_e\", function() { return provideForRootGuard; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵangular_packages_router_router_d\", function() { return provideLocationStrategy; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵangular_packages_router_router_k\", function() { return provideRouterInitializer; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵangular_packages_router_router_g\", function() { return rootRoute; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵangular_packages_router_router_b\", function() { return routerNgProbeToken; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵangular_packages_router_router_f\", function() { return setupRouter; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵangular_packages_router_router_n\", function() { return RouterScroller; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵangular_packages_router_router_l\", function() { return Tree; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵangular_packages_router_router_m\", function() { return TreeNode; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouterLink\", function() { return router_RouterLink; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouterLinkWithHref\", function() { return router_RouterLinkWithHref; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouterLinkActive\", function() { return router_RouterLinkActive; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouterOutlet\", function() { return router_RouterOutlet; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ActivationEnd\", function() { return ActivationEnd; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ActivationStart\", function() { return ActivationStart; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ChildActivationEnd\", function() { return ChildActivationEnd; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ChildActivationStart\", function() { return ChildActivationStart; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GuardsCheckEnd\", function() { return router_GuardsCheckEnd; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GuardsCheckStart\", function() { return router_GuardsCheckStart; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NavigationCancel\", function() { return router_NavigationCancel; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NavigationEnd\", function() { return router_NavigationEnd; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NavigationError\", function() { return router_NavigationError; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NavigationStart\", function() { return router_NavigationStart; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ResolveEnd\", function() { return router_ResolveEnd; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ResolveStart\", function() { return router_ResolveStart; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouteConfigLoadEnd\", function() { return RouteConfigLoadEnd; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouteConfigLoadStart\", function() { return RouteConfigLoadStart; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouterEvent\", function() { return RouterEvent; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RoutesRecognized\", function() { return router_RoutesRecognized; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Scroll\", function() { return Scroll; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouteReuseStrategy\", function() { return RouteReuseStrategy; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Router\", function() { return router_Router; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ROUTES\", function() { return ROUTES; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ROUTER_CONFIGURATION\", function() { return ROUTER_CONFIGURATION; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ROUTER_INITIALIZER\", function() { return ROUTER_INITIALIZER; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouterModule\", function() { return router_RouterModule; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"provideRoutes\", function() { return provideRoutes; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ChildrenOutletContexts\", function() { return ChildrenOutletContexts; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OutletContext\", function() { return OutletContext; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NoPreloading\", function() { return router_NoPreloading; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PreloadAllModules\", function() { return router_PreloadAllModules; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PreloadingStrategy\", function() { return PreloadingStrategy; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouterPreloader\", function() { return router_RouterPreloader; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ActivatedRoute\", function() { return router_ActivatedRoute; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ActivatedRouteSnapshot\", function() { return ActivatedRouteSnapshot; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouterState\", function() { return router_RouterState; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouterStateSnapshot\", function() { return router_RouterStateSnapshot; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PRIMARY_OUTLET\", function() { return PRIMARY_OUTLET; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"convertToParamMap\", function() { return convertToParamMap; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UrlHandlingStrategy\", function() { return UrlHandlingStrategy; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DefaultUrlSerializer\", function() { return DefaultUrlSerializer; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UrlSegment\", function() { return UrlSegment; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UrlSegmentGroup\", function() { return UrlSegmentGroup; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UrlSerializer\", function() { return UrlSerializer; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UrlTree\", function() { return UrlTree; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VERSION\", function() { return VERSION; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵEmptyOutletComponent\", function() { return router_EmptyOutletComponent; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵROUTER_PROVIDERS\", function() { return ROUTER_PROVIDERS; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵflatten\", function() { return flatten; });\\n/**\\n * @license Angular v7.0.4\\n * (c) 2010-2018 Google, Inc. https://angular.io/\\n * License: MIT\\n */\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n/**\\n * @description\\n *\\n * Base for events the Router goes through, as opposed to events tied to a specific\\n * Route. `RouterEvent`s will only be fired one time for any given navigation.\\n *\\n * Example:\\n *\\n * ```\\n * class MyService {\\n *   constructor(public router: Router, logger: Logger) {\\n *     router.events.pipe(\\n *       filter(e => e instanceof RouterEvent)\\n *     ).subscribe(e => {\\n *       logger.log(e.id, e.url);\\n *     });\\n *   }\\n * }\\n * ```\\n *\\n * @publicApi\\n */\\nvar RouterEvent = /** @class */ (function () {\\n    function RouterEvent(\\n    /** @docsNotRequired */\\n    id, \\n    /** @docsNotRequired */\\n    url) {\\n        this.id = id;\\n        this.url = url;\\n    }\\n    return RouterEvent;\\n}());\\n/**\\n * @description\\n *\\n * Represents an event triggered when a navigation starts.\\n *\\n * @publicApi\\n */\\nvar router_NavigationStart = /** @class */ (function (_super) {\\n    Object(tslib_es6[\"c\" /* __extends */])(NavigationStart, _super);\\n    function NavigationStart(\\n    /** @docsNotRequired */\\n    id, \\n    /** @docsNotRequired */\\n    url, \\n    /** @docsNotRequired */\\n    navigationTrigger, \\n    /** @docsNotRequired */\\n    restoredState) {\\n        if (navigationTrigger === void 0) { navigationTrigger = \\'imperative\\'; }\\n        if (restoredState === void 0) { restoredState = null; }\\n        var _this = _super.call(this, id, url) || this;\\n        _this.navigationTrigger = navigationTrigger;\\n        _this.restoredState = restoredState;\\n        return _this;\\n    }\\n    /** @docsNotRequired */\\n    NavigationStart.prototype.toString = function () { return \"NavigationStart(id: \" + this.id + \", url: \\'\" + this.url + \"\\')\"; };\\n    return NavigationStart;\\n}(RouterEvent));\\n/**\\n * @description\\n *\\n * Represents an event triggered when a navigation ends successfully.\\n *\\n * @publicApi\\n */\\nvar router_NavigationEnd = /** @class */ (function (_super) {\\n    Object(tslib_es6[\"c\" /* __extends */])(NavigationEnd, _super);\\n    function NavigationEnd(\\n    /** @docsNotRequired */\\n    id, \\n    /** @docsNotRequired */\\n    url, \\n    /** @docsNotRequired */\\n    urlAfterRedirects) {\\n        var _this = _super.call(this, id, url) || this;\\n        _this.urlAfterRedirects = urlAfterRedirects;\\n        return _this;\\n    }\\n    /** @docsNotRequired */\\n    NavigationEnd.prototype.toString = function () {\\n        return \"NavigationEnd(id: \" + this.id + \", url: \\'\" + this.url + \"\\', urlAfterRedirects: \\'\" + this.urlAfterRedirects + \"\\')\";\\n    };\\n    return NavigationEnd;\\n}(RouterEvent));\\n/**\\n * @description\\n *\\n * Represents an event triggered when a navigation is canceled.\\n *\\n * @publicApi\\n */\\nvar router_NavigationCancel = /** @class */ (function (_super) {\\n    Object(tslib_es6[\"c\" /* __extends */])(NavigationCancel, _super);\\n    function NavigationCancel(\\n    /** @docsNotRequired */\\n    id, \\n    /** @docsNotRequired */\\n    url, \\n    /** @docsNotRequired */\\n    reason) {\\n        var _this = _super.call(this, id, url) || this;\\n        _this.reason = reason;\\n        return _this;\\n    }\\n    /** @docsNotRequired */\\n    NavigationCancel.prototype.toString = function () { return \"NavigationCancel(id: \" + this.id + \", url: \\'\" + this.url + \"\\')\"; };\\n    return NavigationCancel;\\n}(RouterEvent));\\n/**\\n * @description\\n *\\n * Represents an event triggered when a navigation fails due to an unexpected error.\\n *\\n * @publicApi\\n */\\nvar router_NavigationError = /** @class */ (function (_super) {\\n    Object(tslib_es6[\"c\" /* __extends */])(NavigationError, _super);\\n    function NavigationError(\\n    /** @docsNotRequired */\\n    id, \\n    /** @docsNotRequired */\\n    url, \\n    /** @docsNotRequired */\\n    error) {\\n        var _this = _super.call(this, id, url) || this;\\n        _this.error = error;\\n        return _this;\\n    }\\n    /** @docsNotRequired */\\n    NavigationError.prototype.toString = function () {\\n        return \"NavigationError(id: \" + this.id + \", url: \\'\" + this.url + \"\\', error: \" + this.error + \")\";\\n    };\\n    return NavigationError;\\n}(RouterEvent));\\n/**\\n * @description\\n *\\n * Represents an event triggered when routes are recognized.\\n *\\n * @publicApi\\n */\\nvar router_RoutesRecognized = /** @class */ (function (_super) {\\n    Object(tslib_es6[\"c\" /* __extends */])(RoutesRecognized, _super);\\n    function RoutesRecognized(\\n    /** @docsNotRequired */\\n    id, \\n    /** @docsNotRequired */\\n    url, \\n    /** @docsNotRequired */\\n    urlAfterRedirects, \\n    /** @docsNotRequired */\\n    state) {\\n        var _this = _super.call(this, id, url) || this;\\n        _this.urlAfterRedirects = urlAfterRedirects;\\n        _this.state = state;\\n        return _this;\\n    }\\n    /** @docsNotRequired */\\n    RoutesRecognized.prototype.toString = function () {\\n        return \"RoutesRecognized(id: \" + this.id + \", url: \\'\" + this.url + \"\\', urlAfterRedirects: \\'\" + this.urlAfterRedirects + \"\\', state: \" + this.state + \")\";\\n    };\\n    return RoutesRecognized;\\n}(RouterEvent));\\n/**\\n * @description\\n *\\n * Represents the start of the Guard phase of routing.\\n *\\n * @publicApi\\n */\\nvar router_GuardsCheckStart = /** @class */ (function (_super) {\\n    Object(tslib_es6[\"c\" /* __extends */])(GuardsCheckStart, _super);\\n    function GuardsCheckStart(\\n    /** @docsNotRequired */\\n    id, \\n    /** @docsNotRequired */\\n    url, \\n    /** @docsNotRequired */\\n    urlAfterRedirects, \\n    /** @docsNotRequired */\\n    state) {\\n        var _this = _super.call(this, id, url) || this;\\n        _this.urlAfterRedirects = urlAfterRedirects;\\n        _this.state = state;\\n        return _this;\\n    }\\n    GuardsCheckStart.prototype.toString = function () {\\n        return \"GuardsCheckStart(id: \" + this.id + \", url: \\'\" + this.url + \"\\', urlAfterRedirects: \\'\" + this.urlAfterRedirects + \"\\', state: \" + this.state + \")\";\\n    };\\n    return GuardsCheckStart;\\n}(RouterEvent));\\n/**\\n * @description\\n *\\n * Represents the end of the Guard phase of routing.\\n *\\n * @publicApi\\n */\\nvar router_GuardsCheckEnd = /** @class */ (function (_super) {\\n    Object(tslib_es6[\"c\" /* __extends */])(GuardsCheckEnd, _super);\\n    function GuardsCheckEnd(\\n    /** @docsNotRequired */\\n    id, \\n    /** @docsNotRequired */\\n    url, \\n    /** @docsNotRequired */\\n    urlAfterRedirects, \\n    /** @docsNotRequired */\\n    state, \\n    /** @docsNotRequired */\\n    shouldActivate) {\\n        var _this = _super.call(this, id, url) || this;\\n        _this.urlAfterRedirects = urlAfterRedirects;\\n        _this.state = state;\\n        _this.shouldActivate = shouldActivate;\\n        return _this;\\n    }\\n    GuardsCheckEnd.prototype.toString = function () {\\n        return \"GuardsCheckEnd(id: \" + this.id + \", url: \\'\" + this.url + \"\\', urlAfterRedirects: \\'\" + this.urlAfterRedirects + \"\\', state: \" + this.state + \", shouldActivate: \" + this.shouldActivate + \")\";\\n    };\\n    return GuardsCheckEnd;\\n}(RouterEvent));\\n/**\\n * @description\\n *\\n * Represents the start of the Resolve phase of routing. The timing of this\\n * event may change, thus it\\'s experimental. In the current iteration it will run\\n * in the \"resolve\" phase whether there\\'s things to resolve or not. In the future this\\n * behavior may change to only run when there are things to be resolved.\\n *\\n * @publicApi\\n */\\nvar router_ResolveStart = /** @class */ (function (_super) {\\n    Object(tslib_es6[\"c\" /* __extends */])(ResolveStart, _super);\\n    function ResolveStart(\\n    /** @docsNotRequired */\\n    id, \\n    /** @docsNotRequired */\\n    url, \\n    /** @docsNotRequired */\\n    urlAfterRedirects, \\n    /** @docsNotRequired */\\n    state) {\\n        var _this = _super.call(this, id, url) || this;\\n        _this.urlAfterRedirects = urlAfterRedirects;\\n        _this.state = state;\\n        return _this;\\n    }\\n    ResolveStart.prototype.toString = function () {\\n        return \"ResolveStart(id: \" + this.id + \", url: \\'\" + this.url + \"\\', urlAfterRedirects: \\'\" + this.urlAfterRedirects + \"\\', state: \" + this.state + \")\";\\n    };\\n    return ResolveStart;\\n}(RouterEvent));\\n/**\\n * @description\\n *\\n * Represents the end of the Resolve phase of routing. See note on\\n * `ResolveStart` for use of this experimental API.\\n *\\n * @publicApi\\n */\\nvar router_ResolveEnd = /** @class */ (function (_super) {\\n    Object(tslib_es6[\"c\" /* __extends */])(ResolveEnd, _super);\\n    function ResolveEnd(\\n    /** @docsNotRequired */\\n    id, \\n    /** @docsNotRequired */\\n    url, \\n    /** @docsNotRequired */\\n    urlAfterRedirects, \\n    /** @docsNotRequired */\\n    state) {\\n        var _this = _super.call(this, id, url) || this;\\n        _this.urlAfterRedirects = urlAfterRedirects;\\n        _this.state = state;\\n        return _this;\\n    }\\n    ResolveEnd.prototype.toString = function () {\\n        return \"ResolveEnd(id: \" + this.id + \", url: \\'\" + this.url + \"\\', urlAfterRedirects: \\'\" + this.urlAfterRedirects + \"\\', state: \" + this.state + \")\";\\n    };\\n    return ResolveEnd;\\n}(RouterEvent));\\n/**\\n * @description\\n *\\n * Represents an event triggered before lazy loading a route config.\\n *\\n * @publicApi\\n */\\nvar RouteConfigLoadStart = /** @class */ (function () {\\n    function RouteConfigLoadStart(\\n    /** @docsNotRequired */\\n    route) {\\n        this.route = route;\\n    }\\n    RouteConfigLoadStart.prototype.toString = function () { return \"RouteConfigLoadStart(path: \" + this.route.path + \")\"; };\\n    return RouteConfigLoadStart;\\n}());\\n/**\\n * @description\\n *\\n * Represents an event triggered when a route has been lazy loaded.\\n *\\n * @publicApi\\n */\\nvar RouteConfigLoadEnd = /** @class */ (function () {\\n    function RouteConfigLoadEnd(\\n    /** @docsNotRequired */\\n    route) {\\n        this.route = route;\\n    }\\n    RouteConfigLoadEnd.prototype.toString = function () { return \"RouteConfigLoadEnd(path: \" + this.route.path + \")\"; };\\n    return RouteConfigLoadEnd;\\n}());\\n/**\\n * @description\\n *\\n * Represents the start of end of the Resolve phase of routing. See note on\\n * `ChildActivationEnd` for use of this experimental API.\\n *\\n * @publicApi\\n */\\nvar ChildActivationStart = /** @class */ (function () {\\n    function ChildActivationStart(\\n    /** @docsNotRequired */\\n    snapshot) {\\n        this.snapshot = snapshot;\\n    }\\n    ChildActivationStart.prototype.toString = function () {\\n        var path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || \\'\\';\\n        return \"ChildActivationStart(path: \\'\" + path + \"\\')\";\\n    };\\n    return ChildActivationStart;\\n}());\\n/**\\n * @description\\n *\\n * Represents the start of end of the Resolve phase of routing. See note on\\n * `ChildActivationStart` for use of this experimental API.\\n *\\n * @publicApi\\n */\\nvar ChildActivationEnd = /** @class */ (function () {\\n    function ChildActivationEnd(\\n    /** @docsNotRequired */\\n    snapshot) {\\n        this.snapshot = snapshot;\\n    }\\n    ChildActivationEnd.prototype.toString = function () {\\n        var path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || \\'\\';\\n        return \"ChildActivationEnd(path: \\'\" + path + \"\\')\";\\n    };\\n    return ChildActivationEnd;\\n}());\\n/**\\n * @description\\n *\\n * Represents the start of end of the Resolve phase of routing. See note on\\n * `ActivationEnd` for use of this experimental API.\\n *\\n * @publicApi\\n */\\nvar ActivationStart = /** @class */ (function () {\\n    function ActivationStart(\\n    /** @docsNotRequired */\\n    snapshot) {\\n        this.snapshot = snapshot;\\n    }\\n    ActivationStart.prototype.toString = function () {\\n        var path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || \\'\\';\\n        return \"ActivationStart(path: \\'\" + path + \"\\')\";\\n    };\\n    return ActivationStart;\\n}());\\n/**\\n * @description\\n *\\n * Represents the start of end of the Resolve phase of routing. See note on\\n * `ActivationStart` for use of this experimental API.\\n *\\n * @publicApi\\n */\\nvar ActivationEnd = /** @class */ (function () {\\n    function ActivationEnd(\\n    /** @docsNotRequired */\\n    snapshot) {\\n        this.snapshot = snapshot;\\n    }\\n    ActivationEnd.prototype.toString = function () {\\n        var path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || \\'\\';\\n        return \"ActivationEnd(path: \\'\" + path + \"\\')\";\\n    };\\n    return ActivationEnd;\\n}());\\n/**\\n * @description\\n *\\n * Represents a scrolling event.\\n *\\n * @publicApi\\n */\\nvar Scroll = /** @class */ (function () {\\n    function Scroll(\\n    /** @docsNotRequired */\\n    routerEvent, \\n    /** @docsNotRequired */\\n    position, \\n    /** @docsNotRequired */\\n    anchor) {\\n        this.routerEvent = routerEvent;\\n        this.position = position;\\n        this.anchor = anchor;\\n    }\\n    Scroll.prototype.toString = function () {\\n        var pos = this.position ? this.position[0] + \", \" + this.position[1] : null;\\n        return \"Scroll(anchor: \\'\" + this.anchor + \"\\', position: \\'\" + pos + \"\\')\";\\n    };\\n    return Scroll;\\n}());\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n/**\\n * This component is used internally within the router to be a placeholder when an empty\\n * router-outlet is needed. For example, with a config such as:\\n *\\n * `{path: \\'parent\\', outlet: \\'nav\\', children: [...]}`\\n *\\n * In order to render, there needs to be a component on this config, which will default\\n * to this `EmptyOutletComponent`.\\n */\\nvar router_EmptyOutletComponent = /** @class */ (function () {\\n    function EmptyOutletComponent() {\\n    }\\n    EmptyOutletComponent = Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"Component\"])({ template: \"<router-outlet></router-outlet>\" })\\n    ], EmptyOutletComponent);\\n    return EmptyOutletComponent;\\n}());\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n/**\\n * @description\\n *\\n * Name of the primary outlet.\\n *\\n * @publicApi\\n */\\nvar PRIMARY_OUTLET = \\'primary\\';\\nvar ParamsAsMap = /** @class */ (function () {\\n    function ParamsAsMap(params) {\\n        this.params = params || {};\\n    }\\n    ParamsAsMap.prototype.has = function (name) { return this.params.hasOwnProperty(name); };\\n    ParamsAsMap.prototype.get = function (name) {\\n        if (this.has(name)) {\\n            var v = this.params[name];\\n            return Array.isArray(v) ? v[0] : v;\\n        }\\n        return null;\\n    };\\n    ParamsAsMap.prototype.getAll = function (name) {\\n        if (this.has(name)) {\\n            var v = this.params[name];\\n            return Array.isArray(v) ? v : [v];\\n        }\\n        return [];\\n    };\\n    Object.defineProperty(ParamsAsMap.prototype, \"keys\", {\\n        get: function () { return Object.keys(this.params); },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    return ParamsAsMap;\\n}());\\n/**\\n * Convert a `Params` instance to a `ParamMap`.\\n *\\n * @publicApi\\n */\\nfunction convertToParamMap(params) {\\n    return new ParamsAsMap(params);\\n}\\nvar NAVIGATION_CANCELING_ERROR = \\'ngNavigationCancelingError\\';\\nfunction navigationCancelingError(message) {\\n    var error = Error(\\'NavigationCancelingError: \\' + message);\\n    error[NAVIGATION_CANCELING_ERROR] = true;\\n    return error;\\n}\\nfunction isNavigationCancelingError(error) {\\n    return error && error[NAVIGATION_CANCELING_ERROR];\\n}\\n// Matches the route configuration (`route`) against the actual URL (`segments`).\\nfunction defaultUrlMatcher(segments, segmentGroup, route) {\\n    var parts = route.path.split(\\'/\\');\\n    if (parts.length > segments.length) {\\n        // The actual URL is shorter than the config, no match\\n        return null;\\n    }\\n    if (route.pathMatch === \\'full\\' &&\\n        (segmentGroup.hasChildren() || parts.length < segments.length)) {\\n        // The config is longer than the actual URL but we are looking for a full match, return null\\n        return null;\\n    }\\n    var posParams = {};\\n    // Check each config part against the actual URL\\n    for (var index = 0; index < parts.length; index++) {\\n        var part = parts[index];\\n        var segment = segments[index];\\n        var isParameter = part.startsWith(\\':\\');\\n        if (isParameter) {\\n            posParams[part.substring(1)] = segment;\\n        }\\n        else if (part !== segment.path) {\\n            // The actual URL part does not match the config, no match\\n            return null;\\n        }\\n    }\\n    return { consumed: segments.slice(0, parts.length), posParams: posParams };\\n}\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\nvar LoadedRouterConfig = /** @class */ (function () {\\n    function LoadedRouterConfig(routes, module) {\\n        this.routes = routes;\\n        this.module = module;\\n    }\\n    return LoadedRouterConfig;\\n}());\\nfunction validateConfig(config, parentPath) {\\n    if (parentPath === void 0) { parentPath = \\'\\'; }\\n    // forEach doesn\\'t iterate undefined values\\n    for (var i = 0; i < config.length; i++) {\\n        var route = config[i];\\n        var fullPath = getFullPath(parentPath, route);\\n        validateNode(route, fullPath);\\n    }\\n}\\nfunction validateNode(route, fullPath) {\\n    if (!route) {\\n        throw new Error(\"\\\\n      Invalid configuration of route \\'\" + fullPath + \"\\': Encountered undefined route.\\\\n      The reason might be an extra comma.\\\\n\\\\n      Example:\\\\n      const routes: Routes = [\\\\n        { path: \\'\\', redirectTo: \\'/dashboard\\', pathMatch: \\'full\\' },\\\\n        { path: \\'dashboard\\',  component: DashboardComponent },, << two commas\\\\n        { path: \\'detail/:id\\', component: HeroDetailComponent }\\\\n      ];\\\\n    \");\\n    }\\n    if (Array.isArray(route)) {\\n        throw new Error(\"Invalid configuration of route \\'\" + fullPath + \"\\': Array cannot be specified\");\\n    }\\n    if (!route.component && !route.children && !route.loadChildren &&\\n        (route.outlet && route.outlet !== PRIMARY_OUTLET)) {\\n        throw new Error(\"Invalid configuration of route \\'\" + fullPath + \"\\': a componentless route without children or loadChildren cannot have a named outlet set\");\\n    }\\n    if (route.redirectTo && route.children) {\\n        throw new Error(\"Invalid configuration of route \\'\" + fullPath + \"\\': redirectTo and children cannot be used together\");\\n    }\\n    if (route.redirectTo && route.loadChildren) {\\n        throw new Error(\"Invalid configuration of route \\'\" + fullPath + \"\\': redirectTo and loadChildren cannot be used together\");\\n    }\\n    if (route.children && route.loadChildren) {\\n        throw new Error(\"Invalid configuration of route \\'\" + fullPath + \"\\': children and loadChildren cannot be used together\");\\n    }\\n    if (route.redirectTo && route.component) {\\n        throw new Error(\"Invalid configuration of route \\'\" + fullPath + \"\\': redirectTo and component cannot be used together\");\\n    }\\n    if (route.path && route.matcher) {\\n        throw new Error(\"Invalid configuration of route \\'\" + fullPath + \"\\': path and matcher cannot be used together\");\\n    }\\n    if (route.redirectTo === void 0 && !route.component && !route.children && !route.loadChildren) {\\n        throw new Error(\"Invalid configuration of route \\'\" + fullPath + \"\\'. One of the following must be provided: component, redirectTo, children or loadChildren\");\\n    }\\n    if (route.path === void 0 && route.matcher === void 0) {\\n        throw new Error(\"Invalid configuration of route \\'\" + fullPath + \"\\': routes must have either a path or a matcher specified\");\\n    }\\n    if (typeof route.path === \\'string\\' && route.path.charAt(0) === \\'/\\') {\\n        throw new Error(\"Invalid configuration of route \\'\" + fullPath + \"\\': path cannot start with a slash\");\\n    }\\n    if (route.path === \\'\\' && route.redirectTo !== void 0 && route.pathMatch === void 0) {\\n        var exp = \"The default value of \\'pathMatch\\' is \\'prefix\\', but often the intent is to use \\'full\\'.\";\\n        throw new Error(\"Invalid configuration of route \\'{path: \\\\\"\" + fullPath + \"\\\\\", redirectTo: \\\\\"\" + route.redirectTo + \"\\\\\"}\\': please provide \\'pathMatch\\'. \" + exp);\\n    }\\n    if (route.pathMatch !== void 0 && route.pathMatch !== \\'full\\' && route.pathMatch !== \\'prefix\\') {\\n        throw new Error(\"Invalid configuration of route \\'\" + fullPath + \"\\': pathMatch can only be set to \\'prefix\\' or \\'full\\'\");\\n    }\\n    if (route.children) {\\n        validateConfig(route.children, fullPath);\\n    }\\n}\\nfunction getFullPath(parentPath, currentRoute) {\\n    if (!currentRoute) {\\n        return parentPath;\\n    }\\n    if (!parentPath && !currentRoute.path) {\\n        return \\'\\';\\n    }\\n    else if (parentPath && !currentRoute.path) {\\n        return parentPath + \"/\";\\n    }\\n    else if (!parentPath && currentRoute.path) {\\n        return currentRoute.path;\\n    }\\n    else {\\n        return parentPath + \"/\" + currentRoute.path;\\n    }\\n}\\n/**\\n * Makes a copy of the config and adds any default required properties.\\n */\\nfunction standardizeConfig(r) {\\n    var children = r.children && r.children.map(standardizeConfig);\\n    var c = children ? Object(tslib_es6[\"a\" /* __assign */])({}, r, { children: children }) : Object(tslib_es6[\"a\" /* __assign */])({}, r);\\n    if (!c.component && (children || c.loadChildren) && (c.outlet && c.outlet !== PRIMARY_OUTLET)) {\\n        c.component = router_EmptyOutletComponent;\\n    }\\n    return c;\\n}\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\nfunction shallowEqualArrays(a, b) {\\n    if (a.length !== b.length)\\n        return false;\\n    for (var i = 0; i < a.length; ++i) {\\n        if (!shallowEqual(a[i], b[i]))\\n            return false;\\n    }\\n    return true;\\n}\\nfunction shallowEqual(a, b) {\\n    var k1 = Object.keys(a);\\n    var k2 = Object.keys(b);\\n    if (k1.length != k2.length) {\\n        return false;\\n    }\\n    var key;\\n    for (var i = 0; i < k1.length; i++) {\\n        key = k1[i];\\n        if (a[key] !== b[key]) {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\n/**\\n * Flattens single-level nested arrays.\\n */\\nfunction flatten(arr) {\\n    return Array.prototype.concat.apply([], arr);\\n}\\n/**\\n * Return the last element of an array.\\n */\\nfunction last$1(a) {\\n    return a.length > 0 ? a[a.length - 1] : null;\\n}\\nfunction forEach(map$$1, callback) {\\n    for (var prop in map$$1) {\\n        if (map$$1.hasOwnProperty(prop)) {\\n            callback(map$$1[prop], prop);\\n        }\\n    }\\n}\\nfunction waitForMap(obj, fn) {\\n    if (Object.keys(obj).length === 0) {\\n        return Object(of[\"a\" /* of */])({});\\n    }\\n    var waitHead = [];\\n    var waitTail = [];\\n    var res = {};\\n    forEach(obj, function (a, k) {\\n        var mapped = fn(k, a).pipe(Object(map[\"a\" /* map */])(function (r) { return res[k] = r; }));\\n        if (k === PRIMARY_OUTLET) {\\n            waitHead.push(mapped);\\n        }\\n        else {\\n            waitTail.push(mapped);\\n        }\\n    });\\n    // Closure compiler has problem with using spread operator here. So just using Array.concat.\\n    return of[\"a\" /* of */].apply(null, waitHead.concat(waitTail)).pipe(Object(concatAll[\"a\" /* concatAll */])(), last(), Object(map[\"a\" /* map */])(function () { return res; }));\\n}\\n/**\\n * ANDs Observables by merging all input observables, reducing to an Observable verifying all\\n * input Observables return `true`.\\n */\\nfunction andObservables(observables) {\\n    return observables.pipe(Object(mergeAll[\"a\" /* mergeAll */])(), every(function (result) { return result === true; }));\\n}\\nfunction wrapIntoObservable(value) {\\n    if (Object(core[\"ɵisObservable\"])(value)) {\\n        return value;\\n    }\\n    if (Object(core[\"ɵisPromise\"])(value)) {\\n        // Use `Promise.resolve()` to wrap promise-like instances.\\n        // Required ie when a Resolver returns a AngularJS `$q` promise to correctly trigger the\\n        // change detection.\\n        return Object(from[\"a\" /* from */])(Promise.resolve(value));\\n    }\\n    return Object(of[\"a\" /* of */])(value);\\n}\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\nfunction createEmptyUrlTree() {\\n    return new UrlTree(new UrlSegmentGroup([], {}), {}, null);\\n}\\nfunction containsTree(container, containee, exact) {\\n    if (exact) {\\n        return equalQueryParams(container.queryParams, containee.queryParams) &&\\n            equalSegmentGroups(container.root, containee.root);\\n    }\\n    return containsQueryParams(container.queryParams, containee.queryParams) &&\\n        containsSegmentGroup(container.root, containee.root);\\n}\\nfunction equalQueryParams(container, containee) {\\n    // TODO: This does not handle array params correctly.\\n    return shallowEqual(container, containee);\\n}\\nfunction equalSegmentGroups(container, containee) {\\n    if (!equalPath(container.segments, containee.segments))\\n        return false;\\n    if (container.numberOfChildren !== containee.numberOfChildren)\\n        return false;\\n    for (var c in containee.children) {\\n        if (!container.children[c])\\n            return false;\\n        if (!equalSegmentGroups(container.children[c], containee.children[c]))\\n            return false;\\n    }\\n    return true;\\n}\\nfunction containsQueryParams(container, containee) {\\n    // TODO: This does not handle array params correctly.\\n    return Object.keys(containee).length <= Object.keys(container).length &&\\n        Object.keys(containee).every(function (key) { return containee[key] === container[key]; });\\n}\\nfunction containsSegmentGroup(container, containee) {\\n    return containsSegmentGroupHelper(container, containee, containee.segments);\\n}\\nfunction containsSegmentGroupHelper(container, containee, containeePaths) {\\n    if (container.segments.length > containeePaths.length) {\\n        var current = container.segments.slice(0, containeePaths.length);\\n        if (!equalPath(current, containeePaths))\\n            return false;\\n        if (containee.hasChildren())\\n            return false;\\n        return true;\\n    }\\n    else if (container.segments.length === containeePaths.length) {\\n        if (!equalPath(container.segments, containeePaths))\\n            return false;\\n        for (var c in containee.children) {\\n            if (!container.children[c])\\n                return false;\\n            if (!containsSegmentGroup(container.children[c], containee.children[c]))\\n                return false;\\n        }\\n        return true;\\n    }\\n    else {\\n        var current = containeePaths.slice(0, container.segments.length);\\n        var next = containeePaths.slice(container.segments.length);\\n        if (!equalPath(container.segments, current))\\n            return false;\\n        if (!container.children[PRIMARY_OUTLET])\\n            return false;\\n        return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);\\n    }\\n}\\n/**\\n * @description\\n *\\n * Represents the parsed URL.\\n *\\n * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\\n * serialized tree.\\n * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\\n *\\n * @usageNotes\\n * ### Example\\n *\\n * ```\\n * @Component({templateUrl:\\'template.html\\'})\\n * class MyComponent {\\n *   constructor(router: Router) {\\n *     const tree: UrlTree =\\n *       router.parseUrl(\\'/team/33/(user/victor//support:help)?debug=true#fragment\\');\\n *     const f = tree.fragment; // return \\'fragment\\'\\n *     const q = tree.queryParams; // returns {debug: \\'true\\'}\\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\\n *     const s: UrlSegment[] = g.segments; // returns 2 segments \\'team\\' and \\'33\\'\\n *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments \\'user\\' and \\'victor\\'\\n *     g.children[\\'support\\'].segments; // return 1 segment \\'help\\'\\n *   }\\n * }\\n * ```\\n *\\n * @publicApi\\n */\\nvar UrlTree = /** @class */ (function () {\\n    /** @internal */\\n    function UrlTree(\\n    /** The root segment group of the URL tree */\\n    root, \\n    /** The query params of the URL */\\n    queryParams, \\n    /** The fragment of the URL */\\n    fragment) {\\n        this.root = root;\\n        this.queryParams = queryParams;\\n        this.fragment = fragment;\\n    }\\n    Object.defineProperty(UrlTree.prototype, \"queryParamMap\", {\\n        get: function () {\\n            if (!this._queryParamMap) {\\n                this._queryParamMap = convertToParamMap(this.queryParams);\\n            }\\n            return this._queryParamMap;\\n        },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    /** @docsNotRequired */\\n    UrlTree.prototype.toString = function () { return DEFAULT_SERIALIZER.serialize(this); };\\n    return UrlTree;\\n}());\\n/**\\n * @description\\n *\\n * Represents the parsed URL segment group.\\n *\\n * See `UrlTree` for more information.\\n *\\n * @publicApi\\n */\\nvar UrlSegmentGroup = /** @class */ (function () {\\n    function UrlSegmentGroup(\\n    /** The URL segments of this group. See `UrlSegment` for more information */\\n    segments, \\n    /** The list of children of this group */\\n    children) {\\n        var _this = this;\\n        this.segments = segments;\\n        this.children = children;\\n        /** The parent node in the url tree */\\n        this.parent = null;\\n        forEach(children, function (v, k) { return v.parent = _this; });\\n    }\\n    /** Whether the segment has child segments */\\n    UrlSegmentGroup.prototype.hasChildren = function () { return this.numberOfChildren > 0; };\\n    Object.defineProperty(UrlSegmentGroup.prototype, \"numberOfChildren\", {\\n        /** Number of child segments */\\n        get: function () { return Object.keys(this.children).length; },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    /** @docsNotRequired */\\n    UrlSegmentGroup.prototype.toString = function () { return serializePaths(this); };\\n    return UrlSegmentGroup;\\n}());\\n/**\\n * @description\\n *\\n * Represents a single URL segment.\\n *\\n * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\\n * parameters associated with the segment.\\n *\\n * @usageNotes\\n * ### Example\\n *\\n * ```\\n * @Component({templateUrl:\\'template.html\\'})\\n * class MyComponent {\\n *   constructor(router: Router) {\\n *     const tree: UrlTree = router.parseUrl(\\'/team;id=33\\');\\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\\n *     const s: UrlSegment[] = g.segments;\\n *     s[0].path; // returns \\'team\\'\\n *     s[0].parameters; // returns {id: 33}\\n *   }\\n * }\\n * ```\\n *\\n * @publicApi\\n */\\nvar UrlSegment = /** @class */ (function () {\\n    function UrlSegment(\\n    /** The path part of a URL segment */\\n    path, \\n    /** The matrix parameters associated with a segment */\\n    parameters) {\\n        this.path = path;\\n        this.parameters = parameters;\\n    }\\n    Object.defineProperty(UrlSegment.prototype, \"parameterMap\", {\\n        get: function () {\\n            if (!this._parameterMap) {\\n                this._parameterMap = convertToParamMap(this.parameters);\\n            }\\n            return this._parameterMap;\\n        },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    /** @docsNotRequired */\\n    UrlSegment.prototype.toString = function () { return serializePath(this); };\\n    return UrlSegment;\\n}());\\nfunction equalSegments(as, bs) {\\n    return equalPath(as, bs) && as.every(function (a, i) { return shallowEqual(a.parameters, bs[i].parameters); });\\n}\\nfunction equalPath(as, bs) {\\n    if (as.length !== bs.length)\\n        return false;\\n    return as.every(function (a, i) { return a.path === bs[i].path; });\\n}\\nfunction mapChildrenIntoArray(segment, fn) {\\n    var res = [];\\n    forEach(segment.children, function (child, childOutlet) {\\n        if (childOutlet === PRIMARY_OUTLET) {\\n            res = res.concat(fn(child, childOutlet));\\n        }\\n    });\\n    forEach(segment.children, function (child, childOutlet) {\\n        if (childOutlet !== PRIMARY_OUTLET) {\\n            res = res.concat(fn(child, childOutlet));\\n        }\\n    });\\n    return res;\\n}\\n/**\\n * @description\\n *\\n * Serializes and deserializes a URL string into a URL tree.\\n *\\n * The url serialization strategy is customizable. You can\\n * make all URLs case insensitive by providing a custom UrlSerializer.\\n *\\n * See `DefaultUrlSerializer` for an example of a URL serializer.\\n *\\n * @publicApi\\n */\\nvar UrlSerializer = /** @class */ (function () {\\n    function UrlSerializer() {\\n    }\\n    return UrlSerializer;\\n}());\\n/**\\n * @description\\n *\\n * A default implementation of the `UrlSerializer`.\\n *\\n * Example URLs:\\n *\\n * ```\\n * /inbox/33(popup:compose)\\n * /inbox/33;open=true/messages/44\\n * ```\\n *\\n * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\\n * colon syntax to specify the outlet, and the \\';parameter=value\\' syntax (e.g., open=true) to\\n * specify route specific parameters.\\n *\\n * @publicApi\\n */\\nvar DefaultUrlSerializer = /** @class */ (function () {\\n    function DefaultUrlSerializer() {\\n    }\\n    /** Parses a url into a `UrlTree` */\\n    DefaultUrlSerializer.prototype.parse = function (url) {\\n        var p = new UrlParser(url);\\n        return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());\\n    };\\n    /** Converts a `UrlTree` into a url */\\n    DefaultUrlSerializer.prototype.serialize = function (tree) {\\n        var segment = \"/\" + serializeSegment(tree.root, true);\\n        var query = serializeQueryParams(tree.queryParams);\\n        var fragment = typeof tree.fragment === \"string\" ? \"#\" + encodeUriFragment(tree.fragment) : \\'\\';\\n        return \"\" + segment + query + fragment;\\n    };\\n    return DefaultUrlSerializer;\\n}());\\nvar DEFAULT_SERIALIZER = new DefaultUrlSerializer();\\nfunction serializePaths(segment) {\\n    return segment.segments.map(function (p) { return serializePath(p); }).join(\\'/\\');\\n}\\nfunction serializeSegment(segment, root) {\\n    if (!segment.hasChildren()) {\\n        return serializePaths(segment);\\n    }\\n    if (root) {\\n        var primary = segment.children[PRIMARY_OUTLET] ?\\n            serializeSegment(segment.children[PRIMARY_OUTLET], false) :\\n            \\'\\';\\n        var children_1 = [];\\n        forEach(segment.children, function (v, k) {\\n            if (k !== PRIMARY_OUTLET) {\\n                children_1.push(k + \":\" + serializeSegment(v, false));\\n            }\\n        });\\n        return children_1.length > 0 ? primary + \"(\" + children_1.join(\\'//\\') + \")\" : primary;\\n    }\\n    else {\\n        var children = mapChildrenIntoArray(segment, function (v, k) {\\n            if (k === PRIMARY_OUTLET) {\\n                return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];\\n            }\\n            return [k + \":\" + serializeSegment(v, false)];\\n        });\\n        return serializePaths(segment) + \"/(\" + children.join(\\'//\\') + \")\";\\n    }\\n}\\n/**\\n * Encodes a URI string with the default encoding. This function will only ever be called from\\n * `encodeUriQuery` or `encodeUriSegment` as it\\'s the base set of encodings to be used. We need\\n * a custom encoding because encodeURIComponent is too aggressive and encodes stuff that doesn\\'t\\n * have to be encoded per https://url.spec.whatwg.org.\\n */\\nfunction encodeUriString(s) {\\n    return encodeURIComponent(s)\\n        .replace(/%40/g, \\'@\\')\\n        .replace(/%3A/gi, \\':\\')\\n        .replace(/%24/g, \\'$\\')\\n        .replace(/%2C/gi, \\',\\');\\n}\\n/**\\n * This function should be used to encode both keys and values in a query string key/value. In\\n * the following URL, you need to call encodeUriQuery on \"k\" and \"v\":\\n *\\n * http://www.site.org/html;mk=mv?k=v#f\\n */\\nfunction encodeUriQuery(s) {\\n    return encodeUriString(s).replace(/%3B/gi, \\';\\');\\n}\\n/**\\n * This function should be used to encode a URL fragment. In the following URL, you need to call\\n * encodeUriFragment on \"f\":\\n *\\n * http://www.site.org/html;mk=mv?k=v#f\\n */\\nfunction encodeUriFragment(s) {\\n    return encodeURI(s);\\n}\\n/**\\n * This function should be run on any URI segment as well as the key and value in a key/value\\n * pair for matrix params. In the following URL, you need to call encodeUriSegment on \"html\",\\n * \"mk\", and \"mv\":\\n *\\n * http://www.site.org/html;mk=mv?k=v#f\\n */\\nfunction encodeUriSegment(s) {\\n    return encodeUriString(s).replace(/\\\\(/g, \\'%28\\').replace(/\\\\)/g, \\'%29\\').replace(/%26/gi, \\'&\\');\\n}\\nfunction decode(s) {\\n    return decodeURIComponent(s);\\n}\\n// Query keys/values should have the \"+\" replaced first, as \"+\" in a query string is \" \".\\n// decodeURIComponent function will not decode \"+\" as a space.\\nfunction decodeQuery(s) {\\n    return decode(s.replace(/\\\\+/g, \\'%20\\'));\\n}\\nfunction serializePath(path) {\\n    return \"\" + encodeUriSegment(path.path) + serializeMatrixParams(path.parameters);\\n}\\nfunction serializeMatrixParams(params) {\\n    return Object.keys(params)\\n        .map(function (key) { return \";\" + encodeUriSegment(key) + \"=\" + encodeUriSegment(params[key]); })\\n        .join(\\'\\');\\n}\\nfunction serializeQueryParams(params) {\\n    var strParams = Object.keys(params).map(function (name) {\\n        var value = params[name];\\n        return Array.isArray(value) ?\\n            value.map(function (v) { return encodeUriQuery(name) + \"=\" + encodeUriQuery(v); }).join(\\'&\\') :\\n            encodeUriQuery(name) + \"=\" + encodeUriQuery(value);\\n    });\\n    return strParams.length ? \"?\" + strParams.join(\"&\") : \\'\\';\\n}\\nvar SEGMENT_RE = /^[^\\\\/()?;=#]+/;\\nfunction matchSegments(str) {\\n    var match = str.match(SEGMENT_RE);\\n    return match ? match[0] : \\'\\';\\n}\\nvar QUERY_PARAM_RE = /^[^=?&#]+/;\\n// Return the name of the query param at the start of the string or an empty string\\nfunction matchQueryParams(str) {\\n    var match = str.match(QUERY_PARAM_RE);\\n    return match ? match[0] : \\'\\';\\n}\\nvar QUERY_PARAM_VALUE_RE = /^[^?&#]+/;\\n// Return the value of the query param at the start of the string or an empty string\\nfunction matchUrlQueryParamValue(str) {\\n    var match = str.match(QUERY_PARAM_VALUE_RE);\\n    return match ? match[0] : \\'\\';\\n}\\nvar UrlParser = /** @class */ (function () {\\n    function UrlParser(url) {\\n        this.url = url;\\n        this.remaining = url;\\n    }\\n    UrlParser.prototype.parseRootSegment = function () {\\n        this.consumeOptional(\\'/\\');\\n        if (this.remaining === \\'\\' || this.peekStartsWith(\\'?\\') || this.peekStartsWith(\\'#\\')) {\\n            return new UrlSegmentGroup([], {});\\n        }\\n        // The root segment group never has segments\\n        return new UrlSegmentGroup([], this.parseChildren());\\n    };\\n    UrlParser.prototype.parseQueryParams = function () {\\n        var params = {};\\n        if (this.consumeOptional(\\'?\\')) {\\n            do {\\n                this.parseQueryParam(params);\\n            } while (this.consumeOptional(\\'&\\'));\\n        }\\n        return params;\\n    };\\n    UrlParser.prototype.parseFragment = function () {\\n        return this.consumeOptional(\\'#\\') ? decodeURIComponent(this.remaining) : null;\\n    };\\n    UrlParser.prototype.parseChildren = function () {\\n        if (this.remaining === \\'\\') {\\n            return {};\\n        }\\n        this.consumeOptional(\\'/\\');\\n        var segments = [];\\n        if (!this.peekStartsWith(\\'(\\')) {\\n            segments.push(this.parseSegment());\\n        }\\n        while (this.peekStartsWith(\\'/\\') && !this.peekStartsWith(\\'//\\') && !this.peekStartsWith(\\'/(\\')) {\\n            this.capture(\\'/\\');\\n            segments.push(this.parseSegment());\\n        }\\n        var children = {};\\n        if (this.peekStartsWith(\\'/(\\')) {\\n            this.capture(\\'/\\');\\n            children = this.parseParens(true);\\n        }\\n        var res = {};\\n        if (this.peekStartsWith(\\'(\\')) {\\n            res = this.parseParens(false);\\n        }\\n        if (segments.length > 0 || Object.keys(children).length > 0) {\\n            res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);\\n        }\\n        return res;\\n    };\\n    // parse a segment with its matrix parameters\\n    // ie `name;k1=v1;k2`\\n    UrlParser.prototype.parseSegment = function () {\\n        var path = matchSegments(this.remaining);\\n        if (path === \\'\\' && this.peekStartsWith(\\';\\')) {\\n            throw new Error(\"Empty path url segment cannot have parameters: \\'\" + this.remaining + \"\\'.\");\\n        }\\n        this.capture(path);\\n        return new UrlSegment(decode(path), this.parseMatrixParams());\\n    };\\n    UrlParser.prototype.parseMatrixParams = function () {\\n        var params = {};\\n        while (this.consumeOptional(\\';\\')) {\\n            this.parseParam(params);\\n        }\\n        return params;\\n    };\\n    UrlParser.prototype.parseParam = function (params) {\\n        var key = matchSegments(this.remaining);\\n        if (!key) {\\n            return;\\n        }\\n        this.capture(key);\\n        var value = \\'\\';\\n        if (this.consumeOptional(\\'=\\')) {\\n            var valueMatch = matchSegments(this.remaining);\\n            if (valueMatch) {\\n                value = valueMatch;\\n                this.capture(value);\\n            }\\n        }\\n        params[decode(key)] = decode(value);\\n    };\\n    // Parse a single query parameter `name[=value]`\\n    UrlParser.prototype.parseQueryParam = function (params) {\\n        var key = matchQueryParams(this.remaining);\\n        if (!key) {\\n            return;\\n        }\\n        this.capture(key);\\n        var value = \\'\\';\\n        if (this.consumeOptional(\\'=\\')) {\\n            var valueMatch = matchUrlQueryParamValue(this.remaining);\\n            if (valueMatch) {\\n                value = valueMatch;\\n                this.capture(value);\\n            }\\n        }\\n        var decodedKey = decodeQuery(key);\\n        var decodedVal = decodeQuery(value);\\n        if (params.hasOwnProperty(decodedKey)) {\\n            // Append to existing values\\n            var currentVal = params[decodedKey];\\n            if (!Array.isArray(currentVal)) {\\n                currentVal = [currentVal];\\n                params[decodedKey] = currentVal;\\n            }\\n            currentVal.push(decodedVal);\\n        }\\n        else {\\n            // Create a new value\\n            params[decodedKey] = decodedVal;\\n        }\\n    };\\n    // parse `(a/b//outlet_name:c/d)`\\n    UrlParser.prototype.parseParens = function (allowPrimary) {\\n        var segments = {};\\n        this.capture(\\'(\\');\\n        while (!this.consumeOptional(\\')\\') && this.remaining.length > 0) {\\n            var path = matchSegments(this.remaining);\\n            var next = this.remaining[path.length];\\n            // if is is not one of these characters, then the segment was unescaped\\n            // or the group was not closed\\n            if (next !== \\'/\\' && next !== \\')\\' && next !== \\';\\') {\\n                throw new Error(\"Cannot parse url \\'\" + this.url + \"\\'\");\\n            }\\n            var outletName = undefined;\\n            if (path.indexOf(\\':\\') > -1) {\\n                outletName = path.substr(0, path.indexOf(\\':\\'));\\n                this.capture(outletName);\\n                this.capture(\\':\\');\\n            }\\n            else if (allowPrimary) {\\n                outletName = PRIMARY_OUTLET;\\n            }\\n            var children = this.parseChildren();\\n            segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] :\\n                new UrlSegmentGroup([], children);\\n            this.consumeOptional(\\'//\\');\\n        }\\n        return segments;\\n    };\\n    UrlParser.prototype.peekStartsWith = function (str) { return this.remaining.startsWith(str); };\\n    // Consumes the prefix when it is present and returns whether it has been consumed\\n    UrlParser.prototype.consumeOptional = function (str) {\\n        if (this.peekStartsWith(str)) {\\n            this.remaining = this.remaining.substring(str.length);\\n            return true;\\n        }\\n        return false;\\n    };\\n    UrlParser.prototype.capture = function (str) {\\n        if (!this.consumeOptional(str)) {\\n            throw new Error(\"Expected \\\\\"\" + str + \"\\\\\".\");\\n        }\\n    };\\n    return UrlParser;\\n}());\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\nvar Tree = /** @class */ (function () {\\n    function Tree(root) {\\n        this._root = root;\\n    }\\n    Object.defineProperty(Tree.prototype, \"root\", {\\n        get: function () { return this._root.value; },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    /**\\n     * @internal\\n     */\\n    Tree.prototype.parent = function (t) {\\n        var p = this.pathFromRoot(t);\\n        return p.length > 1 ? p[p.length - 2] : null;\\n    };\\n    /**\\n     * @internal\\n     */\\n    Tree.prototype.children = function (t) {\\n        var n = findNode(t, this._root);\\n        return n ? n.children.map(function (t) { return t.value; }) : [];\\n    };\\n    /**\\n     * @internal\\n     */\\n    Tree.prototype.firstChild = function (t) {\\n        var n = findNode(t, this._root);\\n        return n && n.children.length > 0 ? n.children[0].value : null;\\n    };\\n    /**\\n     * @internal\\n     */\\n    Tree.prototype.siblings = function (t) {\\n        var p = findPath(t, this._root);\\n        if (p.length < 2)\\n            return [];\\n        var c = p[p.length - 2].children.map(function (c) { return c.value; });\\n        return c.filter(function (cc) { return cc !== t; });\\n    };\\n    /**\\n     * @internal\\n     */\\n    Tree.prototype.pathFromRoot = function (t) { return findPath(t, this._root).map(function (s) { return s.value; }); };\\n    return Tree;\\n}());\\n// DFS for the node matching the value\\nfunction findNode(value, node) {\\n    var e_1, _a;\\n    if (value === node.value)\\n        return node;\\n    try {\\n        for (var _b = Object(tslib_es6[\"h\" /* __values */])(node.children), _c = _b.next(); !_c.done; _c = _b.next()) {\\n            var child = _c.value;\\n            var node_1 = findNode(value, child);\\n            if (node_1)\\n                return node_1;\\n        }\\n    }\\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\\n    finally {\\n        try {\\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\\n        }\\n        finally { if (e_1) throw e_1.error; }\\n    }\\n    return null;\\n}\\n// Return the path to the node with the given value using DFS\\nfunction findPath(value, node) {\\n    var e_2, _a;\\n    if (value === node.value)\\n        return [node];\\n    try {\\n        for (var _b = Object(tslib_es6[\"h\" /* __values */])(node.children), _c = _b.next(); !_c.done; _c = _b.next()) {\\n            var child = _c.value;\\n            var path = findPath(value, child);\\n            if (path.length) {\\n                path.unshift(node);\\n                return path;\\n            }\\n        }\\n    }\\n    catch (e_2_1) { e_2 = { error: e_2_1 }; }\\n    finally {\\n        try {\\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\\n        }\\n        finally { if (e_2) throw e_2.error; }\\n    }\\n    return [];\\n}\\nvar TreeNode = /** @class */ (function () {\\n    function TreeNode(value, children) {\\n        this.value = value;\\n        this.children = children;\\n    }\\n    TreeNode.prototype.toString = function () { return \"TreeNode(\" + this.value + \")\"; };\\n    return TreeNode;\\n}());\\n// Return the list of T indexed by outlet name\\nfunction nodeChildrenAsMap(node) {\\n    var map$$1 = {};\\n    if (node) {\\n        node.children.forEach(function (child) { return map$$1[child.value.outlet] = child; });\\n    }\\n    return map$$1;\\n}\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n/**\\n * @description\\n *\\n * Represents the state of the router.\\n *\\n * RouterState is a tree of activated routes. Every node in this tree knows about the \"consumed\" URL\\n * segments, the extracted parameters, and the resolved data.\\n *\\n * @usageNotes\\n * ### Example\\n *\\n * ```\\n * @Component({templateUrl:\\'template.html\\'})\\n * class MyComponent {\\n *   constructor(router: Router) {\\n *     const state: RouterState = router.routerState;\\n *     const root: ActivatedRoute = state.root;\\n *     const child = root.firstChild;\\n *     const id: Observable<string> = child.params.map(p => p.id);\\n *     //...\\n *   }\\n * }\\n * ```\\n *\\n * See `ActivatedRoute` for more information.\\n *\\n * @publicApi\\n */\\nvar router_RouterState = /** @class */ (function (_super) {\\n    Object(tslib_es6[\"c\" /* __extends */])(RouterState, _super);\\n    /** @internal */\\n    function RouterState(root, \\n    /** The current snapshot of the router state */\\n    snapshot) {\\n        var _this = _super.call(this, root) || this;\\n        _this.snapshot = snapshot;\\n        setRouterState(_this, root);\\n        return _this;\\n    }\\n    RouterState.prototype.toString = function () { return this.snapshot.toString(); };\\n    return RouterState;\\n}(Tree));\\nfunction createEmptyState(urlTree, rootComponent) {\\n    var snapshot = createEmptyStateSnapshot(urlTree, rootComponent);\\n    var emptyUrl = new BehaviorSubject[\"a\" /* BehaviorSubject */]([new UrlSegment(\\'\\', {})]);\\n    var emptyParams = new BehaviorSubject[\"a\" /* BehaviorSubject */]({});\\n    var emptyData = new BehaviorSubject[\"a\" /* BehaviorSubject */]({});\\n    var emptyQueryParams = new BehaviorSubject[\"a\" /* BehaviorSubject */]({});\\n    var fragment = new BehaviorSubject[\"a\" /* BehaviorSubject */](\\'\\');\\n    var activated = new router_ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);\\n    activated.snapshot = snapshot.root;\\n    return new router_RouterState(new TreeNode(activated, []), snapshot);\\n}\\nfunction createEmptyStateSnapshot(urlTree, rootComponent) {\\n    var emptyParams = {};\\n    var emptyData = {};\\n    var emptyQueryParams = {};\\n    var fragment = \\'\\';\\n    var activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1, {});\\n    return new router_RouterStateSnapshot(\\'\\', new TreeNode(activated, []));\\n}\\n/**\\n * @description\\n *\\n * Contains the information about a route associated with a component loaded in an\\n * outlet.  An `ActivatedRoute` can also be used to traverse the router state tree.\\n *\\n * ```\\n * @Component({...})\\n * class MyComponent {\\n *   constructor(route: ActivatedRoute) {\\n *     const id: Observable<string> = route.params.map(p => p.id);\\n *     const url: Observable<string> = route.url.map(segments => segments.join(\\'\\'));\\n *     // route.data includes both `data` and `resolve`\\n *     const user = route.data.map(d => d.user);\\n *   }\\n * }\\n * ```\\n *\\n * @publicApi\\n */\\nvar router_ActivatedRoute = /** @class */ (function () {\\n    /** @internal */\\n    function ActivatedRoute(\\n    /** An observable of the URL segments matched by this route */\\n    url, \\n    /** An observable of the matrix parameters scoped to this route */\\n    params, \\n    /** An observable of the query parameters shared by all the routes */\\n    queryParams, \\n    /** An observable of the URL fragment shared by all the routes */\\n    fragment, \\n    /** An observable of the static and resolved data of this route. */\\n    data, \\n    /** The outlet name of the route. It\\'s a constant */\\n    outlet, \\n    /** The component of the route. It\\'s a constant */\\n    // TODO(vsavkin): remove |string\\n    component, futureSnapshot) {\\n        this.url = url;\\n        this.params = params;\\n        this.queryParams = queryParams;\\n        this.fragment = fragment;\\n        this.data = data;\\n        this.outlet = outlet;\\n        this.component = component;\\n        this._futureSnapshot = futureSnapshot;\\n    }\\n    Object.defineProperty(ActivatedRoute.prototype, \"routeConfig\", {\\n        /** The configuration used to match this route */\\n        get: function () { return this._futureSnapshot.routeConfig; },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    Object.defineProperty(ActivatedRoute.prototype, \"root\", {\\n        /** The root of the router state */\\n        get: function () { return this._routerState.root; },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    Object.defineProperty(ActivatedRoute.prototype, \"parent\", {\\n        /** The parent of this route in the router state tree */\\n        get: function () { return this._routerState.parent(this); },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    Object.defineProperty(ActivatedRoute.prototype, \"firstChild\", {\\n        /** The first child of this route in the router state tree */\\n        get: function () { return this._routerState.firstChild(this); },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    Object.defineProperty(ActivatedRoute.prototype, \"children\", {\\n        /** The children of this route in the router state tree */\\n        get: function () { return this._routerState.children(this); },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    Object.defineProperty(ActivatedRoute.prototype, \"pathFromRoot\", {\\n        /** The path from the root of the router state tree to this route */\\n        get: function () { return this._routerState.pathFromRoot(this); },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    Object.defineProperty(ActivatedRoute.prototype, \"paramMap\", {\\n        get: function () {\\n            if (!this._paramMap) {\\n                this._paramMap = this.params.pipe(Object(map[\"a\" /* map */])(function (p) { return convertToParamMap(p); }));\\n            }\\n            return this._paramMap;\\n        },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    Object.defineProperty(ActivatedRoute.prototype, \"queryParamMap\", {\\n        get: function () {\\n            if (!this._queryParamMap) {\\n                this._queryParamMap =\\n                    this.queryParams.pipe(Object(map[\"a\" /* map */])(function (p) { return convertToParamMap(p); }));\\n            }\\n            return this._queryParamMap;\\n        },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    ActivatedRoute.prototype.toString = function () {\\n        return this.snapshot ? this.snapshot.toString() : \"Future(\" + this._futureSnapshot + \")\";\\n    };\\n    return ActivatedRoute;\\n}());\\n/**\\n * Returns the inherited params, data, and resolve for a given route.\\n * By default, this only inherits values up to the nearest path-less or component-less route.\\n * @internal\\n */\\nfunction inheritedParamsDataResolve(route, paramsInheritanceStrategy) {\\n    if (paramsInheritanceStrategy === void 0) { paramsInheritanceStrategy = \\'emptyOnly\\'; }\\n    var pathFromRoot = route.pathFromRoot;\\n    var inheritingStartingFrom = 0;\\n    if (paramsInheritanceStrategy !== \\'always\\') {\\n        inheritingStartingFrom = pathFromRoot.length - 1;\\n        while (inheritingStartingFrom >= 1) {\\n            var current = pathFromRoot[inheritingStartingFrom];\\n            var parent_1 = pathFromRoot[inheritingStartingFrom - 1];\\n            // current route is an empty path => inherits its parent\\'s params and data\\n            if (current.routeConfig && current.routeConfig.path === \\'\\') {\\n                inheritingStartingFrom--;\\n                // parent is componentless => current route should inherit its params and data\\n            }\\n            else if (!parent_1.component) {\\n                inheritingStartingFrom--;\\n            }\\n            else {\\n                break;\\n            }\\n        }\\n    }\\n    return flattenInherited(pathFromRoot.slice(inheritingStartingFrom));\\n}\\n/** @internal */\\nfunction flattenInherited(pathFromRoot) {\\n    return pathFromRoot.reduce(function (res, curr) {\\n        var params = Object(tslib_es6[\"a\" /* __assign */])({}, res.params, curr.params);\\n        var data = Object(tslib_es6[\"a\" /* __assign */])({}, res.data, curr.data);\\n        var resolve = Object(tslib_es6[\"a\" /* __assign */])({}, res.resolve, curr._resolvedData);\\n        return { params: params, data: data, resolve: resolve };\\n    }, { params: {}, data: {}, resolve: {} });\\n}\\n/**\\n * @description\\n *\\n * Contains the information about a route associated with a component loaded in an\\n * outlet at a particular moment in time. ActivatedRouteSnapshot can also be used to\\n * traverse the router state tree.\\n *\\n * ```\\n * @Component({templateUrl:\\'./my-component.html\\'})\\n * class MyComponent {\\n *   constructor(route: ActivatedRoute) {\\n *     const id: string = route.snapshot.params.id;\\n *     const url: string = route.snapshot.url.join(\\'\\');\\n *     const user = route.snapshot.data.user;\\n *   }\\n * }\\n * ```\\n *\\n * @publicApi\\n */\\nvar ActivatedRouteSnapshot = /** @class */ (function () {\\n    /** @internal */\\n    function ActivatedRouteSnapshot(\\n    /** The URL segments matched by this route */\\n    url, \\n    /** The matrix parameters scoped to this route */\\n    params, \\n    /** The query parameters shared by all the routes */\\n    queryParams, \\n    /** The URL fragment shared by all the routes */\\n    fragment, \\n    /** The static and resolved data of this route */\\n    data, \\n    /** The outlet name of the route */\\n    outlet, \\n    /** The component of the route */\\n    component, routeConfig, urlSegment, lastPathIndex, resolve) {\\n        this.url = url;\\n        this.params = params;\\n        this.queryParams = queryParams;\\n        this.fragment = fragment;\\n        this.data = data;\\n        this.outlet = outlet;\\n        this.component = component;\\n        this.routeConfig = routeConfig;\\n        this._urlSegment = urlSegment;\\n        this._lastPathIndex = lastPathIndex;\\n        this._resolve = resolve;\\n    }\\n    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"root\", {\\n        /** The root of the router state */\\n        get: function () { return this._routerState.root; },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"parent\", {\\n        /** The parent of this route in the router state tree */\\n        get: function () { return this._routerState.parent(this); },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"firstChild\", {\\n        /** The first child of this route in the router state tree */\\n        get: function () { return this._routerState.firstChild(this); },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"children\", {\\n        /** The children of this route in the router state tree */\\n        get: function () { return this._routerState.children(this); },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"pathFromRoot\", {\\n        /** The path from the root of the router state tree to this route */\\n        get: function () { return this._routerState.pathFromRoot(this); },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"paramMap\", {\\n        get: function () {\\n            if (!this._paramMap) {\\n                this._paramMap = convertToParamMap(this.params);\\n            }\\n            return this._paramMap;\\n        },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"queryParamMap\", {\\n        get: function () {\\n            if (!this._queryParamMap) {\\n                this._queryParamMap = convertToParamMap(this.queryParams);\\n            }\\n            return this._queryParamMap;\\n        },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    ActivatedRouteSnapshot.prototype.toString = function () {\\n        var url = this.url.map(function (segment) { return segment.toString(); }).join(\\'/\\');\\n        var matched = this.routeConfig ? this.routeConfig.path : \\'\\';\\n        return \"Route(url:\\'\" + url + \"\\', path:\\'\" + matched + \"\\')\";\\n    };\\n    return ActivatedRouteSnapshot;\\n}());\\n/**\\n * @description\\n *\\n * Represents the state of the router at a moment in time.\\n *\\n * This is a tree of activated route snapshots. Every node in this tree knows about\\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\\n *\\n * @usageNotes\\n * ### Example\\n *\\n * ```\\n * @Component({templateUrl:\\'template.html\\'})\\n * class MyComponent {\\n *   constructor(router: Router) {\\n *     const state: RouterState = router.routerState;\\n *     const snapshot: RouterStateSnapshot = state.snapshot;\\n *     const root: ActivatedRouteSnapshot = snapshot.root;\\n *     const child = root.firstChild;\\n *     const id: Observable<string> = child.params.map(p => p.id);\\n *     //...\\n *   }\\n * }\\n * ```\\n *\\n * @publicApi\\n */\\nvar router_RouterStateSnapshot = /** @class */ (function (_super) {\\n    Object(tslib_es6[\"c\" /* __extends */])(RouterStateSnapshot, _super);\\n    /** @internal */\\n    function RouterStateSnapshot(\\n    /** The url from which this snapshot was created */\\n    url, root) {\\n        var _this = _super.call(this, root) || this;\\n        _this.url = url;\\n        setRouterState(_this, root);\\n        return _this;\\n    }\\n    RouterStateSnapshot.prototype.toString = function () { return serializeNode(this._root); };\\n    return RouterStateSnapshot;\\n}(Tree));\\nfunction setRouterState(state, node) {\\n    node.value._routerState = state;\\n    node.children.forEach(function (c) { return setRouterState(state, c); });\\n}\\nfunction serializeNode(node) {\\n    var c = node.children.length > 0 ? \" { \" + node.children.map(serializeNode).join(\\', \\') + \" } \" : \\'\\';\\n    return \"\" + node.value + c;\\n}\\n/**\\n * The expectation is that the activate route is created with the right set of parameters.\\n * So we push new values into the observables only when they are not the initial values.\\n * And we detect that by checking if the snapshot field is set.\\n */\\nfunction advanceActivatedRoute(route) {\\n    if (route.snapshot) {\\n        var currentSnapshot = route.snapshot;\\n        var nextSnapshot = route._futureSnapshot;\\n        route.snapshot = nextSnapshot;\\n        if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {\\n            route.queryParams.next(nextSnapshot.queryParams);\\n        }\\n        if (currentSnapshot.fragment !== nextSnapshot.fragment) {\\n            route.fragment.next(nextSnapshot.fragment);\\n        }\\n        if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {\\n            route.params.next(nextSnapshot.params);\\n        }\\n        if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {\\n            route.url.next(nextSnapshot.url);\\n        }\\n        if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {\\n            route.data.next(nextSnapshot.data);\\n        }\\n    }\\n    else {\\n        route.snapshot = route._futureSnapshot;\\n        // this is for resolved data\\n        route.data.next(route._futureSnapshot.data);\\n    }\\n}\\nfunction equalParamsAndUrlSegments(a, b) {\\n    var equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);\\n    var parentsMismatch = !a.parent !== !b.parent;\\n    return equalUrlParams && !parentsMismatch &&\\n        (!a.parent || equalParamsAndUrlSegments(a.parent, b.parent));\\n}\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\nfunction createRouterState(routeReuseStrategy, curr, prevState) {\\n    var root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);\\n    return new router_RouterState(root, curr);\\n}\\nfunction createNode(routeReuseStrategy, curr, prevState) {\\n    // reuse an activated route that is currently displayed on the screen\\n    if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {\\n        var value = prevState.value;\\n        value._futureSnapshot = curr.value;\\n        var children = createOrReuseChildren(routeReuseStrategy, curr, prevState);\\n        return new TreeNode(value, children);\\n        // retrieve an activated route that is used to be displayed, but is not currently displayed\\n    }\\n    else {\\n        var detachedRouteHandle = routeReuseStrategy.retrieve(curr.value);\\n        if (detachedRouteHandle) {\\n            var tree = detachedRouteHandle.route;\\n            setFutureSnapshotsOfActivatedRoutes(curr, tree);\\n            return tree;\\n        }\\n        else {\\n            var value = createActivatedRoute(curr.value);\\n            var children = curr.children.map(function (c) { return createNode(routeReuseStrategy, c); });\\n            return new TreeNode(value, children);\\n        }\\n    }\\n}\\nfunction setFutureSnapshotsOfActivatedRoutes(curr, result) {\\n    if (curr.value.routeConfig !== result.value.routeConfig) {\\n        throw new Error(\\'Cannot reattach ActivatedRouteSnapshot created from a different route\\');\\n    }\\n    if (curr.children.length !== result.children.length) {\\n        throw new Error(\\'Cannot reattach ActivatedRouteSnapshot with a different number of children\\');\\n    }\\n    result.value._futureSnapshot = curr.value;\\n    for (var i = 0; i < curr.children.length; ++i) {\\n        setFutureSnapshotsOfActivatedRoutes(curr.children[i], result.children[i]);\\n    }\\n}\\nfunction createOrReuseChildren(routeReuseStrategy, curr, prevState) {\\n    return curr.children.map(function (child) {\\n        var e_1, _a;\\n        try {\\n            for (var _b = Object(tslib_es6[\"h\" /* __values */])(prevState.children), _c = _b.next(); !_c.done; _c = _b.next()) {\\n                var p = _c.value;\\n                if (routeReuseStrategy.shouldReuseRoute(p.value.snapshot, child.value)) {\\n                    return createNode(routeReuseStrategy, child, p);\\n                }\\n            }\\n        }\\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\\n        finally {\\n            try {\\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\\n            }\\n            finally { if (e_1) throw e_1.error; }\\n        }\\n        return createNode(routeReuseStrategy, child);\\n    });\\n}\\nfunction createActivatedRoute(c) {\\n    return new router_ActivatedRoute(new BehaviorSubject[\"a\" /* BehaviorSubject */](c.url), new BehaviorSubject[\"a\" /* BehaviorSubject */](c.params), new BehaviorSubject[\"a\" /* BehaviorSubject */](c.queryParams), new BehaviorSubject[\"a\" /* BehaviorSubject */](c.fragment), new BehaviorSubject[\"a\" /* BehaviorSubject */](c.data), c.outlet, c.component, c);\\n}\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\nfunction createUrlTree(route, urlTree, commands, queryParams, fragment) {\\n    if (commands.length === 0) {\\n        return router_tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);\\n    }\\n    var nav = computeNavigation(commands);\\n    if (nav.toRoot()) {\\n        return router_tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);\\n    }\\n    var startingPosition = findStartingPosition(nav, urlTree, route);\\n    var segmentGroup = startingPosition.processChildren ?\\n        updateSegmentGroupChildren(startingPosition.segmentGroup, startingPosition.index, nav.commands) :\\n        updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);\\n    return router_tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);\\n}\\nfunction isMatrixParams(command) {\\n    return typeof command === \\'object\\' && command != null && !command.outlets && !command.segmentPath;\\n}\\nfunction router_tree(oldSegmentGroup, newSegmentGroup, urlTree, queryParams, fragment) {\\n    var qp = {};\\n    if (queryParams) {\\n        forEach(queryParams, function (value, name) {\\n            qp[name] = Array.isArray(value) ? value.map(function (v) { return \"\" + v; }) : \"\" + value;\\n        });\\n    }\\n    if (urlTree.root === oldSegmentGroup) {\\n        return new UrlTree(newSegmentGroup, qp, fragment);\\n    }\\n    return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), qp, fragment);\\n}\\nfunction replaceSegment(current, oldSegment, newSegment) {\\n    var children = {};\\n    forEach(current.children, function (c, outletName) {\\n        if (c === oldSegment) {\\n            children[outletName] = newSegment;\\n        }\\n        else {\\n            children[outletName] = replaceSegment(c, oldSegment, newSegment);\\n        }\\n    });\\n    return new UrlSegmentGroup(current.segments, children);\\n}\\nvar Navigation = /** @class */ (function () {\\n    function Navigation(isAbsolute, numberOfDoubleDots, commands) {\\n        this.isAbsolute = isAbsolute;\\n        this.numberOfDoubleDots = numberOfDoubleDots;\\n        this.commands = commands;\\n        if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {\\n            throw new Error(\\'Root segment cannot have matrix parameters\\');\\n        }\\n        var cmdWithOutlet = commands.find(function (c) { return typeof c === \\'object\\' && c != null && c.outlets; });\\n        if (cmdWithOutlet && cmdWithOutlet !== last$1(commands)) {\\n            throw new Error(\\'{outlets:{}} has to be the last command\\');\\n        }\\n    }\\n    Navigation.prototype.toRoot = function () {\\n        return this.isAbsolute && this.commands.length === 1 && this.commands[0] == \\'/\\';\\n    };\\n    return Navigation;\\n}());\\n/** Transforms commands to a normalized `Navigation` */\\nfunction computeNavigation(commands) {\\n    if ((typeof commands[0] === \\'string\\') && commands.length === 1 && commands[0] === \\'/\\') {\\n        return new Navigation(true, 0, commands);\\n    }\\n    var numberOfDoubleDots = 0;\\n    var isAbsolute = false;\\n    var res = commands.reduce(function (res, cmd, cmdIdx) {\\n        if (typeof cmd === \\'object\\' && cmd != null) {\\n            if (cmd.outlets) {\\n                var outlets_1 = {};\\n                forEach(cmd.outlets, function (commands, name) {\\n                    outlets_1[name] = typeof commands === \\'string\\' ? commands.split(\\'/\\') : commands;\\n                });\\n                return Object(tslib_es6[\"g\" /* __spread */])(res, [{ outlets: outlets_1 }]);\\n            }\\n            if (cmd.segmentPath) {\\n                return Object(tslib_es6[\"g\" /* __spread */])(res, [cmd.segmentPath]);\\n            }\\n        }\\n        if (!(typeof cmd === \\'string\\')) {\\n            return Object(tslib_es6[\"g\" /* __spread */])(res, [cmd]);\\n        }\\n        if (cmdIdx === 0) {\\n            cmd.split(\\'/\\').forEach(function (urlPart, partIndex) {\\n                if (partIndex == 0 && urlPart === \\'.\\') ;\\n                else if (partIndex == 0 && urlPart === \\'\\') { //  \\'/a\\'\\n                    isAbsolute = true;\\n                }\\n                else if (urlPart === \\'..\\') { //  \\'../a\\'\\n                    numberOfDoubleDots++;\\n                }\\n                else if (urlPart != \\'\\') {\\n                    res.push(urlPart);\\n                }\\n            });\\n            return res;\\n        }\\n        return Object(tslib_es6[\"g\" /* __spread */])(res, [cmd]);\\n    }, []);\\n    return new Navigation(isAbsolute, numberOfDoubleDots, res);\\n}\\nvar Position = /** @class */ (function () {\\n    function Position(segmentGroup, processChildren, index) {\\n        this.segmentGroup = segmentGroup;\\n        this.processChildren = processChildren;\\n        this.index = index;\\n    }\\n    return Position;\\n}());\\nfunction findStartingPosition(nav, tree, route) {\\n    if (nav.isAbsolute) {\\n        return new Position(tree.root, true, 0);\\n    }\\n    if (route.snapshot._lastPathIndex === -1) {\\n        return new Position(route.snapshot._urlSegment, true, 0);\\n    }\\n    var modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;\\n    var index = route.snapshot._lastPathIndex + modifier;\\n    return createPositionApplyingDoubleDots(route.snapshot._urlSegment, index, nav.numberOfDoubleDots);\\n}\\nfunction createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {\\n    var g = group;\\n    var ci = index;\\n    var dd = numberOfDoubleDots;\\n    while (dd > ci) {\\n        dd -= ci;\\n        g = g.parent;\\n        if (!g) {\\n            throw new Error(\\'Invalid number of \\\\\\'../\\\\\\'\\');\\n        }\\n        ci = g.segments.length;\\n    }\\n    return new Position(g, false, ci - dd);\\n}\\nfunction getPath(command) {\\n    if (typeof command === \\'object\\' && command != null && command.outlets) {\\n        return command.outlets[PRIMARY_OUTLET];\\n    }\\n    return \"\" + command;\\n}\\nfunction getOutlets(commands) {\\n    var _a, _b;\\n    if (!(typeof commands[0] === \\'object\\'))\\n        return _a = {}, _a[PRIMARY_OUTLET] = commands, _a;\\n    if (commands[0].outlets === undefined)\\n        return _b = {}, _b[PRIMARY_OUTLET] = commands, _b;\\n    return commands[0].outlets;\\n}\\nfunction updateSegmentGroup(segmentGroup, startIndex, commands) {\\n    if (!segmentGroup) {\\n        segmentGroup = new UrlSegmentGroup([], {});\\n    }\\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\\n        return updateSegmentGroupChildren(segmentGroup, startIndex, commands);\\n    }\\n    var m = prefixedWith(segmentGroup, startIndex, commands);\\n    var slicedCommands = commands.slice(m.commandIndex);\\n    if (m.match && m.pathIndex < segmentGroup.segments.length) {\\n        var g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});\\n        g.children[PRIMARY_OUTLET] =\\n            new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);\\n        return updateSegmentGroupChildren(g, 0, slicedCommands);\\n    }\\n    else if (m.match && slicedCommands.length === 0) {\\n        return new UrlSegmentGroup(segmentGroup.segments, {});\\n    }\\n    else if (m.match && !segmentGroup.hasChildren()) {\\n        return createNewSegmentGroup(segmentGroup, startIndex, commands);\\n    }\\n    else if (m.match) {\\n        return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);\\n    }\\n    else {\\n        return createNewSegmentGroup(segmentGroup, startIndex, commands);\\n    }\\n}\\nfunction updateSegmentGroupChildren(segmentGroup, startIndex, commands) {\\n    if (commands.length === 0) {\\n        return new UrlSegmentGroup(segmentGroup.segments, {});\\n    }\\n    else {\\n        var outlets_2 = getOutlets(commands);\\n        var children_1 = {};\\n        forEach(outlets_2, function (commands, outlet) {\\n            if (commands !== null) {\\n                children_1[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);\\n            }\\n        });\\n        forEach(segmentGroup.children, function (child, childOutlet) {\\n            if (outlets_2[childOutlet] === undefined) {\\n                children_1[childOutlet] = child;\\n            }\\n        });\\n        return new UrlSegmentGroup(segmentGroup.segments, children_1);\\n    }\\n}\\nfunction prefixedWith(segmentGroup, startIndex, commands) {\\n    var currentCommandIndex = 0;\\n    var currentPathIndex = startIndex;\\n    var noMatch = { match: false, pathIndex: 0, commandIndex: 0 };\\n    while (currentPathIndex < segmentGroup.segments.length) {\\n        if (currentCommandIndex >= commands.length)\\n            return noMatch;\\n        var path = segmentGroup.segments[currentPathIndex];\\n        var curr = getPath(commands[currentCommandIndex]);\\n        var next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;\\n        if (currentPathIndex > 0 && curr === undefined)\\n            break;\\n        if (curr && next && (typeof next === \\'object\\') && next.outlets === undefined) {\\n            if (!compare(curr, next, path))\\n                return noMatch;\\n            currentCommandIndex += 2;\\n        }\\n        else {\\n            if (!compare(curr, {}, path))\\n                return noMatch;\\n            currentCommandIndex++;\\n        }\\n        currentPathIndex++;\\n    }\\n    return { match: true, pathIndex: currentPathIndex, commandIndex: currentCommandIndex };\\n}\\nfunction createNewSegmentGroup(segmentGroup, startIndex, commands) {\\n    var paths = segmentGroup.segments.slice(0, startIndex);\\n    var i = 0;\\n    while (i < commands.length) {\\n        if (typeof commands[i] === \\'object\\' && commands[i].outlets !== undefined) {\\n            var children = createNewSegmentChildren(commands[i].outlets);\\n            return new UrlSegmentGroup(paths, children);\\n        }\\n        // if we start with an object literal, we need to reuse the path part from the segment\\n        if (i === 0 && isMatrixParams(commands[0])) {\\n            var p = segmentGroup.segments[startIndex];\\n            paths.push(new UrlSegment(p.path, commands[0]));\\n            i++;\\n            continue;\\n        }\\n        var curr = getPath(commands[i]);\\n        var next = (i < commands.length - 1) ? commands[i + 1] : null;\\n        if (curr && next && isMatrixParams(next)) {\\n            paths.push(new UrlSegment(curr, stringify(next)));\\n            i += 2;\\n        }\\n        else {\\n            paths.push(new UrlSegment(curr, {}));\\n            i++;\\n        }\\n    }\\n    return new UrlSegmentGroup(paths, {});\\n}\\nfunction createNewSegmentChildren(outlets) {\\n    var children = {};\\n    forEach(outlets, function (commands, outlet) {\\n        if (commands !== null) {\\n            children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);\\n        }\\n    });\\n    return children;\\n}\\nfunction stringify(params) {\\n    var res = {};\\n    forEach(params, function (v, k) { return res[k] = \"\" + v; });\\n    return res;\\n}\\nfunction compare(path, params, segment) {\\n    return path == segment.path && shallowEqual(params, segment.parameters);\\n}\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\nvar activateRoutes = function (rootContexts, routeReuseStrategy, forwardEvent) {\\n    return Object(map[\"a\" /* map */])(function (t) {\\n        new ActivateRoutes(routeReuseStrategy, t.targetRouterState, t.currentRouterState, forwardEvent)\\n            .activate(rootContexts);\\n        return t;\\n    });\\n};\\nvar ActivateRoutes = /** @class */ (function () {\\n    function ActivateRoutes(routeReuseStrategy, futureState, currState, forwardEvent) {\\n        this.routeReuseStrategy = routeReuseStrategy;\\n        this.futureState = futureState;\\n        this.currState = currState;\\n        this.forwardEvent = forwardEvent;\\n    }\\n    ActivateRoutes.prototype.activate = function (parentContexts) {\\n        var futureRoot = this.futureState._root;\\n        var currRoot = this.currState ? this.currState._root : null;\\n        this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);\\n        advanceActivatedRoute(this.futureState.root);\\n        this.activateChildRoutes(futureRoot, currRoot, parentContexts);\\n    };\\n    // De-activate the child route that are not re-used for the future state\\n    ActivateRoutes.prototype.deactivateChildRoutes = function (futureNode, currNode, contexts) {\\n        var _this = this;\\n        var children = nodeChildrenAsMap(currNode);\\n        // Recurse on the routes active in the future state to de-activate deeper children\\n        futureNode.children.forEach(function (futureChild) {\\n            var childOutletName = futureChild.value.outlet;\\n            _this.deactivateRoutes(futureChild, children[childOutletName], contexts);\\n            delete children[childOutletName];\\n        });\\n        // De-activate the routes that will not be re-used\\n        forEach(children, function (v, childName) {\\n            _this.deactivateRouteAndItsChildren(v, contexts);\\n        });\\n    };\\n    ActivateRoutes.prototype.deactivateRoutes = function (futureNode, currNode, parentContext) {\\n        var future = futureNode.value;\\n        var curr = currNode ? currNode.value : null;\\n        if (future === curr) {\\n            // Reusing the node, check to see if the children need to be de-activated\\n            if (future.component) {\\n                // If we have a normal route, we need to go through an outlet.\\n                var context = parentContext.getContext(future.outlet);\\n                if (context) {\\n                    this.deactivateChildRoutes(futureNode, currNode, context.children);\\n                }\\n            }\\n            else {\\n                // if we have a componentless route, we recurse but keep the same outlet map.\\n                this.deactivateChildRoutes(futureNode, currNode, parentContext);\\n            }\\n        }\\n        else {\\n            if (curr) {\\n                // Deactivate the current route which will not be re-used\\n                this.deactivateRouteAndItsChildren(currNode, parentContext);\\n            }\\n        }\\n    };\\n    ActivateRoutes.prototype.deactivateRouteAndItsChildren = function (route, parentContexts) {\\n        if (this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {\\n            this.detachAndStoreRouteSubtree(route, parentContexts);\\n        }\\n        else {\\n            this.deactivateRouteAndOutlet(route, parentContexts);\\n        }\\n    };\\n    ActivateRoutes.prototype.detachAndStoreRouteSubtree = function (route, parentContexts) {\\n        var context = parentContexts.getContext(route.value.outlet);\\n        if (context && context.outlet) {\\n            var componentRef = context.outlet.detach();\\n            var contexts = context.children.onOutletDeactivated();\\n            this.routeReuseStrategy.store(route.value.snapshot, { componentRef: componentRef, route: route, contexts: contexts });\\n        }\\n    };\\n    ActivateRoutes.prototype.deactivateRouteAndOutlet = function (route, parentContexts) {\\n        var _this = this;\\n        var context = parentContexts.getContext(route.value.outlet);\\n        if (context) {\\n            var children = nodeChildrenAsMap(route);\\n            var contexts_1 = route.value.component ? context.children : parentContexts;\\n            forEach(children, function (v, k) { return _this.deactivateRouteAndItsChildren(v, contexts_1); });\\n            if (context.outlet) {\\n                // Destroy the component\\n                context.outlet.deactivate();\\n                // Destroy the contexts for all the outlets that were in the component\\n                context.children.onOutletDeactivated();\\n            }\\n        }\\n    };\\n    ActivateRoutes.prototype.activateChildRoutes = function (futureNode, currNode, contexts) {\\n        var _this = this;\\n        var children = nodeChildrenAsMap(currNode);\\n        futureNode.children.forEach(function (c) {\\n            _this.activateRoutes(c, children[c.value.outlet], contexts);\\n            _this.forwardEvent(new ActivationEnd(c.value.snapshot));\\n        });\\n        if (futureNode.children.length) {\\n            this.forwardEvent(new ChildActivationEnd(futureNode.value.snapshot));\\n        }\\n    };\\n    ActivateRoutes.prototype.activateRoutes = function (futureNode, currNode, parentContexts) {\\n        var future = futureNode.value;\\n        var curr = currNode ? currNode.value : null;\\n        advanceActivatedRoute(future);\\n        // reusing the node\\n        if (future === curr) {\\n            if (future.component) {\\n                // If we have a normal route, we need to go through an outlet.\\n                var context = parentContexts.getOrCreateContext(future.outlet);\\n                this.activateChildRoutes(futureNode, currNode, context.children);\\n            }\\n            else {\\n                // if we have a componentless route, we recurse but keep the same outlet map.\\n                this.activateChildRoutes(futureNode, currNode, parentContexts);\\n            }\\n        }\\n        else {\\n            if (future.component) {\\n                // if we have a normal route, we need to place the component into the outlet and recurse.\\n                var context = parentContexts.getOrCreateContext(future.outlet);\\n                if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {\\n                    var stored = this.routeReuseStrategy.retrieve(future.snapshot);\\n                    this.routeReuseStrategy.store(future.snapshot, null);\\n                    context.children.onOutletReAttached(stored.contexts);\\n                    context.attachRef = stored.componentRef;\\n                    context.route = stored.route.value;\\n                    if (context.outlet) {\\n                        // Attach right away when the outlet has already been instantiated\\n                        // Otherwise attach from `RouterOutlet.ngOnInit` when it is instantiated\\n                        context.outlet.attach(stored.componentRef, stored.route.value);\\n                    }\\n                    advanceActivatedRouteNodeAndItsChildren(stored.route);\\n                }\\n                else {\\n                    var config = parentLoadedConfig(future.snapshot);\\n                    var cmpFactoryResolver = config ? config.module.componentFactoryResolver : null;\\n                    context.attachRef = null;\\n                    context.route = future;\\n                    context.resolver = cmpFactoryResolver;\\n                    if (context.outlet) {\\n                        // Activate the outlet when it has already been instantiated\\n                        // Otherwise it will get activated from its `ngOnInit` when instantiated\\n                        context.outlet.activateWith(future, cmpFactoryResolver);\\n                    }\\n                    this.activateChildRoutes(futureNode, null, context.children);\\n                }\\n            }\\n            else {\\n                // if we have a componentless route, we recurse but keep the same outlet map.\\n                this.activateChildRoutes(futureNode, null, parentContexts);\\n            }\\n        }\\n    };\\n    return ActivateRoutes;\\n}());\\nfunction advanceActivatedRouteNodeAndItsChildren(node) {\\n    advanceActivatedRoute(node.value);\\n    node.children.forEach(advanceActivatedRouteNodeAndItsChildren);\\n}\\nfunction parentLoadedConfig(snapshot) {\\n    for (var s = snapshot.parent; s; s = s.parent) {\\n        var route = s.routeConfig;\\n        if (route && route._loadedConfig)\\n            return route._loadedConfig;\\n        if (route && route.component)\\n            return null;\\n    }\\n    return null;\\n}\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\nvar NoMatch = /** @class */ (function () {\\n    function NoMatch(segmentGroup) {\\n        this.segmentGroup = segmentGroup || null;\\n    }\\n    return NoMatch;\\n}());\\nvar AbsoluteRedirect = /** @class */ (function () {\\n    function AbsoluteRedirect(urlTree) {\\n        this.urlTree = urlTree;\\n    }\\n    return AbsoluteRedirect;\\n}());\\nfunction noMatch(segmentGroup) {\\n    return new Observable[\"a\" /* Observable */](function (obs) { return obs.error(new NoMatch(segmentGroup)); });\\n}\\nfunction absoluteRedirect(newTree) {\\n    return new Observable[\"a\" /* Observable */](function (obs) { return obs.error(new AbsoluteRedirect(newTree)); });\\n}\\nfunction namedOutletsRedirect(redirectTo) {\\n    return new Observable[\"a\" /* Observable */](function (obs) { return obs.error(new Error(\"Only absolute redirects can have named outlets. redirectTo: \\'\" + redirectTo + \"\\'\")); });\\n}\\nfunction canLoadFails(route) {\\n    return new Observable[\"a\" /* Observable */](function (obs) { return obs.error(navigationCancelingError(\"Cannot load children because the guard of the route \\\\\"path: \\'\" + route.path + \"\\'\\\\\" returned false\")); });\\n}\\n/**\\n * Returns the `UrlTree` with the redirection applied.\\n *\\n * Lazy modules are loaded along the way.\\n */\\nfunction applyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config) {\\n    return new router_ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config).apply();\\n}\\nvar router_ApplyRedirects = /** @class */ (function () {\\n    function ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config) {\\n        this.configLoader = configLoader;\\n        this.urlSerializer = urlSerializer;\\n        this.urlTree = urlTree;\\n        this.config = config;\\n        this.allowRedirects = true;\\n        this.ngModule = moduleInjector.get(core[\"NgModuleRef\"]);\\n    }\\n    ApplyRedirects.prototype.apply = function () {\\n        var _this = this;\\n        var expanded$ = this.expandSegmentGroup(this.ngModule, this.config, this.urlTree.root, PRIMARY_OUTLET);\\n        var urlTrees$ = expanded$.pipe(Object(map[\"a\" /* map */])(function (rootSegmentGroup) { return _this.createUrlTree(rootSegmentGroup, _this.urlTree.queryParams, _this.urlTree.fragment); }));\\n        return urlTrees$.pipe(catchError(function (e) {\\n            if (e instanceof AbsoluteRedirect) {\\n                // after an absolute redirect we do not apply any more redirects!\\n                _this.allowRedirects = false;\\n                // we need to run matching, so we can fetch all lazy-loaded modules\\n                return _this.match(e.urlTree);\\n            }\\n            if (e instanceof NoMatch) {\\n                throw _this.noMatchError(e);\\n            }\\n            throw e;\\n        }));\\n    };\\n    ApplyRedirects.prototype.match = function (tree) {\\n        var _this = this;\\n        var expanded$ = this.expandSegmentGroup(this.ngModule, this.config, tree.root, PRIMARY_OUTLET);\\n        var mapped$ = expanded$.pipe(Object(map[\"a\" /* map */])(function (rootSegmentGroup) {\\n            return _this.createUrlTree(rootSegmentGroup, tree.queryParams, tree.fragment);\\n        }));\\n        return mapped$.pipe(catchError(function (e) {\\n            if (e instanceof NoMatch) {\\n                throw _this.noMatchError(e);\\n            }\\n            throw e;\\n        }));\\n    };\\n    ApplyRedirects.prototype.noMatchError = function (e) {\\n        return new Error(\"Cannot match any routes. URL Segment: \\'\" + e.segmentGroup + \"\\'\");\\n    };\\n    ApplyRedirects.prototype.createUrlTree = function (rootCandidate, queryParams, fragment) {\\n        var _a;\\n        var root = rootCandidate.segments.length > 0 ?\\n            new UrlSegmentGroup([], (_a = {}, _a[PRIMARY_OUTLET] = rootCandidate, _a)) :\\n            rootCandidate;\\n        return new UrlTree(root, queryParams, fragment);\\n    };\\n    ApplyRedirects.prototype.expandSegmentGroup = function (ngModule, routes, segmentGroup, outlet) {\\n        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\\n            return this.expandChildren(ngModule, routes, segmentGroup)\\n                .pipe(Object(map[\"a\" /* map */])(function (children) { return new UrlSegmentGroup([], children); }));\\n        }\\n        return this.expandSegment(ngModule, segmentGroup, routes, segmentGroup.segments, outlet, true);\\n    };\\n    // Recursively expand segment groups for all the child outlets\\n    ApplyRedirects.prototype.expandChildren = function (ngModule, routes, segmentGroup) {\\n        var _this = this;\\n        return waitForMap(segmentGroup.children, function (childOutlet, child) { return _this.expandSegmentGroup(ngModule, routes, child, childOutlet); });\\n    };\\n    ApplyRedirects.prototype.expandSegment = function (ngModule, segmentGroup, routes, segments, outlet, allowRedirects) {\\n        var _this = this;\\n        return of[\"a\" /* of */].apply(void 0, Object(tslib_es6[\"g\" /* __spread */])(routes)).pipe(Object(map[\"a\" /* map */])(function (r) {\\n            var expanded$ = _this.expandSegmentAgainstRoute(ngModule, segmentGroup, routes, r, segments, outlet, allowRedirects);\\n            return expanded$.pipe(catchError(function (e) {\\n                if (e instanceof NoMatch) {\\n                    // TODO(i): this return type doesn\\'t match the declared Observable<UrlSegmentGroup> -\\n                    // talk to Jason\\n                    return Object(of[\"a\" /* of */])(null);\\n                }\\n                throw e;\\n            }));\\n        }), Object(concatAll[\"a\" /* concatAll */])(), first(function (s) { return !!s; }), catchError(function (e, _) {\\n            if (e instanceof EmptyError[\"a\" /* EmptyError */] || e.name === \\'EmptyError\\') {\\n                if (_this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\\n                    return Object(of[\"a\" /* of */])(new UrlSegmentGroup([], {}));\\n                }\\n                throw new NoMatch(segmentGroup);\\n            }\\n            throw e;\\n        }));\\n    };\\n    ApplyRedirects.prototype.noLeftoversInUrl = function (segmentGroup, segments, outlet) {\\n        return segments.length === 0 && !segmentGroup.children[outlet];\\n    };\\n    ApplyRedirects.prototype.expandSegmentAgainstRoute = function (ngModule, segmentGroup, routes, route, paths, outlet, allowRedirects) {\\n        if (getOutlet(route) !== outlet) {\\n            return noMatch(segmentGroup);\\n        }\\n        if (route.redirectTo === undefined) {\\n            return this.matchSegmentAgainstRoute(ngModule, segmentGroup, route, paths);\\n        }\\n        if (allowRedirects && this.allowRedirects) {\\n            return this.expandSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, paths, outlet);\\n        }\\n        return noMatch(segmentGroup);\\n    };\\n    ApplyRedirects.prototype.expandSegmentAgainstRouteUsingRedirect = function (ngModule, segmentGroup, routes, route, segments, outlet) {\\n        if (route.path === \\'**\\') {\\n            return this.expandWildCardWithParamsAgainstRouteUsingRedirect(ngModule, routes, route, outlet);\\n        }\\n        return this.expandRegularSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet);\\n    };\\n    ApplyRedirects.prototype.expandWildCardWithParamsAgainstRouteUsingRedirect = function (ngModule, routes, route, outlet) {\\n        var _this = this;\\n        var newTree = this.applyRedirectCommands([], route.redirectTo, {});\\n        if (route.redirectTo.startsWith(\\'/\\')) {\\n            return absoluteRedirect(newTree);\\n        }\\n        return this.lineralizeSegments(route, newTree).pipe(Object(mergeMap[\"a\" /* mergeMap */])(function (newSegments) {\\n            var group = new UrlSegmentGroup(newSegments, {});\\n            return _this.expandSegment(ngModule, group, routes, newSegments, outlet, false);\\n        }));\\n    };\\n    ApplyRedirects.prototype.expandRegularSegmentAgainstRouteUsingRedirect = function (ngModule, segmentGroup, routes, route, segments, outlet) {\\n        var _this = this;\\n        var _a = match(segmentGroup, route, segments), matched = _a.matched, consumedSegments = _a.consumedSegments, lastChild = _a.lastChild, positionalParamSegments = _a.positionalParamSegments;\\n        if (!matched)\\n            return noMatch(segmentGroup);\\n        var newTree = this.applyRedirectCommands(consumedSegments, route.redirectTo, positionalParamSegments);\\n        if (route.redirectTo.startsWith(\\'/\\')) {\\n            return absoluteRedirect(newTree);\\n        }\\n        return this.lineralizeSegments(route, newTree).pipe(Object(mergeMap[\"a\" /* mergeMap */])(function (newSegments) {\\n            return _this.expandSegment(ngModule, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet, false);\\n        }));\\n    };\\n    ApplyRedirects.prototype.matchSegmentAgainstRoute = function (ngModule, rawSegmentGroup, route, segments) {\\n        var _this = this;\\n        if (route.path === \\'**\\') {\\n            if (route.loadChildren) {\\n                return this.configLoader.load(ngModule.injector, route)\\n                    .pipe(Object(map[\"a\" /* map */])(function (cfg) {\\n                    route._loadedConfig = cfg;\\n                    return new UrlSegmentGroup(segments, {});\\n                }));\\n            }\\n            return Object(of[\"a\" /* of */])(new UrlSegmentGroup(segments, {}));\\n        }\\n        var _a = match(rawSegmentGroup, route, segments), matched = _a.matched, consumedSegments = _a.consumedSegments, lastChild = _a.lastChild;\\n        if (!matched)\\n            return noMatch(rawSegmentGroup);\\n        var rawSlicedSegments = segments.slice(lastChild);\\n        var childConfig$ = this.getChildConfig(ngModule, route, segments);\\n        return childConfig$.pipe(Object(mergeMap[\"a\" /* mergeMap */])(function (routerConfig) {\\n            var childModule = routerConfig.module;\\n            var childConfig = routerConfig.routes;\\n            var _a = split(rawSegmentGroup, consumedSegments, rawSlicedSegments, childConfig), segmentGroup = _a.segmentGroup, slicedSegments = _a.slicedSegments;\\n            if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\\n                var expanded$_1 = _this.expandChildren(childModule, childConfig, segmentGroup);\\n                return expanded$_1.pipe(Object(map[\"a\" /* map */])(function (children) { return new UrlSegmentGroup(consumedSegments, children); }));\\n            }\\n            if (childConfig.length === 0 && slicedSegments.length === 0) {\\n                return Object(of[\"a\" /* of */])(new UrlSegmentGroup(consumedSegments, {}));\\n            }\\n            var expanded$ = _this.expandSegment(childModule, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);\\n            return expanded$.pipe(Object(map[\"a\" /* map */])(function (cs) {\\n                return new UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children);\\n            }));\\n        }));\\n    };\\n    ApplyRedirects.prototype.getChildConfig = function (ngModule, route, segments) {\\n        var _this = this;\\n        if (route.children) {\\n            // The children belong to the same module\\n            return Object(of[\"a\" /* of */])(new LoadedRouterConfig(route.children, ngModule));\\n        }\\n        if (route.loadChildren) {\\n            // lazy children belong to the loaded module\\n            if (route._loadedConfig !== undefined) {\\n                return Object(of[\"a\" /* of */])(route._loadedConfig);\\n            }\\n            return runCanLoadGuard(ngModule.injector, route, segments)\\n                .pipe(Object(mergeMap[\"a\" /* mergeMap */])(function (shouldLoad) {\\n                if (shouldLoad) {\\n                    return _this.configLoader.load(ngModule.injector, route)\\n                        .pipe(Object(map[\"a\" /* map */])(function (cfg) {\\n                        route._loadedConfig = cfg;\\n                        return cfg;\\n                    }));\\n                }\\n                return canLoadFails(route);\\n            }));\\n        }\\n        return Object(of[\"a\" /* of */])(new LoadedRouterConfig([], ngModule));\\n    };\\n    ApplyRedirects.prototype.lineralizeSegments = function (route, urlTree) {\\n        var res = [];\\n        var c = urlTree.root;\\n        while (true) {\\n            res = res.concat(c.segments);\\n            if (c.numberOfChildren === 0) {\\n                return Object(of[\"a\" /* of */])(res);\\n            }\\n            if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {\\n                return namedOutletsRedirect(route.redirectTo);\\n            }\\n            c = c.children[PRIMARY_OUTLET];\\n        }\\n    };\\n    ApplyRedirects.prototype.applyRedirectCommands = function (segments, redirectTo, posParams) {\\n        return this.applyRedirectCreatreUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);\\n    };\\n    ApplyRedirects.prototype.applyRedirectCreatreUrlTree = function (redirectTo, urlTree, segments, posParams) {\\n        var newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);\\n        return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);\\n    };\\n    ApplyRedirects.prototype.createQueryParams = function (redirectToParams, actualParams) {\\n        var res = {};\\n        forEach(redirectToParams, function (v, k) {\\n            var copySourceValue = typeof v === \\'string\\' && v.startsWith(\\':\\');\\n            if (copySourceValue) {\\n                var sourceName = v.substring(1);\\n                res[k] = actualParams[sourceName];\\n            }\\n            else {\\n                res[k] = v;\\n            }\\n        });\\n        return res;\\n    };\\n    ApplyRedirects.prototype.createSegmentGroup = function (redirectTo, group, segments, posParams) {\\n        var _this = this;\\n        var updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);\\n        var children = {};\\n        forEach(group.children, function (child, name) {\\n            children[name] = _this.createSegmentGroup(redirectTo, child, segments, posParams);\\n        });\\n        return new UrlSegmentGroup(updatedSegments, children);\\n    };\\n    ApplyRedirects.prototype.createSegments = function (redirectTo, redirectToSegments, actualSegments, posParams) {\\n        var _this = this;\\n        return redirectToSegments.map(function (s) { return s.path.startsWith(\\':\\') ? _this.findPosParam(redirectTo, s, posParams) :\\n            _this.findOrReturn(s, actualSegments); });\\n    };\\n    ApplyRedirects.prototype.findPosParam = function (redirectTo, redirectToUrlSegment, posParams) {\\n        var pos = posParams[redirectToUrlSegment.path.substring(1)];\\n        if (!pos)\\n            throw new Error(\"Cannot redirect to \\'\" + redirectTo + \"\\'. Cannot find \\'\" + redirectToUrlSegment.path + \"\\'.\");\\n        return pos;\\n    };\\n    ApplyRedirects.prototype.findOrReturn = function (redirectToUrlSegment, actualSegments) {\\n        var e_1, _a;\\n        var idx = 0;\\n        try {\\n            for (var actualSegments_1 = Object(tslib_es6[\"h\" /* __values */])(actualSegments), actualSegments_1_1 = actualSegments_1.next(); !actualSegments_1_1.done; actualSegments_1_1 = actualSegments_1.next()) {\\n                var s = actualSegments_1_1.value;\\n                if (s.path === redirectToUrlSegment.path) {\\n                    actualSegments.splice(idx);\\n                    return s;\\n                }\\n                idx++;\\n            }\\n        }\\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\\n        finally {\\n            try {\\n                if (actualSegments_1_1 && !actualSegments_1_1.done && (_a = actualSegments_1.return)) _a.call(actualSegments_1);\\n            }\\n            finally { if (e_1) throw e_1.error; }\\n        }\\n        return redirectToUrlSegment;\\n    };\\n    return ApplyRedirects;\\n}());\\nfunction runCanLoadGuard(moduleInjector, route, segments) {\\n    var canLoad = route.canLoad;\\n    if (!canLoad || canLoad.length === 0)\\n        return Object(of[\"a\" /* of */])(true);\\n    var obs = Object(from[\"a\" /* from */])(canLoad).pipe(Object(map[\"a\" /* map */])(function (injectionToken) {\\n        var guard = moduleInjector.get(injectionToken);\\n        return wrapIntoObservable(guard.canLoad ? guard.canLoad(route, segments) : guard(route, segments));\\n    }));\\n    return andObservables(obs);\\n}\\nfunction match(segmentGroup, route, segments) {\\n    if (route.path === \\'\\') {\\n        if ((route.pathMatch === \\'full\\') && (segmentGroup.hasChildren() || segments.length > 0)) {\\n            return { matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };\\n        }\\n        return { matched: true, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };\\n    }\\n    var matcher = route.matcher || defaultUrlMatcher;\\n    var res = matcher(segments, segmentGroup, route);\\n    if (!res) {\\n        return {\\n            matched: false,\\n            consumedSegments: [],\\n            lastChild: 0,\\n            positionalParamSegments: {},\\n        };\\n    }\\n    return {\\n        matched: true,\\n        consumedSegments: res.consumed,\\n        lastChild: res.consumed.length,\\n        positionalParamSegments: res.posParams,\\n    };\\n}\\nfunction split(segmentGroup, consumedSegments, slicedSegments, config) {\\n    if (slicedSegments.length > 0 &&\\n        containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {\\n        var s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptySegments(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\\n        return { segmentGroup: mergeTrivialChildren(s), slicedSegments: [] };\\n    }\\n    if (slicedSegments.length === 0 &&\\n        containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {\\n        var s = new UrlSegmentGroup(segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));\\n        return { segmentGroup: mergeTrivialChildren(s), slicedSegments: slicedSegments };\\n    }\\n    return { segmentGroup: segmentGroup, slicedSegments: slicedSegments };\\n}\\nfunction mergeTrivialChildren(s) {\\n    if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {\\n        var c = s.children[PRIMARY_OUTLET];\\n        return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);\\n    }\\n    return s;\\n}\\nfunction addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {\\n    var e_2, _a;\\n    var res = {};\\n    try {\\n        for (var routes_1 = Object(tslib_es6[\"h\" /* __values */])(routes), routes_1_1 = routes_1.next(); !routes_1_1.done; routes_1_1 = routes_1.next()) {\\n            var r = routes_1_1.value;\\n            if (isEmptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\\n                res[getOutlet(r)] = new UrlSegmentGroup([], {});\\n            }\\n        }\\n    }\\n    catch (e_2_1) { e_2 = { error: e_2_1 }; }\\n    finally {\\n        try {\\n            if (routes_1_1 && !routes_1_1.done && (_a = routes_1.return)) _a.call(routes_1);\\n        }\\n        finally { if (e_2) throw e_2.error; }\\n    }\\n    return Object(tslib_es6[\"a\" /* __assign */])({}, children, res);\\n}\\nfunction createChildrenForEmptySegments(routes, primarySegmentGroup) {\\n    var e_3, _a;\\n    var res = {};\\n    res[PRIMARY_OUTLET] = primarySegmentGroup;\\n    try {\\n        for (var routes_2 = Object(tslib_es6[\"h\" /* __values */])(routes), routes_2_1 = routes_2.next(); !routes_2_1.done; routes_2_1 = routes_2.next()) {\\n            var r = routes_2_1.value;\\n            if (r.path === \\'\\' && getOutlet(r) !== PRIMARY_OUTLET) {\\n                res[getOutlet(r)] = new UrlSegmentGroup([], {});\\n            }\\n        }\\n    }\\n    catch (e_3_1) { e_3 = { error: e_3_1 }; }\\n    finally {\\n        try {\\n            if (routes_2_1 && !routes_2_1.done && (_a = routes_2.return)) _a.call(routes_2);\\n        }\\n        finally { if (e_3) throw e_3.error; }\\n    }\\n    return res;\\n}\\nfunction containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, segments, routes) {\\n    return routes.some(function (r) { return isEmptyPathRedirect(segmentGroup, segments, r) && getOutlet(r) !== PRIMARY_OUTLET; });\\n}\\nfunction containsEmptyPathRedirects(segmentGroup, segments, routes) {\\n    return routes.some(function (r) { return isEmptyPathRedirect(segmentGroup, segments, r); });\\n}\\nfunction isEmptyPathRedirect(segmentGroup, segments, r) {\\n    if ((segmentGroup.hasChildren() || segments.length > 0) && r.pathMatch === \\'full\\') {\\n        return false;\\n    }\\n    return r.path === \\'\\' && r.redirectTo !== undefined;\\n}\\nfunction getOutlet(route) {\\n    return route.outlet || PRIMARY_OUTLET;\\n}\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\nfunction applyRedirects$1(moduleInjector, configLoader, urlSerializer, config) {\\n    return function (source) {\\n        return source.pipe(switchMap(function (t) { return applyRedirects(moduleInjector, configLoader, urlSerializer, t.extractedUrl, config)\\n            .pipe(Object(map[\"a\" /* map */])(function (urlAfterRedirects) { return (Object(tslib_es6[\"a\" /* __assign */])({}, t, { urlAfterRedirects: urlAfterRedirects })); })); }));\\n    };\\n}\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\nvar CanActivate = /** @class */ (function () {\\n    function CanActivate(path) {\\n        this.path = path;\\n        this.route = this.path[this.path.length - 1];\\n    }\\n    return CanActivate;\\n}());\\nvar CanDeactivate = /** @class */ (function () {\\n    function CanDeactivate(component, route) {\\n        this.component = component;\\n        this.route = route;\\n    }\\n    return CanDeactivate;\\n}());\\nfunction getAllRouteGuards(future, curr, parentContexts) {\\n    var futureRoot = future._root;\\n    var currRoot = curr ? curr._root : null;\\n    return getChildRouteGuards(futureRoot, currRoot, parentContexts, [futureRoot.value]);\\n}\\nfunction getCanActivateChild(p) {\\n    var canActivateChild = p.routeConfig ? p.routeConfig.canActivateChild : null;\\n    if (!canActivateChild || canActivateChild.length === 0)\\n        return null;\\n    return { node: p, guards: canActivateChild };\\n}\\nfunction getToken(token, snapshot, moduleInjector) {\\n    var config = getClosestLoadedConfig(snapshot);\\n    var injector = config ? config.module.injector : moduleInjector;\\n    return injector.get(token);\\n}\\nfunction getClosestLoadedConfig(snapshot) {\\n    if (!snapshot)\\n        return null;\\n    for (var s = snapshot.parent; s; s = s.parent) {\\n        var route = s.routeConfig;\\n        if (route && route._loadedConfig)\\n            return route._loadedConfig;\\n    }\\n    return null;\\n}\\nfunction getChildRouteGuards(futureNode, currNode, contexts, futurePath, checks) {\\n    if (checks === void 0) { checks = {\\n        canDeactivateChecks: [],\\n        canActivateChecks: []\\n    }; }\\n    var prevChildren = nodeChildrenAsMap(currNode);\\n    // Process the children of the future route\\n    futureNode.children.forEach(function (c) {\\n        getRouteGuards(c, prevChildren[c.value.outlet], contexts, futurePath.concat([c.value]), checks);\\n        delete prevChildren[c.value.outlet];\\n    });\\n    // Process any children left from the current route (not active for the future route)\\n    forEach(prevChildren, function (v, k) {\\n        return deactivateRouteAndItsChildren(v, contexts.getContext(k), checks);\\n    });\\n    return checks;\\n}\\nfunction getRouteGuards(futureNode, currNode, parentContexts, futurePath, checks) {\\n    if (checks === void 0) { checks = {\\n        canDeactivateChecks: [],\\n        canActivateChecks: []\\n    }; }\\n    var future = futureNode.value;\\n    var curr = currNode ? currNode.value : null;\\n    var context = parentContexts ? parentContexts.getContext(futureNode.value.outlet) : null;\\n    // reusing the node\\n    if (curr && future.routeConfig === curr.routeConfig) {\\n        var shouldRun = shouldRunGuardsAndResolvers(curr, future, future.routeConfig.runGuardsAndResolvers);\\n        if (shouldRun) {\\n            checks.canActivateChecks.push(new CanActivate(futurePath));\\n        }\\n        else {\\n            // we need to set the data\\n            future.data = curr.data;\\n            future._resolvedData = curr._resolvedData;\\n        }\\n        // If we have a component, we need to go through an outlet.\\n        if (future.component) {\\n            getChildRouteGuards(futureNode, currNode, context ? context.children : null, futurePath, checks);\\n            // if we have a componentless route, we recurse but keep the same outlet map.\\n        }\\n        else {\\n            getChildRouteGuards(futureNode, currNode, parentContexts, futurePath, checks);\\n        }\\n        if (shouldRun) {\\n            var component = context && context.outlet && context.outlet.component || null;\\n            checks.canDeactivateChecks.push(new CanDeactivate(component, curr));\\n        }\\n    }\\n    else {\\n        if (curr) {\\n            deactivateRouteAndItsChildren(currNode, context, checks);\\n        }\\n        checks.canActivateChecks.push(new CanActivate(futurePath));\\n        // If we have a component, we need to go through an outlet.\\n        if (future.component) {\\n            getChildRouteGuards(futureNode, null, context ? context.children : null, futurePath, checks);\\n            // if we have a componentless route, we recurse but keep the same outlet map.\\n        }\\n        else {\\n            getChildRouteGuards(futureNode, null, parentContexts, futurePath, checks);\\n        }\\n    }\\n    return checks;\\n}\\nfunction shouldRunGuardsAndResolvers(curr, future, mode) {\\n    switch (mode) {\\n        case \\'always\\':\\n            return true;\\n        case \\'paramsOrQueryParamsChange\\':\\n            return !equalParamsAndUrlSegments(curr, future) ||\\n                !shallowEqual(curr.queryParams, future.queryParams);\\n        case \\'paramsChange\\':\\n        default:\\n            return !equalParamsAndUrlSegments(curr, future);\\n    }\\n}\\nfunction deactivateRouteAndItsChildren(route, context, checks) {\\n    var children = nodeChildrenAsMap(route);\\n    var r = route.value;\\n    forEach(children, function (node, childName) {\\n        if (!r.component) {\\n            deactivateRouteAndItsChildren(node, context, checks);\\n        }\\n        else if (context) {\\n            deactivateRouteAndItsChildren(node, context.children.getContext(childName), checks);\\n        }\\n        else {\\n            deactivateRouteAndItsChildren(node, null, checks);\\n        }\\n    });\\n    if (!r.component) {\\n        checks.canDeactivateChecks.push(new CanDeactivate(null, r));\\n    }\\n    else if (context && context.outlet && context.outlet.isActivated) {\\n        checks.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, r));\\n    }\\n    else {\\n        checks.canDeactivateChecks.push(new CanDeactivate(null, r));\\n    }\\n}\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\nfunction checkGuards(moduleInjector, forwardEvent) {\\n    return function (source) {\\n        return source.pipe(Object(mergeMap[\"a\" /* mergeMap */])(function (t) {\\n            var targetSnapshot = t.targetSnapshot, currentSnapshot = t.currentSnapshot, _a = t.guards, canActivateChecks = _a.canActivateChecks, canDeactivateChecks = _a.canDeactivateChecks;\\n            if (canDeactivateChecks.length === 0 && canActivateChecks.length === 0) {\\n                return Object(of[\"a\" /* of */])(Object(tslib_es6[\"a\" /* __assign */])({}, t, { guardsResult: true }));\\n            }\\n            return runCanDeactivateChecks(canDeactivateChecks, targetSnapshot, currentSnapshot, moduleInjector)\\n                .pipe(Object(mergeMap[\"a\" /* mergeMap */])(function (canDeactivate) {\\n                return canDeactivate ?\\n                    runCanActivateChecks(targetSnapshot, canActivateChecks, moduleInjector, forwardEvent) :\\n                    Object(of[\"a\" /* of */])(false);\\n            }), Object(map[\"a\" /* map */])(function (guardsResult) { return (Object(tslib_es6[\"a\" /* __assign */])({}, t, { guardsResult: guardsResult })); }));\\n        }));\\n    };\\n}\\nfunction runCanDeactivateChecks(checks, futureRSS, currRSS, moduleInjector) {\\n    return Object(from[\"a\" /* from */])(checks).pipe(Object(mergeMap[\"a\" /* mergeMap */])(function (check) {\\n        return runCanDeactivate(check.component, check.route, currRSS, futureRSS, moduleInjector);\\n    }), every(function (result) { return result === true; }));\\n}\\nfunction runCanActivateChecks(futureSnapshot, checks, moduleInjector, forwardEvent) {\\n    return Object(from[\"a\" /* from */])(checks).pipe(concatMap(function (check) { return andObservables(Object(from[\"a\" /* from */])([\\n        fireChildActivationStart(check.route.parent, forwardEvent),\\n        fireActivationStart(check.route, forwardEvent),\\n        runCanActivateChild(futureSnapshot, check.path, moduleInjector),\\n        runCanActivate(futureSnapshot, check.route, moduleInjector)\\n    ])); }), every(function (result) { return result === true; }));\\n}\\n/**\\n   * This should fire off `ActivationStart` events for each route being activated at this\\n   * level.\\n   * In other words, if you\\'re activating `a` and `b` below, `path` will contain the\\n   * `ActivatedRouteSnapshot`s for both and we will fire `ActivationStart` for both. Always\\n   * return\\n   * `true` so checks continue to run.\\n   */\\nfunction fireActivationStart(snapshot, forwardEvent) {\\n    if (snapshot !== null && forwardEvent) {\\n        forwardEvent(new ActivationStart(snapshot));\\n    }\\n    return Object(of[\"a\" /* of */])(true);\\n}\\n/**\\n   * This should fire off `ChildActivationStart` events for each route being activated at this\\n   * level.\\n   * In other words, if you\\'re activating `a` and `b` below, `path` will contain the\\n   * `ActivatedRouteSnapshot`s for both and we will fire `ChildActivationStart` for both. Always\\n   * return\\n   * `true` so checks continue to run.\\n   */\\nfunction fireChildActivationStart(snapshot, forwardEvent) {\\n    if (snapshot !== null && forwardEvent) {\\n        forwardEvent(new ChildActivationStart(snapshot));\\n    }\\n    return Object(of[\"a\" /* of */])(true);\\n}\\nfunction runCanActivate(futureRSS, futureARS, moduleInjector) {\\n    var canActivate = futureARS.routeConfig ? futureARS.routeConfig.canActivate : null;\\n    if (!canActivate || canActivate.length === 0)\\n        return Object(of[\"a\" /* of */])(true);\\n    var obs = Object(from[\"a\" /* from */])(canActivate).pipe(Object(map[\"a\" /* map */])(function (c) {\\n        var guard = getToken(c, futureARS, moduleInjector);\\n        var observable;\\n        if (guard.canActivate) {\\n            observable = wrapIntoObservable(guard.canActivate(futureARS, futureRSS));\\n        }\\n        else {\\n            observable = wrapIntoObservable(guard(futureARS, futureRSS));\\n        }\\n        return observable.pipe(first());\\n    }));\\n    return andObservables(obs);\\n}\\nfunction runCanActivateChild(futureRSS, path, moduleInjector) {\\n    var futureARS = path[path.length - 1];\\n    var canActivateChildGuards = path.slice(0, path.length - 1)\\n        .reverse()\\n        .map(function (p) { return getCanActivateChild(p); })\\n        .filter(function (_) { return _ !== null; });\\n    return andObservables(Object(from[\"a\" /* from */])(canActivateChildGuards).pipe(Object(map[\"a\" /* map */])(function (d) {\\n        var obs = Object(from[\"a\" /* from */])(d.guards).pipe(Object(map[\"a\" /* map */])(function (c) {\\n            var guard = getToken(c, d.node, moduleInjector);\\n            var observable;\\n            if (guard.canActivateChild) {\\n                observable = wrapIntoObservable(guard.canActivateChild(futureARS, futureRSS));\\n            }\\n            else {\\n                observable = wrapIntoObservable(guard(futureARS, futureRSS));\\n            }\\n            return observable.pipe(first());\\n        }));\\n        return andObservables(obs);\\n    })));\\n}\\nfunction runCanDeactivate(component, currARS, currRSS, futureRSS, moduleInjector) {\\n    var canDeactivate = currARS && currARS.routeConfig ? currARS.routeConfig.canDeactivate : null;\\n    if (!canDeactivate || canDeactivate.length === 0)\\n        return Object(of[\"a\" /* of */])(true);\\n    var canDeactivate$ = Object(from[\"a\" /* from */])(canDeactivate).pipe(Object(mergeMap[\"a\" /* mergeMap */])(function (c) {\\n        var guard = getToken(c, currARS, moduleInjector);\\n        var observable;\\n        if (guard.canDeactivate) {\\n            observable = wrapIntoObservable(guard.canDeactivate(component, currARS, currRSS, futureRSS));\\n        }\\n        else {\\n            observable = wrapIntoObservable(guard(component, currARS, currRSS, futureRSS));\\n        }\\n        return observable.pipe(first());\\n    }));\\n    return canDeactivate$.pipe(every(function (result) { return result === true; }));\\n}\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\nvar NoMatch$1 = /** @class */ (function () {\\n    function NoMatch() {\\n    }\\n    return NoMatch;\\n}());\\nfunction recognize(rootComponentType, config, urlTree, url, paramsInheritanceStrategy, relativeLinkResolution) {\\n    if (paramsInheritanceStrategy === void 0) { paramsInheritanceStrategy = \\'emptyOnly\\'; }\\n    if (relativeLinkResolution === void 0) { relativeLinkResolution = \\'legacy\\'; }\\n    return new router_Recognizer(rootComponentType, config, urlTree, url, paramsInheritanceStrategy, relativeLinkResolution)\\n        .recognize();\\n}\\nvar router_Recognizer = /** @class */ (function () {\\n    function Recognizer(rootComponentType, config, urlTree, url, paramsInheritanceStrategy, relativeLinkResolution) {\\n        this.rootComponentType = rootComponentType;\\n        this.config = config;\\n        this.urlTree = urlTree;\\n        this.url = url;\\n        this.paramsInheritanceStrategy = paramsInheritanceStrategy;\\n        this.relativeLinkResolution = relativeLinkResolution;\\n    }\\n    Recognizer.prototype.recognize = function () {\\n        try {\\n            var rootSegmentGroup = split$1(this.urlTree.root, [], [], this.config, this.relativeLinkResolution).segmentGroup;\\n            var children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);\\n            var root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(Object(tslib_es6[\"a\" /* __assign */])({}, this.urlTree.queryParams)), this.urlTree.fragment, {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});\\n            var rootNode = new TreeNode(root, children);\\n            var routeState = new router_RouterStateSnapshot(this.url, rootNode);\\n            this.inheritParamsAndData(routeState._root);\\n            return Object(of[\"a\" /* of */])(routeState);\\n        }\\n        catch (e) {\\n            return new Observable[\"a\" /* Observable */](function (obs) { return obs.error(e); });\\n        }\\n    };\\n    Recognizer.prototype.inheritParamsAndData = function (routeNode) {\\n        var _this = this;\\n        var route = routeNode.value;\\n        var i = inheritedParamsDataResolve(route, this.paramsInheritanceStrategy);\\n        route.params = Object.freeze(i.params);\\n        route.data = Object.freeze(i.data);\\n        routeNode.children.forEach(function (n) { return _this.inheritParamsAndData(n); });\\n    };\\n    Recognizer.prototype.processSegmentGroup = function (config, segmentGroup, outlet) {\\n        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\\n            return this.processChildren(config, segmentGroup);\\n        }\\n        return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);\\n    };\\n    Recognizer.prototype.processChildren = function (config, segmentGroup) {\\n        var _this = this;\\n        var children = mapChildrenIntoArray(segmentGroup, function (child, childOutlet) { return _this.processSegmentGroup(config, child, childOutlet); });\\n        checkOutletNameUniqueness(children);\\n        sortActivatedRouteSnapshots(children);\\n        return children;\\n    };\\n    Recognizer.prototype.processSegment = function (config, segmentGroup, segments, outlet) {\\n        var e_1, _a;\\n        try {\\n            for (var config_1 = Object(tslib_es6[\"h\" /* __values */])(config), config_1_1 = config_1.next(); !config_1_1.done; config_1_1 = config_1.next()) {\\n                var r = config_1_1.value;\\n                try {\\n                    return this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);\\n                }\\n                catch (e) {\\n                    if (!(e instanceof NoMatch$1))\\n                        throw e;\\n                }\\n            }\\n        }\\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\\n        finally {\\n            try {\\n                if (config_1_1 && !config_1_1.done && (_a = config_1.return)) _a.call(config_1);\\n            }\\n            finally { if (e_1) throw e_1.error; }\\n        }\\n        if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\\n            return [];\\n        }\\n        throw new NoMatch$1();\\n    };\\n    Recognizer.prototype.noLeftoversInUrl = function (segmentGroup, segments, outlet) {\\n        return segments.length === 0 && !segmentGroup.children[outlet];\\n    };\\n    Recognizer.prototype.processSegmentAgainstRoute = function (route, rawSegment, segments, outlet) {\\n        if (route.redirectTo)\\n            throw new NoMatch$1();\\n        if ((route.outlet || PRIMARY_OUTLET) !== outlet)\\n            throw new NoMatch$1();\\n        var snapshot;\\n        var consumedSegments = [];\\n        var rawSlicedSegments = [];\\n        if (route.path === \\'**\\') {\\n            var params = segments.length > 0 ? last$1(segments).parameters : {};\\n            snapshot = new ActivatedRouteSnapshot(segments, params, Object.freeze(Object(tslib_es6[\"a\" /* __assign */])({}, this.urlTree.queryParams)), this.urlTree.fragment, getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length, getResolve(route));\\n        }\\n        else {\\n            var result = match$1(rawSegment, route, segments);\\n            consumedSegments = result.consumedSegments;\\n            rawSlicedSegments = segments.slice(result.lastChild);\\n            snapshot = new ActivatedRouteSnapshot(consumedSegments, result.parameters, Object.freeze(Object(tslib_es6[\"a\" /* __assign */])({}, this.urlTree.queryParams)), this.urlTree.fragment, getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));\\n        }\\n        var childConfig = getChildConfig(route);\\n        var _a = split$1(rawSegment, consumedSegments, rawSlicedSegments, childConfig, this.relativeLinkResolution), segmentGroup = _a.segmentGroup, slicedSegments = _a.slicedSegments;\\n        if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\\n            var children_1 = this.processChildren(childConfig, segmentGroup);\\n            return [new TreeNode(snapshot, children_1)];\\n        }\\n        if (childConfig.length === 0 && slicedSegments.length === 0) {\\n            return [new TreeNode(snapshot, [])];\\n        }\\n        var children = this.processSegment(childConfig, segmentGroup, slicedSegments, PRIMARY_OUTLET);\\n        return [new TreeNode(snapshot, children)];\\n    };\\n    return Recognizer;\\n}());\\nfunction sortActivatedRouteSnapshots(nodes) {\\n    nodes.sort(function (a, b) {\\n        if (a.value.outlet === PRIMARY_OUTLET)\\n            return -1;\\n        if (b.value.outlet === PRIMARY_OUTLET)\\n            return 1;\\n        return a.value.outlet.localeCompare(b.value.outlet);\\n    });\\n}\\nfunction getChildConfig(route) {\\n    if (route.children) {\\n        return route.children;\\n    }\\n    if (route.loadChildren) {\\n        return route._loadedConfig.routes;\\n    }\\n    return [];\\n}\\nfunction match$1(segmentGroup, route, segments) {\\n    if (route.path === \\'\\') {\\n        if (route.pathMatch === \\'full\\' && (segmentGroup.hasChildren() || segments.length > 0)) {\\n            throw new NoMatch$1();\\n        }\\n        return { consumedSegments: [], lastChild: 0, parameters: {} };\\n    }\\n    var matcher = route.matcher || defaultUrlMatcher;\\n    var res = matcher(segments, segmentGroup, route);\\n    if (!res)\\n        throw new NoMatch$1();\\n    var posParams = {};\\n    forEach(res.posParams, function (v, k) { posParams[k] = v.path; });\\n    var parameters = res.consumed.length > 0 ? Object(tslib_es6[\"a\" /* __assign */])({}, posParams, res.consumed[res.consumed.length - 1].parameters) :\\n        posParams;\\n    return { consumedSegments: res.consumed, lastChild: res.consumed.length, parameters: parameters };\\n}\\nfunction checkOutletNameUniqueness(nodes) {\\n    var names = {};\\n    nodes.forEach(function (n) {\\n        var routeWithSameOutletName = names[n.value.outlet];\\n        if (routeWithSameOutletName) {\\n            var p = routeWithSameOutletName.url.map(function (s) { return s.toString(); }).join(\\'/\\');\\n            var c = n.value.url.map(function (s) { return s.toString(); }).join(\\'/\\');\\n            throw new Error(\"Two segments cannot have the same outlet name: \\'\" + p + \"\\' and \\'\" + c + \"\\'.\");\\n        }\\n        names[n.value.outlet] = n.value;\\n    });\\n}\\nfunction getSourceSegmentGroup(segmentGroup) {\\n    var s = segmentGroup;\\n    while (s._sourceSegment) {\\n        s = s._sourceSegment;\\n    }\\n    return s;\\n}\\nfunction getPathIndexShift(segmentGroup) {\\n    var s = segmentGroup;\\n    var res = (s._segmentIndexShift ? s._segmentIndexShift : 0);\\n    while (s._sourceSegment) {\\n        s = s._sourceSegment;\\n        res += (s._segmentIndexShift ? s._segmentIndexShift : 0);\\n    }\\n    return res - 1;\\n}\\nfunction split$1(segmentGroup, consumedSegments, slicedSegments, config, relativeLinkResolution) {\\n    if (slicedSegments.length > 0 &&\\n        containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {\\n        var s_1 = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(segmentGroup, consumedSegments, config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\\n        s_1._sourceSegment = segmentGroup;\\n        s_1._segmentIndexShift = consumedSegments.length;\\n        return { segmentGroup: s_1, slicedSegments: [] };\\n    }\\n    if (slicedSegments.length === 0 &&\\n        containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {\\n        var s_2 = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, consumedSegments, slicedSegments, config, segmentGroup.children, relativeLinkResolution));\\n        s_2._sourceSegment = segmentGroup;\\n        s_2._segmentIndexShift = consumedSegments.length;\\n        return { segmentGroup: s_2, slicedSegments: slicedSegments };\\n    }\\n    var s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);\\n    s._sourceSegment = segmentGroup;\\n    s._segmentIndexShift = consumedSegments.length;\\n    return { segmentGroup: s, slicedSegments: slicedSegments };\\n}\\nfunction addEmptyPathsToChildrenIfNeeded(segmentGroup, consumedSegments, slicedSegments, routes, children, relativeLinkResolution) {\\n    var e_2, _a;\\n    var res = {};\\n    try {\\n        for (var routes_1 = Object(tslib_es6[\"h\" /* __values */])(routes), routes_1_1 = routes_1.next(); !routes_1_1.done; routes_1_1 = routes_1.next()) {\\n            var r = routes_1_1.value;\\n            if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet$1(r)]) {\\n                var s = new UrlSegmentGroup([], {});\\n                s._sourceSegment = segmentGroup;\\n                if (relativeLinkResolution === \\'legacy\\') {\\n                    s._segmentIndexShift = segmentGroup.segments.length;\\n                }\\n                else {\\n                    s._segmentIndexShift = consumedSegments.length;\\n                }\\n                res[getOutlet$1(r)] = s;\\n            }\\n        }\\n    }\\n    catch (e_2_1) { e_2 = { error: e_2_1 }; }\\n    finally {\\n        try {\\n            if (routes_1_1 && !routes_1_1.done && (_a = routes_1.return)) _a.call(routes_1);\\n        }\\n        finally { if (e_2) throw e_2.error; }\\n    }\\n    return Object(tslib_es6[\"a\" /* __assign */])({}, children, res);\\n}\\nfunction createChildrenForEmptyPaths(segmentGroup, consumedSegments, routes, primarySegment) {\\n    var e_3, _a;\\n    var res = {};\\n    res[PRIMARY_OUTLET] = primarySegment;\\n    primarySegment._sourceSegment = segmentGroup;\\n    primarySegment._segmentIndexShift = consumedSegments.length;\\n    try {\\n        for (var routes_2 = Object(tslib_es6[\"h\" /* __values */])(routes), routes_2_1 = routes_2.next(); !routes_2_1.done; routes_2_1 = routes_2.next()) {\\n            var r = routes_2_1.value;\\n            if (r.path === \\'\\' && getOutlet$1(r) !== PRIMARY_OUTLET) {\\n                var s = new UrlSegmentGroup([], {});\\n                s._sourceSegment = segmentGroup;\\n                s._segmentIndexShift = consumedSegments.length;\\n                res[getOutlet$1(r)] = s;\\n            }\\n        }\\n    }\\n    catch (e_3_1) { e_3 = { error: e_3_1 }; }\\n    finally {\\n        try {\\n            if (routes_2_1 && !routes_2_1.done && (_a = routes_2.return)) _a.call(routes_2);\\n        }\\n        finally { if (e_3) throw e_3.error; }\\n    }\\n    return res;\\n}\\nfunction containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {\\n    return routes.some(function (r) { return emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet$1(r) !== PRIMARY_OUTLET; });\\n}\\nfunction containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {\\n    return routes.some(function (r) { return emptyPathMatch(segmentGroup, slicedSegments, r); });\\n}\\nfunction emptyPathMatch(segmentGroup, slicedSegments, r) {\\n    if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === \\'full\\') {\\n        return false;\\n    }\\n    return r.path === \\'\\' && r.redirectTo === undefined;\\n}\\nfunction getOutlet$1(route) {\\n    return route.outlet || PRIMARY_OUTLET;\\n}\\nfunction getData(route) {\\n    return route.data || {};\\n}\\nfunction getResolve(route) {\\n    return route.resolve || {};\\n}\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\nfunction recognize$1(rootComponentType, config, serializer, paramsInheritanceStrategy, relativeLinkResolution) {\\n    return function (source) {\\n        return source.pipe(Object(mergeMap[\"a\" /* mergeMap */])(function (t) { return recognize(rootComponentType, config, t.urlAfterRedirects, serializer(t.urlAfterRedirects), paramsInheritanceStrategy, relativeLinkResolution)\\n            .pipe(Object(map[\"a\" /* map */])(function (targetSnapshot) { return (Object(tslib_es6[\"a\" /* __assign */])({}, t, { targetSnapshot: targetSnapshot })); })); }));\\n    };\\n}\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\nfunction resolveData(paramsInheritanceStrategy, moduleInjector) {\\n    return function (source) {\\n        return source.pipe(Object(mergeMap[\"a\" /* mergeMap */])(function (t) {\\n            var targetSnapshot = t.targetSnapshot, canActivateChecks = t.guards.canActivateChecks;\\n            if (!canActivateChecks.length) {\\n                return Object(of[\"a\" /* of */])(t);\\n            }\\n            return Object(from[\"a\" /* from */])(canActivateChecks)\\n                .pipe(concatMap(function (check) { return runResolve(check.route, targetSnapshot, paramsInheritanceStrategy, moduleInjector); }), reduce(function (_, __) { return _; }), Object(map[\"a\" /* map */])(function (_) { return t; }));\\n        }));\\n    };\\n}\\nfunction runResolve(futureARS, futureRSS, paramsInheritanceStrategy, moduleInjector) {\\n    var resolve = futureARS._resolve;\\n    return resolveNode(resolve, futureARS, futureRSS, moduleInjector)\\n        .pipe(Object(map[\"a\" /* map */])(function (resolvedData) {\\n        futureARS._resolvedData = resolvedData;\\n        futureARS.data = Object(tslib_es6[\"a\" /* __assign */])({}, futureARS.data, inheritedParamsDataResolve(futureARS, paramsInheritanceStrategy).resolve);\\n        return null;\\n    }));\\n}\\nfunction resolveNode(resolve, futureARS, futureRSS, moduleInjector) {\\n    var keys = Object.keys(resolve);\\n    if (keys.length === 0) {\\n        return Object(of[\"a\" /* of */])({});\\n    }\\n    if (keys.length === 1) {\\n        var key_1 = keys[0];\\n        return getResolver(resolve[key_1], futureARS, futureRSS, moduleInjector)\\n            .pipe(Object(map[\"a\" /* map */])(function (value) {\\n            var _a;\\n            return _a = {}, _a[key_1] = value, _a;\\n        }));\\n    }\\n    var data = {};\\n    var runningResolvers$ = Object(from[\"a\" /* from */])(keys).pipe(Object(mergeMap[\"a\" /* mergeMap */])(function (key) {\\n        return getResolver(resolve[key], futureARS, futureRSS, moduleInjector)\\n            .pipe(Object(map[\"a\" /* map */])(function (value) {\\n            data[key] = value;\\n            return value;\\n        }));\\n    }));\\n    return runningResolvers$.pipe(last(), Object(map[\"a\" /* map */])(function () { return data; }));\\n}\\nfunction getResolver(injectionToken, futureARS, futureRSS, moduleInjector) {\\n    var resolver = getToken(injectionToken, futureARS, moduleInjector);\\n    return resolver.resolve ? wrapIntoObservable(resolver.resolve(futureARS, futureRSS)) :\\n        wrapIntoObservable(resolver(futureARS, futureRSS));\\n}\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n/**\\n * Perform a side effect through a switchMap for every emission on the source Observable,\\n * but return an Observable that is identical to the source. It\\'s essentially the same as\\n * the `tap` operator, but if the side effectful `next` function returns an ObservableInput,\\n * it will wait before continuing with the original value.\\n */\\nfunction switchTap(next) {\\n    return function (source) {\\n        return source.pipe(switchMap(function (v) {\\n            var nextResult = next(v);\\n            if (nextResult) {\\n                return Object(from[\"a\" /* from */])(nextResult).pipe(Object(map[\"a\" /* map */])(function () { return v; }));\\n            }\\n            return Object(from[\"a\" /* from */])([v]);\\n        }));\\n    };\\n}\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n/**\\n * @description\\n *\\n * Provides a way to customize when activated routes get reused.\\n *\\n * @publicApi\\n */\\nvar RouteReuseStrategy = /** @class */ (function () {\\n    function RouteReuseStrategy() {\\n    }\\n    return RouteReuseStrategy;\\n}());\\n/**\\n * Does not detach any subtrees. Reuses routes as long as their route config is the same.\\n */\\nvar DefaultRouteReuseStrategy = /** @class */ (function () {\\n    function DefaultRouteReuseStrategy() {\\n    }\\n    DefaultRouteReuseStrategy.prototype.shouldDetach = function (route) { return false; };\\n    DefaultRouteReuseStrategy.prototype.store = function (route, detachedTree) { };\\n    DefaultRouteReuseStrategy.prototype.shouldAttach = function (route) { return false; };\\n    DefaultRouteReuseStrategy.prototype.retrieve = function (route) { return null; };\\n    DefaultRouteReuseStrategy.prototype.shouldReuseRoute = function (future, curr) {\\n        return future.routeConfig === curr.routeConfig;\\n    };\\n    return DefaultRouteReuseStrategy;\\n}());\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n/**\\n * @docsNotRequired\\n * @publicApi\\n */\\nvar ROUTES = new core[\"InjectionToken\"](\\'ROUTES\\');\\nvar router_RouterConfigLoader = /** @class */ (function () {\\n    function RouterConfigLoader(loader, compiler, onLoadStartListener, onLoadEndListener) {\\n        this.loader = loader;\\n        this.compiler = compiler;\\n        this.onLoadStartListener = onLoadStartListener;\\n        this.onLoadEndListener = onLoadEndListener;\\n    }\\n    RouterConfigLoader.prototype.load = function (parentInjector, route) {\\n        var _this = this;\\n        if (this.onLoadStartListener) {\\n            this.onLoadStartListener(route);\\n        }\\n        var moduleFactory$ = this.loadModuleFactory(route.loadChildren);\\n        return moduleFactory$.pipe(Object(map[\"a\" /* map */])(function (factory) {\\n            if (_this.onLoadEndListener) {\\n                _this.onLoadEndListener(route);\\n            }\\n            var module = factory.create(parentInjector);\\n            return new LoadedRouterConfig(flatten(module.injector.get(ROUTES)).map(standardizeConfig), module);\\n        }));\\n    };\\n    RouterConfigLoader.prototype.loadModuleFactory = function (loadChildren) {\\n        var _this = this;\\n        if (typeof loadChildren === \\'string\\') {\\n            return Object(from[\"a\" /* from */])(this.loader.load(loadChildren));\\n        }\\n        else {\\n            return wrapIntoObservable(loadChildren()).pipe(Object(mergeMap[\"a\" /* mergeMap */])(function (t) {\\n                if (t instanceof core[\"NgModuleFactory\"]) {\\n                    return Object(of[\"a\" /* of */])(t);\\n                }\\n                else {\\n                    return Object(from[\"a\" /* from */])(_this.compiler.compileModuleAsync(t));\\n                }\\n            }));\\n        }\\n    };\\n    return RouterConfigLoader;\\n}());\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n/**\\n * @description\\n *\\n * Provides a way to migrate AngularJS applications to Angular.\\n *\\n * @publicApi\\n */\\nvar UrlHandlingStrategy = /** @class */ (function () {\\n    function UrlHandlingStrategy() {\\n    }\\n    return UrlHandlingStrategy;\\n}());\\n/**\\n * @publicApi\\n */\\nvar DefaultUrlHandlingStrategy = /** @class */ (function () {\\n    function DefaultUrlHandlingStrategy() {\\n    }\\n    DefaultUrlHandlingStrategy.prototype.shouldProcessUrl = function (url) { return true; };\\n    DefaultUrlHandlingStrategy.prototype.extract = function (url) { return url; };\\n    DefaultUrlHandlingStrategy.prototype.merge = function (newUrlPart, wholeUrl) { return newUrlPart; };\\n    return DefaultUrlHandlingStrategy;\\n}());\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\nfunction defaultErrorHandler(error) {\\n    throw error;\\n}\\nfunction defaultMalformedUriErrorHandler(error, urlSerializer, url) {\\n    return urlSerializer.parse(\\'/\\');\\n}\\n/**\\n * @internal\\n */\\nfunction defaultRouterHook(snapshot, runExtras) {\\n    return Object(of[\"a\" /* of */])(null);\\n}\\n/**\\n * @description\\n *\\n * Provides the navigation and url manipulation capabilities.\\n *\\n * See `Routes` for more details and examples.\\n *\\n * @ngModule RouterModule\\n *\\n * @publicApi\\n */\\nvar router_Router = /** @class */ (function () {\\n    /**\\n     * Creates the router service.\\n     */\\n    // TODO: vsavkin make internal after the final is out.\\n    function Router(rootComponentType, urlSerializer, rootContexts, location, injector, loader, compiler, config) {\\n        var _this = this;\\n        this.rootComponentType = rootComponentType;\\n        this.urlSerializer = urlSerializer;\\n        this.rootContexts = rootContexts;\\n        this.location = location;\\n        this.config = config;\\n        this.navigationId = 0;\\n        this.isNgZoneEnabled = false;\\n        this.events = new Subject[\"a\" /* Subject */]();\\n        /**\\n         * Error handler that is invoked when a navigation errors.\\n         *\\n         * See `ErrorHandler` for more information.\\n         */\\n        this.errorHandler = defaultErrorHandler;\\n        /**\\n         * Malformed uri error handler is invoked when `Router.parseUrl(url)` throws an\\n         * error due to containing an invalid character. The most common case would be a `%` sign\\n         * that\\'s not encoded and is not part of a percent encoded sequence.\\n         */\\n        this.malformedUriErrorHandler = defaultMalformedUriErrorHandler;\\n        /**\\n         * Indicates if at least one navigation happened.\\n         */\\n        this.navigated = false;\\n        this.lastSuccessfulId = -1;\\n        /**\\n         * Used by RouterModule. This allows us to\\n         * pause the navigation either before preactivation or after it.\\n         * @internal\\n         */\\n        this.hooks = {\\n            beforePreactivation: defaultRouterHook,\\n            afterPreactivation: defaultRouterHook\\n        };\\n        /**\\n         * Extracts and merges URLs. Used for AngularJS to Angular migrations.\\n         */\\n        this.urlHandlingStrategy = new DefaultUrlHandlingStrategy();\\n        this.routeReuseStrategy = new DefaultRouteReuseStrategy();\\n        /**\\n         * Define what the router should do if it receives a navigation request to the current URL.\\n         * By default, the router will ignore this navigation. However, this prevents features such\\n         * as a \"refresh\" button. Use this option to configure the behavior when navigating to the\\n         * current URL. Default is \\'ignore\\'.\\n         */\\n        this.onSameUrlNavigation = \\'ignore\\';\\n        /**\\n         * Defines how the router merges params, data and resolved data from parent to child\\n         * routes. Available options are:\\n         *\\n         * - `\\'emptyOnly\\'`, the default, only inherits parent params for path-less or component-less\\n         *   routes.\\n         * - `\\'always\\'`, enables unconditional inheritance of parent params.\\n         */\\n        this.paramsInheritanceStrategy = \\'emptyOnly\\';\\n        /**\\n         * Defines when the router updates the browser URL. The default behavior is to update after\\n         * successful navigation. However, some applications may prefer a mode where the URL gets\\n         * updated at the beginning of navigation. The most common use case would be updating the\\n         * URL early so if navigation fails, you can show an error message with the URL that failed.\\n         * Available options are:\\n         *\\n         * - `\\'deferred\\'`, the default, updates the browser URL after navigation has finished.\\n         * - `\\'eager\\'`, updates browser URL at the beginning of navigation.\\n         */\\n        this.urlUpdateStrategy = \\'deferred\\';\\n        /**\\n         * See {@link RouterModule} for more information.\\n         */\\n        this.relativeLinkResolution = \\'legacy\\';\\n        var onLoadStart = function (r) { return _this.triggerEvent(new RouteConfigLoadStart(r)); };\\n        var onLoadEnd = function (r) { return _this.triggerEvent(new RouteConfigLoadEnd(r)); };\\n        this.ngModule = injector.get(core[\"NgModuleRef\"]);\\n        this.console = injector.get(core[\"ɵConsole\"]);\\n        var ngZone = injector.get(core[\"NgZone\"]);\\n        this.isNgZoneEnabled = ngZone instanceof core[\"NgZone\"];\\n        this.resetConfig(config);\\n        this.currentUrlTree = createEmptyUrlTree();\\n        this.rawUrlTree = this.currentUrlTree;\\n        this.configLoader = new router_RouterConfigLoader(loader, compiler, onLoadStart, onLoadEnd);\\n        this.routerState = createEmptyState(this.currentUrlTree, this.rootComponentType);\\n        this.transitions = new BehaviorSubject[\"a\" /* BehaviorSubject */]({\\n            id: 0,\\n            currentUrlTree: this.currentUrlTree,\\n            currentRawUrl: this.currentUrlTree,\\n            extractedUrl: this.urlHandlingStrategy.extract(this.currentUrlTree),\\n            urlAfterRedirects: this.urlHandlingStrategy.extract(this.currentUrlTree),\\n            rawUrl: this.currentUrlTree,\\n            extras: {},\\n            resolve: null,\\n            reject: null,\\n            promise: Promise.resolve(true),\\n            source: \\'imperative\\',\\n            state: null,\\n            currentSnapshot: this.routerState.snapshot,\\n            targetSnapshot: null,\\n            currentRouterState: this.routerState,\\n            targetRouterState: null,\\n            guards: { canActivateChecks: [], canDeactivateChecks: [] },\\n            guardsResult: null,\\n        });\\n        this.navigations = this.setupNavigations(this.transitions);\\n        this.processNavigations();\\n    }\\n    Router.prototype.setupNavigations = function (transitions) {\\n        var _this = this;\\n        var eventsSubject = this.events;\\n        return transitions.pipe(filter(function (t) { return t.id !== 0; }), \\n        // Extract URL\\n        Object(map[\"a\" /* map */])(function (t) { return (Object(tslib_es6[\"a\" /* __assign */])({}, t, { extractedUrl: _this.urlHandlingStrategy.extract(t.rawUrl) })); }), \\n        // Using switchMap so we cancel executing navigations when a new one comes in\\n        switchMap(function (t) {\\n            var completed = false;\\n            var errored = false;\\n            return Object(of[\"a\" /* of */])(t).pipe(switchMap(function (t) {\\n                var urlTransition = !_this.navigated || t.extractedUrl.toString() !== _this.currentUrlTree.toString();\\n                var processCurrentUrl = (_this.onSameUrlNavigation === \\'reload\\' ? true : urlTransition) &&\\n                    _this.urlHandlingStrategy.shouldProcessUrl(t.rawUrl);\\n                if (processCurrentUrl) {\\n                    return Object(of[\"a\" /* of */])(t).pipe(\\n                    // Update URL if in `eager` update mode\\n                    tap(function (t) { return _this.urlUpdateStrategy === \\'eager\\' && !t.extras.skipLocationChange &&\\n                        _this.setBrowserUrl(t.rawUrl, !!t.extras.replaceUrl, t.id); }), \\n                    // Fire NavigationStart event\\n                    switchMap(function (t) {\\n                        var transition = _this.transitions.getValue();\\n                        eventsSubject.next(new router_NavigationStart(t.id, _this.serializeUrl(t.extractedUrl), t.source, t.state));\\n                        if (transition !== _this.transitions.getValue()) {\\n                            return empty[\"a\" /* EMPTY */];\\n                        }\\n                        return [t];\\n                    }), \\n                    // This delay is required to match old behavior that forced navigation to\\n                    // always be async\\n                    switchMap(function (t) { return Promise.resolve(t); }), \\n                    // ApplyRedirects\\n                    applyRedirects$1(_this.ngModule.injector, _this.configLoader, _this.urlSerializer, _this.config), \\n                    // Recognize\\n                    recognize$1(_this.rootComponentType, _this.config, function (url) { return _this.serializeUrl(url); }, _this.paramsInheritanceStrategy, _this.relativeLinkResolution), \\n                    // Fire RoutesRecognized\\n                    tap(function (t) {\\n                        var routesRecognized = new router_RoutesRecognized(t.id, _this.serializeUrl(t.extractedUrl), _this.serializeUrl(t.urlAfterRedirects), t.targetSnapshot);\\n                        eventsSubject.next(routesRecognized);\\n                    }));\\n                }\\n                else {\\n                    var processPreviousUrl = urlTransition && _this.rawUrlTree &&\\n                        _this.urlHandlingStrategy.shouldProcessUrl(_this.rawUrlTree);\\n                    /* When the current URL shouldn\\'t be processed, but the previous one was, we\\n                     * handle this \"error condition\" by navigating to the previously successful URL,\\n                     * but leaving the URL intact.*/\\n                    if (processPreviousUrl) {\\n                        var id = t.id, extractedUrl = t.extractedUrl, source = t.source, state = t.state, extras = t.extras;\\n                        var navStart = new router_NavigationStart(id, _this.serializeUrl(extractedUrl), source, state);\\n                        eventsSubject.next(navStart);\\n                        var targetSnapshot = createEmptyState(extractedUrl, _this.rootComponentType).snapshot;\\n                        return Object(of[\"a\" /* of */])(Object(tslib_es6[\"a\" /* __assign */])({}, t, { targetSnapshot: targetSnapshot, urlAfterRedirects: extractedUrl, extras: Object(tslib_es6[\"a\" /* __assign */])({}, extras, { skipLocationChange: false, replaceUrl: false }) }));\\n                    }\\n                    else {\\n                        /* When neither the current or previous URL can be processed, do nothing other\\n                         * than update router\\'s internal reference to the current \"settled\" URL. This\\n                         * way the next navigation will be coming from the current URL in the browser.\\n                         */\\n                        _this.rawUrlTree = t.rawUrl;\\n                        t.resolve(null);\\n                        return empty[\"a\" /* EMPTY */];\\n                    }\\n                }\\n            }), \\n            // Before Preactivation\\n            switchTap(function (t) {\\n                var targetSnapshot = t.targetSnapshot, navigationId = t.id, appliedUrlTree = t.extractedUrl, rawUrlTree = t.rawUrl, _a = t.extras, skipLocationChange = _a.skipLocationChange, replaceUrl = _a.replaceUrl;\\n                return _this.hooks.beforePreactivation(targetSnapshot, {\\n                    navigationId: navigationId,\\n                    appliedUrlTree: appliedUrlTree,\\n                    rawUrlTree: rawUrlTree,\\n                    skipLocationChange: !!skipLocationChange,\\n                    replaceUrl: !!replaceUrl,\\n                });\\n            }), \\n            // --- GUARDS ---\\n            tap(function (t) {\\n                var guardsStart = new router_GuardsCheckStart(t.id, _this.serializeUrl(t.extractedUrl), _this.serializeUrl(t.urlAfterRedirects), t.targetSnapshot);\\n                _this.triggerEvent(guardsStart);\\n            }), Object(map[\"a\" /* map */])(function (t) { return (Object(tslib_es6[\"a\" /* __assign */])({}, t, { guards: getAllRouteGuards(t.targetSnapshot, t.currentSnapshot, _this.rootContexts) })); }), checkGuards(_this.ngModule.injector, function (evt) { return _this.triggerEvent(evt); }), tap(function (t) {\\n                var guardsEnd = new router_GuardsCheckEnd(t.id, _this.serializeUrl(t.extractedUrl), _this.serializeUrl(t.urlAfterRedirects), t.targetSnapshot, !!t.guardsResult);\\n                _this.triggerEvent(guardsEnd);\\n            }), filter(function (t) {\\n                if (!t.guardsResult) {\\n                    _this.resetUrlToCurrentUrlTree();\\n                    var navCancel = new router_NavigationCancel(t.id, _this.serializeUrl(t.extractedUrl), \\'\\');\\n                    eventsSubject.next(navCancel);\\n                    t.resolve(false);\\n                    return false;\\n                }\\n                return true;\\n            }), \\n            // --- RESOLVE ---\\n            switchTap(function (t) {\\n                if (t.guards.canActivateChecks.length) {\\n                    return Object(of[\"a\" /* of */])(t).pipe(tap(function (t) {\\n                        var resolveStart = new router_ResolveStart(t.id, _this.serializeUrl(t.extractedUrl), _this.serializeUrl(t.urlAfterRedirects), t.targetSnapshot);\\n                        _this.triggerEvent(resolveStart);\\n                    }), resolveData(_this.paramsInheritanceStrategy, _this.ngModule.injector), //\\n                    tap(function (t) {\\n                        var resolveEnd = new router_ResolveEnd(t.id, _this.serializeUrl(t.extractedUrl), _this.serializeUrl(t.urlAfterRedirects), t.targetSnapshot);\\n                        _this.triggerEvent(resolveEnd);\\n                    }));\\n                }\\n                return undefined;\\n            }), \\n            // --- AFTER PREACTIVATION ---\\n            switchTap(function (t) {\\n                var targetSnapshot = t.targetSnapshot, navigationId = t.id, appliedUrlTree = t.extractedUrl, rawUrlTree = t.rawUrl, _a = t.extras, skipLocationChange = _a.skipLocationChange, replaceUrl = _a.replaceUrl;\\n                return _this.hooks.afterPreactivation(targetSnapshot, {\\n                    navigationId: navigationId,\\n                    appliedUrlTree: appliedUrlTree,\\n                    rawUrlTree: rawUrlTree,\\n                    skipLocationChange: !!skipLocationChange,\\n                    replaceUrl: !!replaceUrl,\\n                });\\n            }), Object(map[\"a\" /* map */])(function (t) {\\n                var targetRouterState = createRouterState(_this.routeReuseStrategy, t.targetSnapshot, t.currentRouterState);\\n                return (Object(tslib_es6[\"a\" /* __assign */])({}, t, { targetRouterState: targetRouterState }));\\n            }), \\n            /* Once here, we are about to activate syncronously. The assumption is this will\\n               succeed, and user code may read from the Router service. Therefore before\\n               activation, we need to update router properties storing the current URL and the\\n               RouterState, as well as updated the browser URL. All this should happen *before*\\n               activating. */\\n            tap(function (t) {\\n                _this.currentUrlTree = t.urlAfterRedirects;\\n                _this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, t.rawUrl);\\n                _this.routerState = t.targetRouterState;\\n                if (_this.urlUpdateStrategy === \\'deferred\\' && !t.extras.skipLocationChange) {\\n                    _this.setBrowserUrl(_this.rawUrlTree, !!t.extras.replaceUrl, t.id);\\n                }\\n            }), activateRoutes(_this.rootContexts, _this.routeReuseStrategy, function (evt) { return _this.triggerEvent(evt); }), tap({ next: function () { completed = true; }, complete: function () { completed = true; } }), finalize(function () {\\n                /* When the navigation stream finishes either through error or success, we set the\\n                 * `completed` or `errored` flag. However, there are some situations where we could\\n                 * get here without either of those being set. For instance, a redirect during\\n                 * NavigationStart. Therefore, this is a catch-all to make sure the NavigationCancel\\n                 * event is fired when a navigation gets cancelled but not caught by other means. */\\n                if (!completed && !errored) {\\n                    // Must reset to current URL tree here to ensure history.state is set. On a fresh\\n                    // page load, if a new navigation comes in before a successful navigation\\n                    // completes, there will be nothing in history.state.navigationId. This can cause\\n                    // sync problems with AngularJS sync code which looks for a value here in order\\n                    // to determine whether or not to handle a given popstate event or to leave it\\n                    // to the Angualr router.\\n                    _this.resetUrlToCurrentUrlTree();\\n                    var navCancel = new router_NavigationCancel(t.id, _this.serializeUrl(t.extractedUrl), \"Navigation ID \" + t.id + \" is not equal to the current navigation id \" + _this.navigationId);\\n                    eventsSubject.next(navCancel);\\n                    t.resolve(false);\\n                }\\n            }), catchError(function (e) {\\n                errored = true;\\n                /* This error type is issued during Redirect, and is handled as a cancellation\\n                 * rather than an error. */\\n                if (isNavigationCancelingError(e)) {\\n                    _this.navigated = true;\\n                    _this.resetStateAndUrl(t.currentRouterState, t.currentUrlTree, t.rawUrl);\\n                    var navCancel = new router_NavigationCancel(t.id, _this.serializeUrl(t.extractedUrl), e.message);\\n                    eventsSubject.next(navCancel);\\n                    t.resolve(false);\\n                    /* All other errors should reset to the router\\'s internal URL reference to the\\n                     * pre-error state. */\\n                }\\n                else {\\n                    _this.resetStateAndUrl(t.currentRouterState, t.currentUrlTree, t.rawUrl);\\n                    var navError = new router_NavigationError(t.id, _this.serializeUrl(t.extractedUrl), e);\\n                    eventsSubject.next(navError);\\n                    try {\\n                        t.resolve(_this.errorHandler(e));\\n                    }\\n                    catch (ee) {\\n                        t.reject(ee);\\n                    }\\n                }\\n                return empty[\"a\" /* EMPTY */];\\n            }));\\n            // TODO(jasonaden): remove cast once g3 is on updated TypeScript\\n        }));\\n    };\\n    /**\\n     * @internal\\n     * TODO: this should be removed once the constructor of the router made internal\\n     */\\n    Router.prototype.resetRootComponentType = function (rootComponentType) {\\n        this.rootComponentType = rootComponentType;\\n        // TODO: vsavkin router 4.0 should make the root component set to null\\n        // this will simplify the lifecycle of the router.\\n        this.routerState.root.component = this.rootComponentType;\\n    };\\n    Router.prototype.getTransition = function () { return this.transitions.value; };\\n    Router.prototype.setTransition = function (t) {\\n        this.transitions.next(Object(tslib_es6[\"a\" /* __assign */])({}, this.getTransition(), t));\\n    };\\n    /**\\n     * Sets up the location change listener and performs the initial navigation.\\n     */\\n    Router.prototype.initialNavigation = function () {\\n        this.setUpLocationChangeListener();\\n        if (this.navigationId === 0) {\\n            this.navigateByUrl(this.location.path(true), { replaceUrl: true });\\n        }\\n    };\\n    /**\\n     * Sets up the location change listener.\\n     */\\n    Router.prototype.setUpLocationChangeListener = function () {\\n        var _this = this;\\n        // Don\\'t need to use Zone.wrap any more, because zone.js\\n        // already patch onPopState, so location change callback will\\n        // run into ngZone\\n        if (!this.locationSubscription) {\\n            this.locationSubscription = this.location.subscribe(function (change) {\\n                var rawUrlTree = _this.parseUrl(change[\\'url\\']);\\n                var source = change[\\'type\\'] === \\'popstate\\' ? \\'popstate\\' : \\'hashchange\\';\\n                var state = change.state && change.state.navigationId ?\\n                    { navigationId: change.state.navigationId } :\\n                    null;\\n                setTimeout(function () { _this.scheduleNavigation(rawUrlTree, source, state, { replaceUrl: true }); }, 0);\\n            });\\n        }\\n    };\\n    Object.defineProperty(Router.prototype, \"url\", {\\n        /** The current url */\\n        get: function () { return this.serializeUrl(this.currentUrlTree); },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    /** @internal */\\n    Router.prototype.triggerEvent = function (event) { this.events.next(event); };\\n    /**\\n     * Resets the configuration used for navigation and generating links.\\n     *\\n     * @usageNotes\\n     *\\n     * ### Example\\n     *\\n     * ```\\n     * router.resetConfig([\\n     *  { path: \\'team/:id\\', component: TeamCmp, children: [\\n     *    { path: \\'simple\\', component: SimpleCmp },\\n     *    { path: \\'user/:name\\', component: UserCmp }\\n     *  ]}\\n     * ]);\\n     * ```\\n     */\\n    Router.prototype.resetConfig = function (config) {\\n        validateConfig(config);\\n        this.config = config.map(standardizeConfig);\\n        this.navigated = false;\\n        this.lastSuccessfulId = -1;\\n    };\\n    /** @docsNotRequired */\\n    Router.prototype.ngOnDestroy = function () { this.dispose(); };\\n    /** Disposes of the router */\\n    Router.prototype.dispose = function () {\\n        if (this.locationSubscription) {\\n            this.locationSubscription.unsubscribe();\\n            this.locationSubscription = null;\\n        }\\n    };\\n    /**\\n     * Applies an array of commands to the current url tree and creates a new url tree.\\n     *\\n     * When given an activate route, applies the given commands starting from the route.\\n     * When not given a route, applies the given command starting from the root.\\n     *\\n     * @usageNotes\\n     *\\n     * ### Example\\n     *\\n     * ```\\n     * // create /team/33/user/11\\n     * router.createUrlTree([\\'/team\\', 33, \\'user\\', 11]);\\n     *\\n     * // create /team/33;expand=true/user/11\\n     * router.createUrlTree([\\'/team\\', 33, {expand: true}, \\'user\\', 11]);\\n     *\\n     * // you can collapse static segments like this (this works only with the first passed-in value):\\n     * router.createUrlTree([\\'/team/33/user\\', userId]);\\n     *\\n     * // If the first segment can contain slashes, and you do not want the router to split it, you\\n     * // can do the following:\\n     *\\n     * router.createUrlTree([{segmentPath: \\'/one/two\\'}]);\\n     *\\n     * // create /team/33/(user/11//right:chat)\\n     * router.createUrlTree([\\'/team\\', 33, {outlets: {primary: \\'user/11\\', right: \\'chat\\'}}]);\\n     *\\n     * // remove the right secondary node\\n     * router.createUrlTree([\\'/team\\', 33, {outlets: {primary: \\'user/11\\', right: null}}]);\\n     *\\n     * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\\n     *\\n     * // navigate to /team/33/user/11/details\\n     * router.createUrlTree([\\'details\\'], {relativeTo: route});\\n     *\\n     * // navigate to /team/33/user/22\\n     * router.createUrlTree([\\'../22\\'], {relativeTo: route});\\n     *\\n     * // navigate to /team/44/user/22\\n     * router.createUrlTree([\\'../../team/44/user/22\\'], {relativeTo: route});\\n     * ```\\n     */\\n    Router.prototype.createUrlTree = function (commands, navigationExtras) {\\n        if (navigationExtras === void 0) { navigationExtras = {}; }\\n        var relativeTo = navigationExtras.relativeTo, queryParams = navigationExtras.queryParams, fragment = navigationExtras.fragment, preserveQueryParams = navigationExtras.preserveQueryParams, queryParamsHandling = navigationExtras.queryParamsHandling, preserveFragment = navigationExtras.preserveFragment;\\n        if (Object(core[\"isDevMode\"])() && preserveQueryParams && console && console.warn) {\\n            console.warn(\\'preserveQueryParams is deprecated, use queryParamsHandling instead.\\');\\n        }\\n        var a = relativeTo || this.routerState.root;\\n        var f = preserveFragment ? this.currentUrlTree.fragment : fragment;\\n        var q = null;\\n        if (queryParamsHandling) {\\n            switch (queryParamsHandling) {\\n                case \\'merge\\':\\n                    q = Object(tslib_es6[\"a\" /* __assign */])({}, this.currentUrlTree.queryParams, queryParams);\\n                    break;\\n                case \\'preserve\\':\\n                    q = this.currentUrlTree.queryParams;\\n                    break;\\n                default:\\n                    q = queryParams || null;\\n            }\\n        }\\n        else {\\n            q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams || null;\\n        }\\n        if (q !== null) {\\n            q = this.removeEmptyProps(q);\\n        }\\n        return createUrlTree(a, this.currentUrlTree, commands, q, f);\\n    };\\n    /**\\n     * Navigate based on the provided url. This navigation is always absolute.\\n     *\\n     * Returns a promise that:\\n     * - resolves to \\'true\\' when navigation succeeds,\\n     * - resolves to \\'false\\' when navigation fails,\\n     * - is rejected when an error happens.\\n     *\\n     * @usageNotes\\n     *\\n     * ### Example\\n     *\\n     * ```\\n     * router.navigateByUrl(\"/team/33/user/11\");\\n     *\\n     * // Navigate without updating the URL\\n     * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\\n     * ```\\n     *\\n     * Since `navigateByUrl()` takes an absolute URL as the first parameter,\\n     * it will not apply any delta to the current URL and ignores any properties\\n     * in the second parameter (the `NavigationExtras`) that would change the\\n     * provided URL.\\n     */\\n    Router.prototype.navigateByUrl = function (url, extras) {\\n        if (extras === void 0) { extras = { skipLocationChange: false }; }\\n        if (Object(core[\"isDevMode\"])() && this.isNgZoneEnabled && !core[\"NgZone\"].isInAngularZone()) {\\n            this.console.warn(\"Navigation triggered outside Angular zone, did you forget to call \\'ngZone.run()\\'?\");\\n        }\\n        var urlTree = url instanceof UrlTree ? url : this.parseUrl(url);\\n        var mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);\\n        return this.scheduleNavigation(mergedTree, \\'imperative\\', null, extras);\\n    };\\n    /**\\n     * Navigate based on the provided array of commands and a starting point.\\n     * If no starting route is provided, the navigation is absolute.\\n     *\\n     * Returns a promise that:\\n     * - resolves to \\'true\\' when navigation succeeds,\\n     * - resolves to \\'false\\' when navigation fails,\\n     * - is rejected when an error happens.\\n     *\\n     * @usageNotes\\n     *\\n     * ### Example\\n     *\\n     * ```\\n     * router.navigate([\\'team\\', 33, \\'user\\', 11], {relativeTo: route});\\n     *\\n     * // Navigate without updating the URL\\n     * router.navigate([\\'team\\', 33, \\'user\\', 11], {relativeTo: route, skipLocationChange: true});\\n     * ```\\n     *\\n     * The first parameter of `navigate()` is a delta to be applied to the current URL\\n     * or the one provided in the `relativeTo` property of the second parameter (the\\n     * `NavigationExtras`).\\n     */\\n    Router.prototype.navigate = function (commands, extras) {\\n        if (extras === void 0) { extras = { skipLocationChange: false }; }\\n        validateCommands(commands);\\n        return this.navigateByUrl(this.createUrlTree(commands, extras), extras);\\n    };\\n    /** Serializes a `UrlTree` into a string */\\n    Router.prototype.serializeUrl = function (url) { return this.urlSerializer.serialize(url); };\\n    /** Parses a string into a `UrlTree` */\\n    Router.prototype.parseUrl = function (url) {\\n        var urlTree;\\n        try {\\n            urlTree = this.urlSerializer.parse(url);\\n        }\\n        catch (e) {\\n            urlTree = this.malformedUriErrorHandler(e, this.urlSerializer, url);\\n        }\\n        return urlTree;\\n    };\\n    /** Returns whether the url is activated */\\n    Router.prototype.isActive = function (url, exact) {\\n        if (url instanceof UrlTree) {\\n            return containsTree(this.currentUrlTree, url, exact);\\n        }\\n        var urlTree = this.parseUrl(url);\\n        return containsTree(this.currentUrlTree, urlTree, exact);\\n    };\\n    Router.prototype.removeEmptyProps = function (params) {\\n        return Object.keys(params).reduce(function (result, key) {\\n            var value = params[key];\\n            if (value !== null && value !== undefined) {\\n                result[key] = value;\\n            }\\n            return result;\\n        }, {});\\n    };\\n    Router.prototype.processNavigations = function () {\\n        var _this = this;\\n        this.navigations.subscribe(function (t) {\\n            _this.navigated = true;\\n            _this.lastSuccessfulId = t.id;\\n            _this.events\\n                .next(new router_NavigationEnd(t.id, _this.serializeUrl(t.extractedUrl), _this.serializeUrl(_this.currentUrlTree)));\\n            t.resolve(true);\\n        }, function (e) { _this.console.warn(\"Unhandled Navigation Error: \"); });\\n    };\\n    Router.prototype.scheduleNavigation = function (rawUrl, source, state, extras) {\\n        var lastNavigation = this.getTransition();\\n        // If the user triggers a navigation imperatively (e.g., by using navigateByUrl),\\n        // and that navigation results in \\'replaceState\\' that leads to the same URL,\\n        // we should skip those.\\n        if (lastNavigation && source !== \\'imperative\\' && lastNavigation.source === \\'imperative\\' &&\\n            lastNavigation.rawUrl.toString() === rawUrl.toString()) {\\n            return Promise.resolve(true); // return value is not used\\n        }\\n        // Because of a bug in IE and Edge, the location class fires two events (popstate and\\n        // hashchange) every single time. The second one should be ignored. Otherwise, the URL will\\n        // flicker. Handles the case when a popstate was emitted first.\\n        if (lastNavigation && source == \\'hashchange\\' && lastNavigation.source === \\'popstate\\' &&\\n            lastNavigation.rawUrl.toString() === rawUrl.toString()) {\\n            return Promise.resolve(true); // return value is not used\\n        }\\n        // Because of a bug in IE and Edge, the location class fires two events (popstate and\\n        // hashchange) every single time. The second one should be ignored. Otherwise, the URL will\\n        // flicker. Handles the case when a hashchange was emitted first.\\n        if (lastNavigation && source == \\'popstate\\' && lastNavigation.source === \\'hashchange\\' &&\\n            lastNavigation.rawUrl.toString() === rawUrl.toString()) {\\n            return Promise.resolve(true); // return value is not used\\n        }\\n        var resolve = null;\\n        var reject = null;\\n        var promise = new Promise(function (res, rej) {\\n            resolve = res;\\n            reject = rej;\\n        });\\n        var id = ++this.navigationId;\\n        this.setTransition({\\n            id: id,\\n            source: source,\\n            state: state,\\n            currentUrlTree: this.currentUrlTree,\\n            currentRawUrl: this.rawUrlTree, rawUrl: rawUrl, extras: extras, resolve: resolve, reject: reject, promise: promise,\\n            currentSnapshot: this.routerState.snapshot,\\n            currentRouterState: this.routerState\\n        });\\n        // Make sure that the error is propagated even though `processNavigations` catch\\n        // handler does not rethrow\\n        return promise.catch(function (e) { return Promise.reject(e); });\\n    };\\n    Router.prototype.setBrowserUrl = function (url, replaceUrl, id) {\\n        var path = this.urlSerializer.serialize(url);\\n        if (this.location.isCurrentPathEqualTo(path) || replaceUrl) {\\n            this.location.replaceState(path, \\'\\', { navigationId: id });\\n        }\\n        else {\\n            this.location.go(path, \\'\\', { navigationId: id });\\n        }\\n    };\\n    Router.prototype.resetStateAndUrl = function (storedState, storedUrl, rawUrl) {\\n        this.routerState = storedState;\\n        this.currentUrlTree = storedUrl;\\n        this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, rawUrl);\\n        this.resetUrlToCurrentUrlTree();\\n    };\\n    Router.prototype.resetUrlToCurrentUrlTree = function () {\\n        this.location.replaceState(this.urlSerializer.serialize(this.rawUrlTree), \\'\\', { navigationId: this.lastSuccessfulId });\\n    };\\n    return Router;\\n}());\\nfunction validateCommands(commands) {\\n    for (var i = 0; i < commands.length; i++) {\\n        var cmd = commands[i];\\n        if (cmd == null) {\\n            throw new Error(\"The requested path contains \" + cmd + \" segment at index \" + i);\\n        }\\n    }\\n}\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n/**\\n * @description\\n *\\n * Lets you link to specific routes in your app.\\n *\\n * Consider the following route configuration:\\n * `[{ path: \\'user/:name\\', component: UserCmp }]`.\\n * When linking to this `user/:name` route, you use the `RouterLink` directive.\\n *\\n * If the link is static, you can use the directive as follows:\\n * `<a routerLink=\"/user/bob\">link to user component</a>`\\n *\\n * If you use dynamic values to generate the link, you can pass an array of path\\n * segments, followed by the params for each segment.\\n *\\n * For instance `[\\'/team\\', teamId, \\'user\\', userName, {details: true}]`\\n * means that we want to generate a link to `/team/11/user/bob;details=true`.\\n *\\n * Multiple static segments can be merged into one\\n * (e.g., `[\\'/team/11/user\\', userName, {details: true}]`).\\n *\\n * The first segment name can be prepended with `/`, `./`, or `../`:\\n * * If the first segment begins with `/`, the router will look up the route from the root of the\\n *   app.\\n * * If the first segment begins with `./`, or doesn\\'t begin with a slash, the router will\\n *   instead look in the children of the current activated route.\\n * * And if the first segment begins with `../`, the router will go up one level.\\n *\\n * You can set query params and fragment as follows:\\n *\\n * ```\\n * <a [routerLink]=\"[\\'/user/bob\\']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\\n *   link to user component\\n * </a>\\n * ```\\n * RouterLink will use these to generate this link: `/user/bob#education?debug=true`.\\n *\\n * (Deprecated in v4.0.0 use `queryParamsHandling` instead) You can also tell the\\n * directive to preserve the current query params and fragment:\\n *\\n * ```\\n * <a [routerLink]=\"[\\'/user/bob\\']\" preserveQueryParams preserveFragment>\\n *   link to user component\\n * </a>\\n * ```\\n *\\n * You can tell the directive to how to handle queryParams, available options are:\\n *  - `\\'merge\\'`: merge the queryParams into the current queryParams\\n *  - `\\'preserve\\'`: preserve the current queryParams\\n *  - default/`\\'\\'`: use the queryParams only\\n *\\n * Same options for {@link NavigationExtras#queryParamsHandling\\n * NavigationExtras#queryParamsHandling}.\\n *\\n * ```\\n * <a [routerLink]=\"[\\'/user/bob\\']\" [queryParams]=\"{debug: true}\" queryParamsHandling=\"merge\">\\n *   link to user component\\n * </a>\\n * ```\\n *\\n * The router link directive always treats the provided input as a delta to the current url.\\n *\\n * For instance, if the current url is `/user/(box//aux:team)`.\\n *\\n * Then the following link `<a [routerLink]=\"[\\'/user/jim\\']\">Jim</a>` will generate the link\\n * `/user/(jim//aux:team)`.\\n *\\n * See {@link Router#createUrlTree createUrlTree} for more information.\\n *\\n * @ngModule RouterModule\\n *\\n * @publicApi\\n */\\nvar router_RouterLink = /** @class */ (function () {\\n    function RouterLink(router, route, tabIndex, renderer, el) {\\n        this.router = router;\\n        this.route = route;\\n        this.commands = [];\\n        if (tabIndex == null) {\\n            renderer.setAttribute(el.nativeElement, \\'tabindex\\', \\'0\\');\\n        }\\n    }\\n    Object.defineProperty(RouterLink.prototype, \"routerLink\", {\\n        set: function (commands) {\\n            if (commands != null) {\\n                this.commands = Array.isArray(commands) ? commands : [commands];\\n            }\\n            else {\\n                this.commands = [];\\n            }\\n        },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    Object.defineProperty(RouterLink.prototype, \"preserveQueryParams\", {\\n        /**\\n         * @deprecated 4.0.0 use `queryParamsHandling` instead.\\n         */\\n        set: function (value) {\\n            if (Object(core[\"isDevMode\"])() && console && console.warn) {\\n                console.warn(\\'preserveQueryParams is deprecated!, use queryParamsHandling instead.\\');\\n            }\\n            this.preserve = value;\\n        },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    RouterLink.prototype.onClick = function () {\\n        var extras = {\\n            skipLocationChange: attrBoolValue(this.skipLocationChange),\\n            replaceUrl: attrBoolValue(this.replaceUrl),\\n        };\\n        this.router.navigateByUrl(this.urlTree, extras);\\n        return true;\\n    };\\n    Object.defineProperty(RouterLink.prototype, \"urlTree\", {\\n        get: function () {\\n            return this.router.createUrlTree(this.commands, {\\n                relativeTo: this.route,\\n                queryParams: this.queryParams,\\n                fragment: this.fragment,\\n                preserveQueryParams: attrBoolValue(this.preserve),\\n                queryParamsHandling: this.queryParamsHandling,\\n                preserveFragment: attrBoolValue(this.preserveFragment),\\n            });\\n        },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"Input\"])(),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:type\", Object)\\n    ], RouterLink.prototype, \"queryParams\", void 0);\\n    Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"Input\"])(),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:type\", String)\\n    ], RouterLink.prototype, \"fragment\", void 0);\\n    Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"Input\"])(),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:type\", String)\\n    ], RouterLink.prototype, \"queryParamsHandling\", void 0);\\n    Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"Input\"])(),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:type\", Boolean)\\n    ], RouterLink.prototype, \"preserveFragment\", void 0);\\n    Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"Input\"])(),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:type\", Boolean)\\n    ], RouterLink.prototype, \"skipLocationChange\", void 0);\\n    Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"Input\"])(),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:type\", Boolean)\\n    ], RouterLink.prototype, \"replaceUrl\", void 0);\\n    Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"Input\"])(),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:type\", Object),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:paramtypes\", [Object])\\n    ], RouterLink.prototype, \"routerLink\", null);\\n    Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"Input\"])(),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:type\", Boolean),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:paramtypes\", [Boolean])\\n    ], RouterLink.prototype, \"preserveQueryParams\", null);\\n    Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"HostListener\"])(\\'click\\'),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:type\", Function),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:paramtypes\", []),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:returntype\", Boolean)\\n    ], RouterLink.prototype, \"onClick\", null);\\n    RouterLink = Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"Directive\"])({ selector: \\':not(a)[routerLink]\\' }),\\n        Object(tslib_es6[\"e\" /* __param */])(2, Object(core[\"Attribute\"])(\\'tabindex\\')),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:paramtypes\", [router_Router, router_ActivatedRoute, String, core[\"Renderer2\"], core[\"ElementRef\"]])\\n    ], RouterLink);\\n    return RouterLink;\\n}());\\n/**\\n * @description\\n *\\n * Lets you link to specific routes in your app.\\n *\\n * See `RouterLink` for more information.\\n *\\n * @ngModule RouterModule\\n *\\n * @publicApi\\n */\\nvar router_RouterLinkWithHref = /** @class */ (function () {\\n    function RouterLinkWithHref(router, route, locationStrategy) {\\n        var _this = this;\\n        this.router = router;\\n        this.route = route;\\n        this.locationStrategy = locationStrategy;\\n        this.commands = [];\\n        this.subscription = router.events.subscribe(function (s) {\\n            if (s instanceof router_NavigationEnd) {\\n                _this.updateTargetUrlAndHref();\\n            }\\n        });\\n    }\\n    Object.defineProperty(RouterLinkWithHref.prototype, \"routerLink\", {\\n        set: function (commands) {\\n            if (commands != null) {\\n                this.commands = Array.isArray(commands) ? commands : [commands];\\n            }\\n            else {\\n                this.commands = [];\\n            }\\n        },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    Object.defineProperty(RouterLinkWithHref.prototype, \"preserveQueryParams\", {\\n        set: function (value) {\\n            if (Object(core[\"isDevMode\"])() && console && console.warn) {\\n                console.warn(\\'preserveQueryParams is deprecated, use queryParamsHandling instead.\\');\\n            }\\n            this.preserve = value;\\n        },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    RouterLinkWithHref.prototype.ngOnChanges = function (changes) { this.updateTargetUrlAndHref(); };\\n    RouterLinkWithHref.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };\\n    RouterLinkWithHref.prototype.onClick = function (button, ctrlKey, metaKey, shiftKey) {\\n        if (button !== 0 || ctrlKey || metaKey || shiftKey) {\\n            return true;\\n        }\\n        if (typeof this.target === \\'string\\' && this.target != \\'_self\\') {\\n            return true;\\n        }\\n        var extras = {\\n            skipLocationChange: attrBoolValue(this.skipLocationChange),\\n            replaceUrl: attrBoolValue(this.replaceUrl),\\n        };\\n        this.router.navigateByUrl(this.urlTree, extras);\\n        return false;\\n    };\\n    RouterLinkWithHref.prototype.updateTargetUrlAndHref = function () {\\n        this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));\\n    };\\n    Object.defineProperty(RouterLinkWithHref.prototype, \"urlTree\", {\\n        get: function () {\\n            return this.router.createUrlTree(this.commands, {\\n                relativeTo: this.route,\\n                queryParams: this.queryParams,\\n                fragment: this.fragment,\\n                preserveQueryParams: attrBoolValue(this.preserve),\\n                queryParamsHandling: this.queryParamsHandling,\\n                preserveFragment: attrBoolValue(this.preserveFragment),\\n            });\\n        },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"HostBinding\"])(\\'attr.target\\'), Object(core[\"Input\"])(),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:type\", String)\\n    ], RouterLinkWithHref.prototype, \"target\", void 0);\\n    Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"Input\"])(),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:type\", Object)\\n    ], RouterLinkWithHref.prototype, \"queryParams\", void 0);\\n    Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"Input\"])(),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:type\", String)\\n    ], RouterLinkWithHref.prototype, \"fragment\", void 0);\\n    Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"Input\"])(),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:type\", String)\\n    ], RouterLinkWithHref.prototype, \"queryParamsHandling\", void 0);\\n    Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"Input\"])(),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:type\", Boolean)\\n    ], RouterLinkWithHref.prototype, \"preserveFragment\", void 0);\\n    Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"Input\"])(),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:type\", Boolean)\\n    ], RouterLinkWithHref.prototype, \"skipLocationChange\", void 0);\\n    Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"Input\"])(),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:type\", Boolean)\\n    ], RouterLinkWithHref.prototype, \"replaceUrl\", void 0);\\n    Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"HostBinding\"])(),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:type\", String)\\n    ], RouterLinkWithHref.prototype, \"href\", void 0);\\n    Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"Input\"])(),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:type\", Object),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:paramtypes\", [Object])\\n    ], RouterLinkWithHref.prototype, \"routerLink\", null);\\n    Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"Input\"])(),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:type\", Boolean),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:paramtypes\", [Boolean])\\n    ], RouterLinkWithHref.prototype, \"preserveQueryParams\", null);\\n    Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"HostListener\"])(\\'click\\', [\\'$event.button\\', \\'$event.ctrlKey\\', \\'$event.metaKey\\', \\'$event.shiftKey\\']),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:type\", Function),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:paramtypes\", [Number, Boolean, Boolean, Boolean]),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:returntype\", Boolean)\\n    ], RouterLinkWithHref.prototype, \"onClick\", null);\\n    RouterLinkWithHref = Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"Directive\"])({ selector: \\'a[routerLink]\\' }),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:paramtypes\", [router_Router, router_ActivatedRoute,\\n            common[\"LocationStrategy\"]])\\n    ], RouterLinkWithHref);\\n    return RouterLinkWithHref;\\n}());\\nfunction attrBoolValue(s) {\\n    return s === \\'\\' || !!s;\\n}\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n/**\\n *\\n * @description\\n *\\n * Lets you add a CSS class to an element when the link\\'s route becomes active.\\n *\\n * This directive lets you add a CSS class to an element when the link\\'s route\\n * becomes active.\\n *\\n * Consider the following example:\\n *\\n * ```\\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\\n * ```\\n *\\n * When the url is either \\'/user\\' or \\'/user/bob\\', the active-link class will\\n * be added to the `a` tag. If the url changes, the class will be removed.\\n *\\n * You can set more than one class, as follows:\\n *\\n * ```\\n * <a routerLink=\"/user/bob\" routerLinkActive=\"class1 class2\">Bob</a>\\n * <a routerLink=\"/user/bob\" [routerLinkActive]=\"[\\'class1\\', \\'class2\\']\">Bob</a>\\n * ```\\n *\\n * You can configure RouterLinkActive by passing `exact: true`. This will add the classes\\n * only when the url matches the link exactly.\\n *\\n * ```\\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact:\\n * true}\">Bob</a>\\n * ```\\n *\\n * You can assign the RouterLinkActive instance to a template variable and directly check\\n * the `isActive` status.\\n * ```\\n * <a routerLink=\"/user/bob\" routerLinkActive #rla=\"routerLinkActive\">\\n *   Bob {{ rla.isActive ? \\'(already open)\\' : \\'\\'}}\\n * </a>\\n * ```\\n *\\n * Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.\\n *\\n * ```\\n * <div routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">\\n *   <a routerLink=\"/user/jim\">Jim</a>\\n *   <a routerLink=\"/user/bob\">Bob</a>\\n * </div>\\n * ```\\n *\\n * This will set the active-link class on the div tag if the url is either \\'/user/jim\\' or\\n * \\'/user/bob\\'.\\n *\\n * @ngModule RouterModule\\n *\\n * @publicApi\\n */\\nvar router_RouterLinkActive = /** @class */ (function () {\\n    function RouterLinkActive(router, element, renderer, cdr) {\\n        var _this = this;\\n        this.router = router;\\n        this.element = element;\\n        this.renderer = renderer;\\n        this.cdr = cdr;\\n        this.classes = [];\\n        this.isActive = false;\\n        this.routerLinkActiveOptions = { exact: false };\\n        this.subscription = router.events.subscribe(function (s) {\\n            if (s instanceof router_NavigationEnd) {\\n                _this.update();\\n            }\\n        });\\n    }\\n    RouterLinkActive.prototype.ngAfterContentInit = function () {\\n        var _this = this;\\n        this.links.changes.subscribe(function (_) { return _this.update(); });\\n        this.linksWithHrefs.changes.subscribe(function (_) { return _this.update(); });\\n        this.update();\\n    };\\n    Object.defineProperty(RouterLinkActive.prototype, \"routerLinkActive\", {\\n        set: function (data) {\\n            var classes = Array.isArray(data) ? data : data.split(\\' \\');\\n            this.classes = classes.filter(function (c) { return !!c; });\\n        },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    RouterLinkActive.prototype.ngOnChanges = function (changes) { this.update(); };\\n    RouterLinkActive.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };\\n    RouterLinkActive.prototype.update = function () {\\n        var _this = this;\\n        if (!this.links || !this.linksWithHrefs || !this.router.navigated)\\n            return;\\n        Promise.resolve().then(function () {\\n            var hasActiveLinks = _this.hasActiveLinks();\\n            if (_this.isActive !== hasActiveLinks) {\\n                _this.isActive = hasActiveLinks;\\n                _this.classes.forEach(function (c) {\\n                    if (hasActiveLinks) {\\n                        _this.renderer.addClass(_this.element.nativeElement, c);\\n                    }\\n                    else {\\n                        _this.renderer.removeClass(_this.element.nativeElement, c);\\n                    }\\n                });\\n            }\\n        });\\n    };\\n    RouterLinkActive.prototype.isLinkActive = function (router) {\\n        var _this = this;\\n        return function (link) {\\n            return router.isActive(link.urlTree, _this.routerLinkActiveOptions.exact);\\n        };\\n    };\\n    RouterLinkActive.prototype.hasActiveLinks = function () {\\n        return this.links.some(this.isLinkActive(this.router)) ||\\n            this.linksWithHrefs.some(this.isLinkActive(this.router));\\n    };\\n    Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"ContentChildren\"])(router_RouterLink, { descendants: true }),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:type\", core[\"QueryList\"])\\n    ], RouterLinkActive.prototype, \"links\", void 0);\\n    Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"ContentChildren\"])(router_RouterLinkWithHref, { descendants: true }),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:type\", core[\"QueryList\"])\\n    ], RouterLinkActive.prototype, \"linksWithHrefs\", void 0);\\n    Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"Input\"])(),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:type\", Object)\\n    ], RouterLinkActive.prototype, \"routerLinkActiveOptions\", void 0);\\n    Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"Input\"])(),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:type\", Object),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:paramtypes\", [Object])\\n    ], RouterLinkActive.prototype, \"routerLinkActive\", null);\\n    RouterLinkActive = Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"Directive\"])({\\n            selector: \\'[routerLinkActive]\\',\\n            exportAs: \\'routerLinkActive\\',\\n        }),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:paramtypes\", [router_Router, core[\"ElementRef\"], core[\"Renderer2\"],\\n            core[\"ChangeDetectorRef\"]])\\n    ], RouterLinkActive);\\n    return RouterLinkActive;\\n}());\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n/**\\n * Store contextual information about a `RouterOutlet`\\n *\\n * @publicApi\\n */\\nvar OutletContext = /** @class */ (function () {\\n    function OutletContext() {\\n        this.outlet = null;\\n        this.route = null;\\n        this.resolver = null;\\n        this.children = new ChildrenOutletContexts();\\n        this.attachRef = null;\\n    }\\n    return OutletContext;\\n}());\\n/**\\n * Store contextual information about the children (= nested) `RouterOutlet`\\n *\\n * @publicApi\\n */\\nvar ChildrenOutletContexts = /** @class */ (function () {\\n    function ChildrenOutletContexts() {\\n        // contexts for child outlets, by name.\\n        this.contexts = new Map();\\n    }\\n    /** Called when a `RouterOutlet` directive is instantiated */\\n    ChildrenOutletContexts.prototype.onChildOutletCreated = function (childName, outlet) {\\n        var context = this.getOrCreateContext(childName);\\n        context.outlet = outlet;\\n        this.contexts.set(childName, context);\\n    };\\n    /**\\n     * Called when a `RouterOutlet` directive is destroyed.\\n     * We need to keep the context as the outlet could be destroyed inside a NgIf and might be\\n     * re-created later.\\n     */\\n    ChildrenOutletContexts.prototype.onChildOutletDestroyed = function (childName) {\\n        var context = this.getContext(childName);\\n        if (context) {\\n            context.outlet = null;\\n        }\\n    };\\n    /**\\n     * Called when the corresponding route is deactivated during navigation.\\n     * Because the component get destroyed, all children outlet are destroyed.\\n     */\\n    ChildrenOutletContexts.prototype.onOutletDeactivated = function () {\\n        var contexts = this.contexts;\\n        this.contexts = new Map();\\n        return contexts;\\n    };\\n    ChildrenOutletContexts.prototype.onOutletReAttached = function (contexts) { this.contexts = contexts; };\\n    ChildrenOutletContexts.prototype.getOrCreateContext = function (childName) {\\n        var context = this.getContext(childName);\\n        if (!context) {\\n            context = new OutletContext();\\n            this.contexts.set(childName, context);\\n        }\\n        return context;\\n    };\\n    ChildrenOutletContexts.prototype.getContext = function (childName) { return this.contexts.get(childName) || null; };\\n    return ChildrenOutletContexts;\\n}());\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n/**\\n * @description\\n *\\n * Acts as a placeholder that Angular dynamically fills based on the current router state.\\n *\\n * ```\\n * <router-outlet></router-outlet>\\n * <router-outlet name=\\'left\\'></router-outlet>\\n * <router-outlet name=\\'right\\'></router-outlet>\\n * ```\\n *\\n * A router outlet will emit an activate event any time a new component is being instantiated,\\n * and a deactivate event when it is being destroyed.\\n *\\n * ```\\n * <router-outlet\\n *   (activate)=\\'onActivate($event)\\'\\n *   (deactivate)=\\'onDeactivate($event)\\'></router-outlet>\\n * ```\\n * @ngModule RouterModule\\n *\\n * @publicApi\\n */\\nvar router_RouterOutlet = /** @class */ (function () {\\n    function RouterOutlet(parentContexts, location, resolver, name, changeDetector) {\\n        this.parentContexts = parentContexts;\\n        this.location = location;\\n        this.resolver = resolver;\\n        this.changeDetector = changeDetector;\\n        this.activated = null;\\n        this._activatedRoute = null;\\n        this.activateEvents = new core[\"EventEmitter\"]();\\n        this.deactivateEvents = new core[\"EventEmitter\"]();\\n        this.name = name || PRIMARY_OUTLET;\\n        parentContexts.onChildOutletCreated(this.name, this);\\n    }\\n    RouterOutlet.prototype.ngOnDestroy = function () { this.parentContexts.onChildOutletDestroyed(this.name); };\\n    RouterOutlet.prototype.ngOnInit = function () {\\n        if (!this.activated) {\\n            // If the outlet was not instantiated at the time the route got activated we need to populate\\n            // the outlet when it is initialized (ie inside a NgIf)\\n            var context = this.parentContexts.getContext(this.name);\\n            if (context && context.route) {\\n                if (context.attachRef) {\\n                    // `attachRef` is populated when there is an existing component to mount\\n                    this.attach(context.attachRef, context.route);\\n                }\\n                else {\\n                    // otherwise the component defined in the configuration is created\\n                    this.activateWith(context.route, context.resolver || null);\\n                }\\n            }\\n        }\\n    };\\n    Object.defineProperty(RouterOutlet.prototype, \"isActivated\", {\\n        get: function () { return !!this.activated; },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    Object.defineProperty(RouterOutlet.prototype, \"component\", {\\n        get: function () {\\n            if (!this.activated)\\n                throw new Error(\\'Outlet is not activated\\');\\n            return this.activated.instance;\\n        },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    Object.defineProperty(RouterOutlet.prototype, \"activatedRoute\", {\\n        get: function () {\\n            if (!this.activated)\\n                throw new Error(\\'Outlet is not activated\\');\\n            return this._activatedRoute;\\n        },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    Object.defineProperty(RouterOutlet.prototype, \"activatedRouteData\", {\\n        get: function () {\\n            if (this._activatedRoute) {\\n                return this._activatedRoute.snapshot.data;\\n            }\\n            return {};\\n        },\\n        enumerable: true,\\n        configurable: true\\n    });\\n    /**\\n     * Called when the `RouteReuseStrategy` instructs to detach the subtree\\n     */\\n    RouterOutlet.prototype.detach = function () {\\n        if (!this.activated)\\n            throw new Error(\\'Outlet is not activated\\');\\n        this.location.detach();\\n        var cmp = this.activated;\\n        this.activated = null;\\n        this._activatedRoute = null;\\n        return cmp;\\n    };\\n    /**\\n     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\\n     */\\n    RouterOutlet.prototype.attach = function (ref, activatedRoute) {\\n        this.activated = ref;\\n        this._activatedRoute = activatedRoute;\\n        this.location.insert(ref.hostView);\\n    };\\n    RouterOutlet.prototype.deactivate = function () {\\n        if (this.activated) {\\n            var c = this.component;\\n            this.activated.destroy();\\n            this.activated = null;\\n            this._activatedRoute = null;\\n            this.deactivateEvents.emit(c);\\n        }\\n    };\\n    RouterOutlet.prototype.activateWith = function (activatedRoute, resolver) {\\n        if (this.isActivated) {\\n            throw new Error(\\'Cannot activate an already activated outlet\\');\\n        }\\n        this._activatedRoute = activatedRoute;\\n        var snapshot = activatedRoute._futureSnapshot;\\n        var component = snapshot.routeConfig.component;\\n        resolver = resolver || this.resolver;\\n        var factory = resolver.resolveComponentFactory(component);\\n        var childContexts = this.parentContexts.getOrCreateContext(this.name).children;\\n        var injector = new OutletInjector(activatedRoute, childContexts, this.location.injector);\\n        this.activated = this.location.createComponent(factory, this.location.length, injector);\\n        // Calling `markForCheck` to make sure we will run the change detection when the\\n        // `RouterOutlet` is inside a `ChangeDetectionStrategy.OnPush` component.\\n        this.changeDetector.markForCheck();\\n        this.activateEvents.emit(this.activated.instance);\\n    };\\n    Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"Output\"])(\\'activate\\'),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:type\", Object)\\n    ], RouterOutlet.prototype, \"activateEvents\", void 0);\\n    Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"Output\"])(\\'deactivate\\'),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:type\", Object)\\n    ], RouterOutlet.prototype, \"deactivateEvents\", void 0);\\n    RouterOutlet = Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"Directive\"])({ selector: \\'router-outlet\\', exportAs: \\'outlet\\' }),\\n        Object(tslib_es6[\"e\" /* __param */])(3, Object(core[\"Attribute\"])(\\'name\\')),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:paramtypes\", [ChildrenOutletContexts, core[\"ViewContainerRef\"],\\n            core[\"ComponentFactoryResolver\"], String, core[\"ChangeDetectorRef\"]])\\n    ], RouterOutlet);\\n    return RouterOutlet;\\n}());\\nvar OutletInjector = /** @class */ (function () {\\n    function OutletInjector(route, childContexts, parent) {\\n        this.route = route;\\n        this.childContexts = childContexts;\\n        this.parent = parent;\\n    }\\n    OutletInjector.prototype.get = function (token, notFoundValue) {\\n        if (token === router_ActivatedRoute) {\\n            return this.route;\\n        }\\n        if (token === ChildrenOutletContexts) {\\n            return this.childContexts;\\n        }\\n        return this.parent.get(token, notFoundValue);\\n    };\\n    return OutletInjector;\\n}());\\n\\n/**\\n*@license\\n*Copyright Google Inc. All Rights Reserved.\\n*\\n*Use of this source code is governed by an MIT-style license that can be\\n*found in the LICENSE file at https://angular.io/license\\n*/\\n/**\\n * @description\\n *\\n * Provides a preloading strategy.\\n *\\n * @publicApi\\n */\\nvar PreloadingStrategy = /** @class */ (function () {\\n    function PreloadingStrategy() {\\n    }\\n    return PreloadingStrategy;\\n}());\\n/**\\n * @description\\n *\\n * Provides a preloading strategy that preloads all modules as quickly as possible.\\n *\\n * ```\\n * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\\n * ```\\n *\\n * @publicApi\\n */\\nvar router_PreloadAllModules = /** @class */ (function () {\\n    function PreloadAllModules() {\\n    }\\n    PreloadAllModules.prototype.preload = function (route, fn) {\\n        return fn().pipe(catchError(function () { return Object(of[\"a\" /* of */])(null); }));\\n    };\\n    return PreloadAllModules;\\n}());\\n/**\\n * @description\\n *\\n * Provides a preloading strategy that does not preload any modules.\\n *\\n * This strategy is enabled by default.\\n *\\n * @publicApi\\n */\\nvar router_NoPreloading = /** @class */ (function () {\\n    function NoPreloading() {\\n    }\\n    NoPreloading.prototype.preload = function (route, fn) { return Object(of[\"a\" /* of */])(null); };\\n    return NoPreloading;\\n}());\\n/**\\n * The preloader optimistically loads all router configurations to\\n * make navigations into lazily-loaded sections of the application faster.\\n *\\n * The preloader runs in the background. When the router bootstraps, the preloader\\n * starts listening to all navigation events. After every such event, the preloader\\n * will check if any configurations can be loaded lazily.\\n *\\n * If a route is protected by `canLoad` guards, the preloaded will not load it.\\n *\\n * @publicApi\\n */\\nvar router_RouterPreloader = /** @class */ (function () {\\n    function RouterPreloader(router, moduleLoader, compiler, injector, preloadingStrategy) {\\n        this.router = router;\\n        this.injector = injector;\\n        this.preloadingStrategy = preloadingStrategy;\\n        var onStartLoad = function (r) { return router.triggerEvent(new RouteConfigLoadStart(r)); };\\n        var onEndLoad = function (r) { return router.triggerEvent(new RouteConfigLoadEnd(r)); };\\n        this.loader = new router_RouterConfigLoader(moduleLoader, compiler, onStartLoad, onEndLoad);\\n    }\\n    RouterPreloader.prototype.setUpPreloading = function () {\\n        var _this = this;\\n        this.subscription =\\n            this.router.events\\n                .pipe(filter(function (e) { return e instanceof router_NavigationEnd; }), concatMap(function () { return _this.preload(); }))\\n                .subscribe(function () { });\\n    };\\n    RouterPreloader.prototype.preload = function () {\\n        var ngModule = this.injector.get(core[\"NgModuleRef\"]);\\n        return this.processRoutes(ngModule, this.router.config);\\n    };\\n    // TODO(jasonaden): This class relies on code external to the class to call setUpPreloading. If\\n    // this hasn\\'t been done, ngOnDestroy will fail as this.subscription will be undefined. This\\n    // should be refactored.\\n    RouterPreloader.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };\\n    RouterPreloader.prototype.processRoutes = function (ngModule, routes) {\\n        var e_1, _a;\\n        var res = [];\\n        try {\\n            for (var routes_1 = Object(tslib_es6[\"h\" /* __values */])(routes), routes_1_1 = routes_1.next(); !routes_1_1.done; routes_1_1 = routes_1.next()) {\\n                var route = routes_1_1.value;\\n                // we already have the config loaded, just recurse\\n                if (route.loadChildren && !route.canLoad && route._loadedConfig) {\\n                    var childConfig = route._loadedConfig;\\n                    res.push(this.processRoutes(childConfig.module, childConfig.routes));\\n                    // no config loaded, fetch the config\\n                }\\n                else if (route.loadChildren && !route.canLoad) {\\n                    res.push(this.preloadConfig(ngModule, route));\\n                    // recurse into children\\n                }\\n                else if (route.children) {\\n                    res.push(this.processRoutes(ngModule, route.children));\\n                }\\n            }\\n        }\\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\\n        finally {\\n            try {\\n                if (routes_1_1 && !routes_1_1.done && (_a = routes_1.return)) _a.call(routes_1);\\n            }\\n            finally { if (e_1) throw e_1.error; }\\n        }\\n        return Object(from[\"a\" /* from */])(res).pipe(Object(mergeAll[\"a\" /* mergeAll */])(), Object(map[\"a\" /* map */])(function (_) { return void 0; }));\\n    };\\n    RouterPreloader.prototype.preloadConfig = function (ngModule, route) {\\n        var _this = this;\\n        return this.preloadingStrategy.preload(route, function () {\\n            var loaded$ = _this.loader.load(ngModule.injector, route);\\n            return loaded$.pipe(Object(mergeMap[\"a\" /* mergeMap */])(function (config) {\\n                route._loadedConfig = config;\\n                return _this.processRoutes(config.module, config.routes);\\n            }));\\n        });\\n    };\\n    RouterPreloader = Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"Injectable\"])(),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:paramtypes\", [router_Router, core[\"NgModuleFactoryLoader\"], core[\"Compiler\"],\\n            core[\"Injector\"], PreloadingStrategy])\\n    ], RouterPreloader);\\n    return RouterPreloader;\\n}());\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\nvar RouterScroller = /** @class */ (function () {\\n    function RouterScroller(router, \\n    /** @docsNotRequired */ viewportScroller, options) {\\n        if (options === void 0) { options = {}; }\\n        this.router = router;\\n        this.viewportScroller = viewportScroller;\\n        this.options = options;\\n        this.lastId = 0;\\n        this.lastSource = \\'imperative\\';\\n        this.restoredId = 0;\\n        this.store = {};\\n        // Default both options to \\'disabled\\'\\n        options.scrollPositionRestoration = options.scrollPositionRestoration || \\'disabled\\';\\n        options.anchorScrolling = options.anchorScrolling || \\'disabled\\';\\n    }\\n    RouterScroller.prototype.init = function () {\\n        // we want to disable the automatic scrolling because having two places\\n        // responsible for scrolling results race conditions, especially given\\n        // that browser don\\'t implement this behavior consistently\\n        if (this.options.scrollPositionRestoration !== \\'disabled\\') {\\n            this.viewportScroller.setHistoryScrollRestoration(\\'manual\\');\\n        }\\n        this.routerEventsSubscription = this.createScrollEvents();\\n        this.scrollEventsSubscription = this.consumeScrollEvents();\\n    };\\n    RouterScroller.prototype.createScrollEvents = function () {\\n        var _this = this;\\n        return this.router.events.subscribe(function (e) {\\n            if (e instanceof router_NavigationStart) {\\n                // store the scroll position of the current stable navigations.\\n                _this.store[_this.lastId] = _this.viewportScroller.getScrollPosition();\\n                _this.lastSource = e.navigationTrigger;\\n                _this.restoredId = e.restoredState ? e.restoredState.navigationId : 0;\\n            }\\n            else if (e instanceof router_NavigationEnd) {\\n                _this.lastId = e.id;\\n                _this.scheduleScrollEvent(e, _this.router.parseUrl(e.urlAfterRedirects).fragment);\\n            }\\n        });\\n    };\\n    RouterScroller.prototype.consumeScrollEvents = function () {\\n        var _this = this;\\n        return this.router.events.subscribe(function (e) {\\n            if (!(e instanceof Scroll))\\n                return;\\n            // a popstate event. The pop state event will always ignore anchor scrolling.\\n            if (e.position) {\\n                if (_this.options.scrollPositionRestoration === \\'top\\') {\\n                    _this.viewportScroller.scrollToPosition([0, 0]);\\n                }\\n                else if (_this.options.scrollPositionRestoration === \\'enabled\\') {\\n                    _this.viewportScroller.scrollToPosition(e.position);\\n                }\\n                // imperative navigation \"forward\"\\n            }\\n            else {\\n                if (e.anchor && _this.options.anchorScrolling === \\'enabled\\') {\\n                    _this.viewportScroller.scrollToAnchor(e.anchor);\\n                }\\n                else if (_this.options.scrollPositionRestoration !== \\'disabled\\') {\\n                    _this.viewportScroller.scrollToPosition([0, 0]);\\n                }\\n            }\\n        });\\n    };\\n    RouterScroller.prototype.scheduleScrollEvent = function (routerEvent, anchor) {\\n        this.router.triggerEvent(new Scroll(routerEvent, this.lastSource === \\'popstate\\' ? this.store[this.restoredId] : null, anchor));\\n    };\\n    RouterScroller.prototype.ngOnDestroy = function () {\\n        if (this.routerEventsSubscription) {\\n            this.routerEventsSubscription.unsubscribe();\\n        }\\n        if (this.scrollEventsSubscription) {\\n            this.scrollEventsSubscription.unsubscribe();\\n        }\\n    };\\n    return RouterScroller;\\n}());\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n/**\\n * @description\\n *\\n * Contains a list of directives\\n *\\n *\\n */\\nvar ROUTER_DIRECTIVES = [router_RouterOutlet, router_RouterLink, router_RouterLinkWithHref, router_RouterLinkActive, router_EmptyOutletComponent];\\n/**\\n * @description\\n *\\n * Is used in DI to configure the router.\\n *\\n * @publicApi\\n */\\nvar ROUTER_CONFIGURATION = new core[\"InjectionToken\"](\\'ROUTER_CONFIGURATION\\');\\n/**\\n * @docsNotRequired\\n */\\nvar ROUTER_FORROOT_GUARD = new core[\"InjectionToken\"](\\'ROUTER_FORROOT_GUARD\\');\\nvar ROUTER_PROVIDERS = [\\n    common[\"Location\"],\\n    { provide: UrlSerializer, useClass: DefaultUrlSerializer },\\n    {\\n        provide: router_Router,\\n        useFactory: setupRouter,\\n        deps: [\\n            core[\"ApplicationRef\"], UrlSerializer, ChildrenOutletContexts, common[\"Location\"], core[\"Injector\"],\\n            core[\"NgModuleFactoryLoader\"], core[\"Compiler\"], ROUTES, ROUTER_CONFIGURATION,\\n            [UrlHandlingStrategy, new core[\"Optional\"]()], [RouteReuseStrategy, new core[\"Optional\"]()]\\n        ]\\n    },\\n    ChildrenOutletContexts,\\n    { provide: router_ActivatedRoute, useFactory: rootRoute, deps: [router_Router] },\\n    { provide: core[\"NgModuleFactoryLoader\"], useClass: core[\"SystemJsNgModuleLoader\"] },\\n    router_RouterPreloader,\\n    router_NoPreloading,\\n    router_PreloadAllModules,\\n    { provide: ROUTER_CONFIGURATION, useValue: { enableTracing: false } },\\n];\\nfunction routerNgProbeToken() {\\n    return new core[\"NgProbeToken\"](\\'Router\\', router_Router);\\n}\\n/**\\n * @usageNotes\\n *\\n * RouterModule can be imported multiple times: once per lazily-loaded bundle.\\n * Since the router deals with a global shared resource--location, we cannot have\\n * more than one router service active.\\n *\\n * That is why there are two ways to create the module: `RouterModule.forRoot` and\\n * `RouterModule.forChild`.\\n *\\n * * `forRoot` creates a module that contains all the directives, the given routes, and the router\\n *   service itself.\\n * * `forChild` creates a module that contains all the directives and the given routes, but does not\\n *   include the router service.\\n *\\n * When registered at the root, the module should be used as follows\\n *\\n * ```\\n * @NgModule({\\n *   imports: [RouterModule.forRoot(ROUTES)]\\n * })\\n * class MyNgModule {}\\n * ```\\n *\\n * For submodules and lazy loaded submodules the module should be used as follows:\\n *\\n * ```\\n * @NgModule({\\n *   imports: [RouterModule.forChild(ROUTES)]\\n * })\\n * class MyNgModule {}\\n * ```\\n *\\n * @description\\n *\\n * Adds router directives and providers.\\n *\\n * Managing state transitions is one of the hardest parts of building applications. This is\\n * especially true on the web, where you also need to ensure that the state is reflected in the URL.\\n * In addition, we often want to split applications into multiple bundles and load them on demand.\\n * Doing this transparently is not trivial.\\n *\\n * The Angular router solves these problems. Using the router, you can declaratively specify\\n * application states, manage state transitions while taking care of the URL, and load bundles on\\n * demand.\\n *\\n * [Read this developer guide](https://angular.io/docs/ts/latest/guide/router.html) to get an\\n * overview of how the router should be used.\\n *\\n * @publicApi\\n */\\nvar router_RouterModule = /** @class */ (function () {\\n    // Note: We are injecting the Router so it gets created eagerly...\\n    function RouterModule(guard, router) {\\n    }\\n    RouterModule_1 = RouterModule;\\n    /**\\n     * Creates a module with all the router providers and directives. It also optionally sets up an\\n     * application listener to perform an initial navigation.\\n     *\\n     * Options (see `ExtraOptions`):\\n     * * `enableTracing` makes the router log all its internal events to the console.\\n     * * `useHash` enables the location strategy that uses the URL fragment instead of the history\\n     * API.\\n     * * `initialNavigation` disables the initial navigation.\\n     * * `errorHandler` provides a custom error handler.\\n     * * `preloadingStrategy` configures a preloading strategy (see `PreloadAllModules`).\\n     * * `onSameUrlNavigation` configures how the router handles navigation to the current URL. See\\n     * `ExtraOptions` for more details.\\n     * * `paramsInheritanceStrategy` defines how the router merges params, data and resolved data\\n     * from parent to child routes.\\n     */\\n    RouterModule.forRoot = function (routes, config) {\\n        return {\\n            ngModule: RouterModule_1,\\n            providers: [\\n                ROUTER_PROVIDERS,\\n                provideRoutes(routes),\\n                {\\n                    provide: ROUTER_FORROOT_GUARD,\\n                    useFactory: provideForRootGuard,\\n                    deps: [[router_Router, new core[\"Optional\"](), new core[\"SkipSelf\"]()]]\\n                },\\n                { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },\\n                {\\n                    provide: common[\"LocationStrategy\"],\\n                    useFactory: provideLocationStrategy,\\n                    deps: [\\n                        common[\"PlatformLocation\"], [new core[\"Inject\"](common[\"APP_BASE_HREF\"]), new core[\"Optional\"]()], ROUTER_CONFIGURATION\\n                    ]\\n                },\\n                {\\n                    provide: RouterScroller,\\n                    useFactory: createRouterScroller,\\n                    deps: [router_Router, common[\"ViewportScroller\"], ROUTER_CONFIGURATION]\\n                },\\n                {\\n                    provide: PreloadingStrategy,\\n                    useExisting: config && config.preloadingStrategy ? config.preloadingStrategy :\\n                        router_NoPreloading\\n                },\\n                { provide: core[\"NgProbeToken\"], multi: true, useFactory: routerNgProbeToken },\\n                provideRouterInitializer(),\\n            ],\\n        };\\n    };\\n    /**\\n     * Creates a module with all the router directives and a provider registering routes.\\n     */\\n    RouterModule.forChild = function (routes) {\\n        return { ngModule: RouterModule_1, providers: [provideRoutes(routes)] };\\n    };\\n    var RouterModule_1;\\n    RouterModule = RouterModule_1 = Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"NgModule\"])({\\n            declarations: ROUTER_DIRECTIVES,\\n            exports: ROUTER_DIRECTIVES,\\n            entryComponents: [router_EmptyOutletComponent]\\n        }),\\n        Object(tslib_es6[\"e\" /* __param */])(0, Object(core[\"Optional\"])()), Object(tslib_es6[\"e\" /* __param */])(0, Object(core[\"Inject\"])(ROUTER_FORROOT_GUARD)), Object(tslib_es6[\"e\" /* __param */])(1, Object(core[\"Optional\"])()),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:paramtypes\", [Object, router_Router])\\n    ], RouterModule);\\n    return RouterModule;\\n}());\\nfunction createRouterScroller(router, viewportScroller, config) {\\n    if (config.scrollOffset) {\\n        viewportScroller.setOffset(config.scrollOffset);\\n    }\\n    return new RouterScroller(router, viewportScroller, config);\\n}\\nfunction provideLocationStrategy(platformLocationStrategy, baseHref, options) {\\n    if (options === void 0) { options = {}; }\\n    return options.useHash ? new common[\"HashLocationStrategy\"](platformLocationStrategy, baseHref) :\\n        new common[\"PathLocationStrategy\"](platformLocationStrategy, baseHref);\\n}\\nfunction provideForRootGuard(router) {\\n    if (router) {\\n        throw new Error(\"RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.\");\\n    }\\n    return \\'guarded\\';\\n}\\n/**\\n * @description\\n *\\n * Registers routes.\\n *\\n * @usageNotes\\n * ### Example\\n *\\n * ```\\n * @NgModule({\\n *   imports: [RouterModule.forChild(ROUTES)],\\n *   providers: [provideRoutes(EXTRA_ROUTES)]\\n * })\\n * class MyNgModule {}\\n * ```\\n *\\n * @publicApi\\n */\\nfunction provideRoutes(routes) {\\n    return [\\n        { provide: core[\"ANALYZE_FOR_ENTRY_COMPONENTS\"], multi: true, useValue: routes },\\n        { provide: ROUTES, multi: true, useValue: routes },\\n    ];\\n}\\nfunction setupRouter(ref, urlSerializer, contexts, location, injector, loader, compiler, config, opts, urlHandlingStrategy, routeReuseStrategy) {\\n    if (opts === void 0) { opts = {}; }\\n    var router = new router_Router(null, urlSerializer, contexts, location, injector, loader, compiler, flatten(config));\\n    if (urlHandlingStrategy) {\\n        router.urlHandlingStrategy = urlHandlingStrategy;\\n    }\\n    if (routeReuseStrategy) {\\n        router.routeReuseStrategy = routeReuseStrategy;\\n    }\\n    if (opts.errorHandler) {\\n        router.errorHandler = opts.errorHandler;\\n    }\\n    if (opts.malformedUriErrorHandler) {\\n        router.malformedUriErrorHandler = opts.malformedUriErrorHandler;\\n    }\\n    if (opts.enableTracing) {\\n        var dom_1 = Object(platform_browser[\"ɵgetDOM\"])();\\n        router.events.subscribe(function (e) {\\n            dom_1.logGroup(\"Router Event: \" + e.constructor.name);\\n            dom_1.log(e.toString());\\n            dom_1.log(e);\\n            dom_1.logGroupEnd();\\n        });\\n    }\\n    if (opts.onSameUrlNavigation) {\\n        router.onSameUrlNavigation = opts.onSameUrlNavigation;\\n    }\\n    if (opts.paramsInheritanceStrategy) {\\n        router.paramsInheritanceStrategy = opts.paramsInheritanceStrategy;\\n    }\\n    if (opts.urlUpdateStrategy) {\\n        router.urlUpdateStrategy = opts.urlUpdateStrategy;\\n    }\\n    if (opts.relativeLinkResolution) {\\n        router.relativeLinkResolution = opts.relativeLinkResolution;\\n    }\\n    return router;\\n}\\nfunction rootRoute(router) {\\n    return router.routerState.root;\\n}\\n/**\\n * To initialize the router properly we need to do in two steps:\\n *\\n * We need to start the navigation in a APP_INITIALIZER to block the bootstrap if\\n * a resolver or a guards executes asynchronously. Second, we need to actually run\\n * activation in a BOOTSTRAP_LISTENER. We utilize the afterPreactivation\\n * hook provided by the router to do that.\\n *\\n * The router navigation starts, reaches the point when preactivation is done, and then\\n * pauses. It waits for the hook to be resolved. We then resolve it only in a bootstrap listener.\\n */\\nvar router_RouterInitializer = /** @class */ (function () {\\n    function RouterInitializer(injector) {\\n        this.injector = injector;\\n        this.initNavigation = false;\\n        this.resultOfPreactivationDone = new Subject[\"a\" /* Subject */]();\\n    }\\n    RouterInitializer.prototype.appInitializer = function () {\\n        var _this = this;\\n        var p = this.injector.get(common[\"LOCATION_INITIALIZED\"], Promise.resolve(null));\\n        return p.then(function () {\\n            var resolve = null;\\n            var res = new Promise(function (r) { return resolve = r; });\\n            var router = _this.injector.get(router_Router);\\n            var opts = _this.injector.get(ROUTER_CONFIGURATION);\\n            if (_this.isLegacyDisabled(opts) || _this.isLegacyEnabled(opts)) {\\n                resolve(true);\\n            }\\n            else if (opts.initialNavigation === \\'disabled\\') {\\n                router.setUpLocationChangeListener();\\n                resolve(true);\\n            }\\n            else if (opts.initialNavigation === \\'enabled\\') {\\n                router.hooks.afterPreactivation = function () {\\n                    // only the initial navigation should be delayed\\n                    if (!_this.initNavigation) {\\n                        _this.initNavigation = true;\\n                        resolve(true);\\n                        return _this.resultOfPreactivationDone;\\n                        // subsequent navigations should not be delayed\\n                    }\\n                    else {\\n                        return Object(of[\"a\" /* of */])(null);\\n                    }\\n                };\\n                router.initialNavigation();\\n            }\\n            else {\\n                throw new Error(\"Invalid initialNavigation options: \\'\" + opts.initialNavigation + \"\\'\");\\n            }\\n            return res;\\n        });\\n    };\\n    RouterInitializer.prototype.bootstrapListener = function (bootstrappedComponentRef) {\\n        var opts = this.injector.get(ROUTER_CONFIGURATION);\\n        var preloader = this.injector.get(router_RouterPreloader);\\n        var routerScroller = this.injector.get(RouterScroller);\\n        var router = this.injector.get(router_Router);\\n        var ref = this.injector.get(core[\"ApplicationRef\"]);\\n        if (bootstrappedComponentRef !== ref.components[0]) {\\n            return;\\n        }\\n        if (this.isLegacyEnabled(opts)) {\\n            router.initialNavigation();\\n        }\\n        else if (this.isLegacyDisabled(opts)) {\\n            router.setUpLocationChangeListener();\\n        }\\n        preloader.setUpPreloading();\\n        routerScroller.init();\\n        router.resetRootComponentType(ref.componentTypes[0]);\\n        this.resultOfPreactivationDone.next(null);\\n        this.resultOfPreactivationDone.complete();\\n    };\\n    RouterInitializer.prototype.isLegacyEnabled = function (opts) {\\n        return opts.initialNavigation === \\'legacy_enabled\\' || opts.initialNavigation === true ||\\n            opts.initialNavigation === undefined;\\n    };\\n    RouterInitializer.prototype.isLegacyDisabled = function (opts) {\\n        return opts.initialNavigation === \\'legacy_disabled\\' || opts.initialNavigation === false;\\n    };\\n    RouterInitializer = Object(tslib_es6[\"b\" /* __decorate */])([\\n        Object(core[\"Injectable\"])(),\\n        Object(tslib_es6[\"d\" /* __metadata */])(\"design:paramtypes\", [core[\"Injector\"]])\\n    ], RouterInitializer);\\n    return RouterInitializer;\\n}());\\nfunction getAppInitializer(r) {\\n    return r.appInitializer.bind(r);\\n}\\nfunction getBootstrapListener(r) {\\n    return r.bootstrapListener.bind(r);\\n}\\n/**\\n * A token for the router initializer that will be called after the app is bootstrapped.\\n *\\n * @publicApi\\n */\\nvar ROUTER_INITIALIZER = new core[\"InjectionToken\"](\\'Router Initializer\\');\\nfunction provideRouterInitializer() {\\n    return [\\n        router_RouterInitializer,\\n        {\\n            provide: core[\"APP_INITIALIZER\"],\\n            multi: true,\\n            useFactory: getAppInitializer,\\n            deps: [router_RouterInitializer]\\n        },\\n        { provide: ROUTER_INITIALIZER, useFactory: getBootstrapListener, deps: [router_RouterInitializer] },\\n        { provide: core[\"APP_BOOTSTRAP_LISTENER\"], multi: true, useExisting: ROUTER_INITIALIZER },\\n    ];\\n}\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n/**\\n * @publicApi\\n */\\nvar VERSION = new core[\"Version\"](\\'7.0.4\\');\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n// This file only reexports content of the `src` folder. Keep it that way.\\n\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n */\\n\\n/**\\n * Generated bundle index. Do not edit.\\n */\\n\\n\\n//# sourceMappingURL=router.js.map\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///354\\n')},54:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval(\"/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return EmptyError; });\\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\\nfunction EmptyErrorImpl() {\\n    Error.call(this);\\n    this.message = 'no elements in sequence';\\n    this.name = 'EmptyError';\\n    return this;\\n}\\nEmptyErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);\\nvar EmptyError = EmptyErrorImpl;\\n//# sourceMappingURL=EmptyError.js.map\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL0VtcHR5RXJyb3IuanM/ZGRmNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5mdW5jdGlvbiBFbXB0eUVycm9ySW1wbCgpIHtcbiAgICBFcnJvci5jYWxsKHRoaXMpO1xuICAgIHRoaXMubWVzc2FnZSA9ICdubyBlbGVtZW50cyBpbiBzZXF1ZW5jZSc7XG4gICAgdGhpcy5uYW1lID0gJ0VtcHR5RXJyb3InO1xuICAgIHJldHVybiB0aGlzO1xufVxuRW1wdHlFcnJvckltcGwucHJvdG90eXBlID0gLypAX19QVVJFX18qLyBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG5leHBvcnQgdmFyIEVtcHR5RXJyb3IgPSBFbXB0eUVycm9ySW1wbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUVtcHR5RXJyb3IuanMubWFwXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///54\\n\")},71:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval(\"/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return ArgumentOutOfRangeError; });\\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\\nfunction ArgumentOutOfRangeErrorImpl() {\\n    Error.call(this);\\n    this.message = 'argument out of range';\\n    this.name = 'ArgumentOutOfRangeError';\\n    return this;\\n}\\nArgumentOutOfRangeErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);\\nvar ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl;\\n//# sourceMappingURL=ArgumentOutOfRangeError.js.map\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL0FyZ3VtZW50T3V0T2ZSYW5nZUVycm9yLmpzPzZmYjkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZnVuY3Rpb24gQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JJbXBsKCkge1xuICAgIEVycm9yLmNhbGwodGhpcyk7XG4gICAgdGhpcy5tZXNzYWdlID0gJ2FyZ3VtZW50IG91dCBvZiByYW5nZSc7XG4gICAgdGhpcy5uYW1lID0gJ0FyZ3VtZW50T3V0T2ZSYW5nZUVycm9yJztcbiAgICByZXR1cm4gdGhpcztcbn1cbkFyZ3VtZW50T3V0T2ZSYW5nZUVycm9ySW1wbC5wcm90b3R5cGUgPSAvKkBfX1BVUkVfXyovIE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbmV4cG9ydCB2YXIgQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IgPSBBcmd1bWVudE91dE9mUmFuZ2VFcnJvckltcGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bcmd1bWVudE91dE9mUmFuZ2VFcnJvci5qcy5tYXBcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///71\\n\")},72:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/isScheduler.js\\nvar isScheduler = __webpack_require__(17);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/fromArray.js\\nvar fromArray = __webpack_require__(27);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/empty.js\\nvar empty = __webpack_require__(11);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Observable.js + 1 modules\\nvar Observable = __webpack_require__(4);\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/scalar.js\\n/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\\n\\nfunction scalar(value) {\\n    var result = new Observable[\"a\" /* Observable */](function (subscriber) {\\n        subscriber.next(value);\\n        subscriber.complete();\\n    });\\n    result._isScalar = true;\\n    result.value = value;\\n    return result;\\n}\\n//# sourceMappingURL=scalar.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/of.js\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return of; });\\n/** PURE_IMPORTS_START _util_isScheduler,_fromArray,_empty,_scalar PURE_IMPORTS_END */\\n\\n\\n\\n\\nfunction of() {\\n    var args = [];\\n    for (var _i = 0; _i < arguments.length; _i++) {\\n        args[_i] = arguments[_i];\\n    }\\n    var scheduler = args[args.length - 1];\\n    if (Object(isScheduler[\"a\" /* isScheduler */])(scheduler)) {\\n        args.pop();\\n    }\\n    else {\\n        scheduler = undefined;\\n    }\\n    switch (args.length) {\\n        case 0:\\n            return Object(empty[\"b\" /* empty */])(scheduler);\\n        case 1:\\n            return scheduler ? Object(fromArray[\"a\" /* fromArray */])(args, scheduler) : scalar(args[0]);\\n        default:\\n            return Object(fromArray[\"a\" /* fromArray */])(args, scheduler);\\n    }\\n}\\n//# sourceMappingURL=of.js.map\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL3NjYWxhci5qcz8zZDRmIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvb2YuanM/MTdmNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9PYnNlcnZhYmxlIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2FsYXIodmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgIH0pO1xuICAgIHJlc3VsdC5faXNTY2FsYXIgPSB0cnVlO1xuICAgIHJlc3VsdC52YWx1ZSA9IHZhbHVlO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2FsYXIuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF91dGlsX2lzU2NoZWR1bGVyLF9mcm9tQXJyYXksX2VtcHR5LF9zY2FsYXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgaXNTY2hlZHVsZXIgfSBmcm9tICcuLi91dGlsL2lzU2NoZWR1bGVyJztcbmltcG9ydCB7IGZyb21BcnJheSB9IGZyb20gJy4vZnJvbUFycmF5JztcbmltcG9ydCB7IGVtcHR5IH0gZnJvbSAnLi9lbXB0eSc7XG5pbXBvcnQgeyBzY2FsYXIgfSBmcm9tICcuL3NjYWxhcic7XG5leHBvcnQgZnVuY3Rpb24gb2YoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBzY2hlZHVsZXIgPSBhcmdzW2FyZ3MubGVuZ3RoIC0gMV07XG4gICAgaWYgKGlzU2NoZWR1bGVyKHNjaGVkdWxlcikpIHtcbiAgICAgICAgYXJncy5wb3AoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHNjaGVkdWxlciA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICByZXR1cm4gZW1wdHkoc2NoZWR1bGVyKTtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlciA/IGZyb21BcnJheShhcmdzLCBzY2hlZHVsZXIpIDogc2NhbGFyKGFyZ3NbMF0pO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGZyb21BcnJheShhcmdzLCBzY2hlZHVsZXIpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9mLmpzLm1hcFxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDWEE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///72\\n')},90:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Observable.js + 1 modules\\nvar Observable = __webpack_require__(4);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/ConnectableObservable.js\\nvar ConnectableObservable = __webpack_require__(91);\\n\\n// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js\\nvar tslib_es6 = __webpack_require__(0);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Subscriber.js\\nvar Subscriber = __webpack_require__(5);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Subscription.js + 2 modules\\nvar Subscription = __webpack_require__(6);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Subject.js\\nvar Subject = __webpack_require__(20);\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/groupBy.js\\n/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription,_Observable,_Subject PURE_IMPORTS_END */\\n\\n\\n\\n\\n\\nfunction groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\\n    return function (source) {\\n        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\\n    };\\n}\\nvar GroupByOperator = /*@__PURE__*/ (function () {\\n    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {\\n        this.keySelector = keySelector;\\n        this.elementSelector = elementSelector;\\n        this.durationSelector = durationSelector;\\n        this.subjectSelector = subjectSelector;\\n    }\\n    GroupByOperator.prototype.call = function (subscriber, source) {\\n        return source.subscribe(new groupBy_GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\\n    };\\n    return GroupByOperator;\\n}());\\nvar groupBy_GroupBySubscriber = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](GroupBySubscriber, _super);\\n    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\\n        var _this = _super.call(this, destination) || this;\\n        _this.keySelector = keySelector;\\n        _this.elementSelector = elementSelector;\\n        _this.durationSelector = durationSelector;\\n        _this.subjectSelector = subjectSelector;\\n        _this.groups = null;\\n        _this.attemptedToUnsubscribe = false;\\n        _this.count = 0;\\n        return _this;\\n    }\\n    GroupBySubscriber.prototype._next = function (value) {\\n        var key;\\n        try {\\n            key = this.keySelector(value);\\n        }\\n        catch (err) {\\n            this.error(err);\\n            return;\\n        }\\n        this._group(value, key);\\n    };\\n    GroupBySubscriber.prototype._group = function (value, key) {\\n        var groups = this.groups;\\n        if (!groups) {\\n            groups = this.groups = new Map();\\n        }\\n        var group = groups.get(key);\\n        var element;\\n        if (this.elementSelector) {\\n            try {\\n                element = this.elementSelector(value);\\n            }\\n            catch (err) {\\n                this.error(err);\\n            }\\n        }\\n        else {\\n            element = value;\\n        }\\n        if (!group) {\\n            group = (this.subjectSelector ? this.subjectSelector() : new Subject[\"a\" /* Subject */]());\\n            groups.set(key, group);\\n            var groupedObservable = new groupBy_GroupedObservable(key, group, this);\\n            this.destination.next(groupedObservable);\\n            if (this.durationSelector) {\\n                var duration = void 0;\\n                try {\\n                    duration = this.durationSelector(new groupBy_GroupedObservable(key, group));\\n                }\\n                catch (err) {\\n                    this.error(err);\\n                    return;\\n                }\\n                this.add(duration.subscribe(new groupBy_GroupDurationSubscriber(key, group, this)));\\n            }\\n        }\\n        if (!group.closed) {\\n            group.next(element);\\n        }\\n    };\\n    GroupBySubscriber.prototype._error = function (err) {\\n        var groups = this.groups;\\n        if (groups) {\\n            groups.forEach(function (group, key) {\\n                group.error(err);\\n            });\\n            groups.clear();\\n        }\\n        this.destination.error(err);\\n    };\\n    GroupBySubscriber.prototype._complete = function () {\\n        var groups = this.groups;\\n        if (groups) {\\n            groups.forEach(function (group, key) {\\n                group.complete();\\n            });\\n            groups.clear();\\n        }\\n        this.destination.complete();\\n    };\\n    GroupBySubscriber.prototype.removeGroup = function (key) {\\n        this.groups.delete(key);\\n    };\\n    GroupBySubscriber.prototype.unsubscribe = function () {\\n        if (!this.closed) {\\n            this.attemptedToUnsubscribe = true;\\n            if (this.count === 0) {\\n                _super.prototype.unsubscribe.call(this);\\n            }\\n        }\\n    };\\n    return GroupBySubscriber;\\n}(Subscriber[\"a\" /* Subscriber */]));\\nvar groupBy_GroupDurationSubscriber = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](GroupDurationSubscriber, _super);\\n    function GroupDurationSubscriber(key, group, parent) {\\n        var _this = _super.call(this, group) || this;\\n        _this.key = key;\\n        _this.group = group;\\n        _this.parent = parent;\\n        return _this;\\n    }\\n    GroupDurationSubscriber.prototype._next = function (value) {\\n        this.complete();\\n    };\\n    GroupDurationSubscriber.prototype._unsubscribe = function () {\\n        var _a = this, parent = _a.parent, key = _a.key;\\n        this.key = this.parent = null;\\n        if (parent) {\\n            parent.removeGroup(key);\\n        }\\n    };\\n    return GroupDurationSubscriber;\\n}(Subscriber[\"a\" /* Subscriber */]));\\nvar groupBy_GroupedObservable = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](GroupedObservable, _super);\\n    function GroupedObservable(key, groupSubject, refCountSubscription) {\\n        var _this = _super.call(this) || this;\\n        _this.key = key;\\n        _this.groupSubject = groupSubject;\\n        _this.refCountSubscription = refCountSubscription;\\n        return _this;\\n    }\\n    GroupedObservable.prototype._subscribe = function (subscriber) {\\n        var subscription = new Subscription[\"a\" /* Subscription */]();\\n        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;\\n        if (refCountSubscription && !refCountSubscription.closed) {\\n            subscription.add(new groupBy_InnerRefCountSubscription(refCountSubscription));\\n        }\\n        subscription.add(groupSubject.subscribe(subscriber));\\n        return subscription;\\n    };\\n    return GroupedObservable;\\n}(Observable[\"a\" /* Observable */]));\\n\\nvar groupBy_InnerRefCountSubscription = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](InnerRefCountSubscription, _super);\\n    function InnerRefCountSubscription(parent) {\\n        var _this = _super.call(this) || this;\\n        _this.parent = parent;\\n        parent.count++;\\n        return _this;\\n    }\\n    InnerRefCountSubscription.prototype.unsubscribe = function () {\\n        var parent = this.parent;\\n        if (!parent.closed && !this.closed) {\\n            _super.prototype.unsubscribe.call(this);\\n            parent.count -= 1;\\n            if (parent.count === 0 && parent.attemptedToUnsubscribe) {\\n                parent.unsubscribe();\\n            }\\n        }\\n    };\\n    return InnerRefCountSubscription;\\n}(Subscription[\"a\" /* Subscription */]));\\n//# sourceMappingURL=groupBy.js.map\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/symbol/observable.js\\nvar symbol_observable = __webpack_require__(32);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/BehaviorSubject.js\\nvar BehaviorSubject = __webpack_require__(162);\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/Action.js\\n/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */\\n\\n\\nvar Action_Action = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](Action, _super);\\n    function Action(scheduler, work) {\\n        return _super.call(this) || this;\\n    }\\n    Action.prototype.schedule = function (state, delay) {\\n        if (delay === void 0) {\\n            delay = 0;\\n        }\\n        return this;\\n    };\\n    return Action;\\n}(Subscription[\"a\" /* Subscription */]));\\n\\n//# sourceMappingURL=Action.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/AsyncAction.js\\n/** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */\\n\\n\\nvar AsyncAction_AsyncAction = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](AsyncAction, _super);\\n    function AsyncAction(scheduler, work) {\\n        var _this = _super.call(this, scheduler, work) || this;\\n        _this.scheduler = scheduler;\\n        _this.work = work;\\n        _this.pending = false;\\n        return _this;\\n    }\\n    AsyncAction.prototype.schedule = function (state, delay) {\\n        if (delay === void 0) {\\n            delay = 0;\\n        }\\n        if (this.closed) {\\n            return this;\\n        }\\n        this.state = state;\\n        var id = this.id;\\n        var scheduler = this.scheduler;\\n        if (id != null) {\\n            this.id = this.recycleAsyncId(scheduler, id, delay);\\n        }\\n        this.pending = true;\\n        this.delay = delay;\\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\\n        return this;\\n    };\\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\\n        if (delay === void 0) {\\n            delay = 0;\\n        }\\n        return setInterval(scheduler.flush.bind(scheduler, this), delay);\\n    };\\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\\n        if (delay === void 0) {\\n            delay = 0;\\n        }\\n        if (delay !== null && this.delay === delay && this.pending === false) {\\n            return id;\\n        }\\n        clearInterval(id);\\n    };\\n    AsyncAction.prototype.execute = function (state, delay) {\\n        if (this.closed) {\\n            return new Error(\\'executing a cancelled action\\');\\n        }\\n        this.pending = false;\\n        var error = this._execute(state, delay);\\n        if (error) {\\n            return error;\\n        }\\n        else if (this.pending === false && this.id != null) {\\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\\n        }\\n    };\\n    AsyncAction.prototype._execute = function (state, delay) {\\n        var errored = false;\\n        var errorValue = undefined;\\n        try {\\n            this.work(state);\\n        }\\n        catch (e) {\\n            errored = true;\\n            errorValue = !!e && e || new Error(e);\\n        }\\n        if (errored) {\\n            this.unsubscribe();\\n            return errorValue;\\n        }\\n    };\\n    AsyncAction.prototype._unsubscribe = function () {\\n        var id = this.id;\\n        var scheduler = this.scheduler;\\n        var actions = scheduler.actions;\\n        var index = actions.indexOf(this);\\n        this.work = null;\\n        this.state = null;\\n        this.pending = false;\\n        this.scheduler = null;\\n        if (index !== -1) {\\n            actions.splice(index, 1);\\n        }\\n        if (id != null) {\\n            this.id = this.recycleAsyncId(scheduler, id, null);\\n        }\\n        this.delay = null;\\n    };\\n    return AsyncAction;\\n}(Action_Action));\\n\\n//# sourceMappingURL=AsyncAction.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/QueueAction.js\\n/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */\\n\\n\\nvar QueueAction_QueueAction = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](QueueAction, _super);\\n    function QueueAction(scheduler, work) {\\n        var _this = _super.call(this, scheduler, work) || this;\\n        _this.scheduler = scheduler;\\n        _this.work = work;\\n        return _this;\\n    }\\n    QueueAction.prototype.schedule = function (state, delay) {\\n        if (delay === void 0) {\\n            delay = 0;\\n        }\\n        if (delay > 0) {\\n            return _super.prototype.schedule.call(this, state, delay);\\n        }\\n        this.delay = delay;\\n        this.state = state;\\n        this.scheduler.flush(this);\\n        return this;\\n    };\\n    QueueAction.prototype.execute = function (state, delay) {\\n        return (delay > 0 || this.closed) ?\\n            _super.prototype.execute.call(this, state, delay) :\\n            this._execute(state, delay);\\n    };\\n    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {\\n        if (delay === void 0) {\\n            delay = 0;\\n        }\\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\\n        }\\n        return scheduler.flush(this);\\n    };\\n    return QueueAction;\\n}(AsyncAction_AsyncAction));\\n\\n//# sourceMappingURL=QueueAction.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/Scheduler.js\\nvar Scheduler = /*@__PURE__*/ (function () {\\n    function Scheduler(SchedulerAction, now) {\\n        if (now === void 0) {\\n            now = Scheduler.now;\\n        }\\n        this.SchedulerAction = SchedulerAction;\\n        this.now = now;\\n    }\\n    Scheduler.prototype.schedule = function (work, delay, state) {\\n        if (delay === void 0) {\\n            delay = 0;\\n        }\\n        return new this.SchedulerAction(this, work).schedule(state, delay);\\n    };\\n    Scheduler.now = function () { return Date.now(); };\\n    return Scheduler;\\n}());\\n\\n//# sourceMappingURL=Scheduler.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/AsyncScheduler.js\\n/** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */\\n\\n\\nvar AsyncScheduler_AsyncScheduler = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](AsyncScheduler, _super);\\n    function AsyncScheduler(SchedulerAction, now) {\\n        if (now === void 0) {\\n            now = Scheduler.now;\\n        }\\n        var _this = _super.call(this, SchedulerAction, function () {\\n            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {\\n                return AsyncScheduler.delegate.now();\\n            }\\n            else {\\n                return now();\\n            }\\n        }) || this;\\n        _this.actions = [];\\n        _this.active = false;\\n        _this.scheduled = undefined;\\n        return _this;\\n    }\\n    AsyncScheduler.prototype.schedule = function (work, delay, state) {\\n        if (delay === void 0) {\\n            delay = 0;\\n        }\\n        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\\n            return AsyncScheduler.delegate.schedule(work, delay, state);\\n        }\\n        else {\\n            return _super.prototype.schedule.call(this, work, delay, state);\\n        }\\n    };\\n    AsyncScheduler.prototype.flush = function (action) {\\n        var actions = this.actions;\\n        if (this.active) {\\n            actions.push(action);\\n            return;\\n        }\\n        var error;\\n        this.active = true;\\n        do {\\n            if (error = action.execute(action.state, action.delay)) {\\n                break;\\n            }\\n        } while (action = actions.shift());\\n        this.active = false;\\n        if (error) {\\n            while (action = actions.shift()) {\\n                action.unsubscribe();\\n            }\\n            throw error;\\n        }\\n    };\\n    return AsyncScheduler;\\n}(Scheduler));\\n\\n//# sourceMappingURL=AsyncScheduler.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/QueueScheduler.js\\n/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */\\n\\n\\nvar QueueScheduler_QueueScheduler = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](QueueScheduler, _super);\\n    function QueueScheduler() {\\n        return _super !== null && _super.apply(this, arguments) || this;\\n    }\\n    return QueueScheduler;\\n}(AsyncScheduler_AsyncScheduler));\\n\\n//# sourceMappingURL=QueueScheduler.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/queue.js\\n/** PURE_IMPORTS_START _QueueAction,_QueueScheduler PURE_IMPORTS_END */\\n\\n\\nvar queue = /*@__PURE__*/ new QueueScheduler_QueueScheduler(QueueAction_QueueAction);\\n//# sourceMappingURL=queue.js.map\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/empty.js\\nvar empty = __webpack_require__(11);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/of.js + 1 modules\\nvar of = __webpack_require__(72);\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/throwError.js\\n/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\\n\\nfunction throwError(error, scheduler) {\\n    if (!scheduler) {\\n        return new Observable[\"a\" /* Observable */](function (subscriber) { return subscriber.error(error); });\\n    }\\n    else {\\n        return new Observable[\"a\" /* Observable */](function (subscriber) { return scheduler.schedule(dispatch, 0, { error: error, subscriber: subscriber }); });\\n    }\\n}\\nfunction dispatch(_a) {\\n    var error = _a.error, subscriber = _a.subscriber;\\n    subscriber.error(error);\\n}\\n//# sourceMappingURL=throwError.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/Notification.js\\n/** PURE_IMPORTS_START _observable_empty,_observable_of,_observable_throwError PURE_IMPORTS_END */\\n\\n\\n\\nvar Notification_Notification = /*@__PURE__*/ (function () {\\n    function Notification(kind, value, error) {\\n        this.kind = kind;\\n        this.value = value;\\n        this.error = error;\\n        this.hasValue = kind === \\'N\\';\\n    }\\n    Notification.prototype.observe = function (observer) {\\n        switch (this.kind) {\\n            case \\'N\\':\\n                return observer.next && observer.next(this.value);\\n            case \\'E\\':\\n                return observer.error && observer.error(this.error);\\n            case \\'C\\':\\n                return observer.complete && observer.complete();\\n        }\\n    };\\n    Notification.prototype.do = function (next, error, complete) {\\n        var kind = this.kind;\\n        switch (kind) {\\n            case \\'N\\':\\n                return next && next(this.value);\\n            case \\'E\\':\\n                return error && error(this.error);\\n            case \\'C\\':\\n                return complete && complete();\\n        }\\n    };\\n    Notification.prototype.accept = function (nextOrObserver, error, complete) {\\n        if (nextOrObserver && typeof nextOrObserver.next === \\'function\\') {\\n            return this.observe(nextOrObserver);\\n        }\\n        else {\\n            return this.do(nextOrObserver, error, complete);\\n        }\\n    };\\n    Notification.prototype.toObservable = function () {\\n        var kind = this.kind;\\n        switch (kind) {\\n            case \\'N\\':\\n                return Object(of[\"a\" /* of */])(this.value);\\n            case \\'E\\':\\n                return throwError(this.error);\\n            case \\'C\\':\\n                return Object(empty[\"b\" /* empty */])();\\n        }\\n        throw new Error(\\'unexpected notification kind value\\');\\n    };\\n    Notification.createNext = function (value) {\\n        if (typeof value !== \\'undefined\\') {\\n            return new Notification(\\'N\\', value);\\n        }\\n        return Notification.undefinedValueNotification;\\n    };\\n    Notification.createError = function (err) {\\n        return new Notification(\\'E\\', undefined, err);\\n    };\\n    Notification.createComplete = function () {\\n        return Notification.completeNotification;\\n    };\\n    Notification.completeNotification = new Notification(\\'C\\');\\n    Notification.undefinedValueNotification = new Notification(\\'N\\', undefined);\\n    return Notification;\\n}());\\n\\n//# sourceMappingURL=Notification.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/observeOn.js\\n/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */\\n\\n\\n\\nfunction observeOn(scheduler, delay) {\\n    if (delay === void 0) {\\n        delay = 0;\\n    }\\n    return function observeOnOperatorFunction(source) {\\n        return source.lift(new ObserveOnOperator(scheduler, delay));\\n    };\\n}\\nvar ObserveOnOperator = /*@__PURE__*/ (function () {\\n    function ObserveOnOperator(scheduler, delay) {\\n        if (delay === void 0) {\\n            delay = 0;\\n        }\\n        this.scheduler = scheduler;\\n        this.delay = delay;\\n    }\\n    ObserveOnOperator.prototype.call = function (subscriber, source) {\\n        return source.subscribe(new observeOn_ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\\n    };\\n    return ObserveOnOperator;\\n}());\\n\\nvar observeOn_ObserveOnSubscriber = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](ObserveOnSubscriber, _super);\\n    function ObserveOnSubscriber(destination, scheduler, delay) {\\n        if (delay === void 0) {\\n            delay = 0;\\n        }\\n        var _this = _super.call(this, destination) || this;\\n        _this.scheduler = scheduler;\\n        _this.delay = delay;\\n        return _this;\\n    }\\n    ObserveOnSubscriber.dispatch = function (arg) {\\n        var notification = arg.notification, destination = arg.destination;\\n        notification.observe(destination);\\n        this.unsubscribe();\\n    };\\n    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\\n        var destination = this.destination;\\n        destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\\n    };\\n    ObserveOnSubscriber.prototype._next = function (value) {\\n        this.scheduleMessage(Notification_Notification.createNext(value));\\n    };\\n    ObserveOnSubscriber.prototype._error = function (err) {\\n        this.scheduleMessage(Notification_Notification.createError(err));\\n        this.unsubscribe();\\n    };\\n    ObserveOnSubscriber.prototype._complete = function () {\\n        this.scheduleMessage(Notification_Notification.createComplete());\\n        this.unsubscribe();\\n    };\\n    return ObserveOnSubscriber;\\n}(Subscriber[\"a\" /* Subscriber */]));\\n\\nvar ObserveOnMessage = /*@__PURE__*/ (function () {\\n    function ObserveOnMessage(notification, destination) {\\n        this.notification = notification;\\n        this.destination = destination;\\n    }\\n    return ObserveOnMessage;\\n}());\\n\\n//# sourceMappingURL=observeOn.js.map\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js\\nvar ObjectUnsubscribedError = __webpack_require__(33);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/SubjectSubscription.js\\nvar SubjectSubscription = __webpack_require__(93);\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/ReplaySubject.js\\n/** PURE_IMPORTS_START tslib,_Subject,_scheduler_queue,_Subscription,_operators_observeOn,_util_ObjectUnsubscribedError,_SubjectSubscription PURE_IMPORTS_END */\\n\\n\\n\\n\\n\\n\\n\\nvar ReplaySubject_ReplaySubject = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](ReplaySubject, _super);\\n    function ReplaySubject(bufferSize, windowTime, scheduler) {\\n        if (bufferSize === void 0) {\\n            bufferSize = Number.POSITIVE_INFINITY;\\n        }\\n        if (windowTime === void 0) {\\n            windowTime = Number.POSITIVE_INFINITY;\\n        }\\n        var _this = _super.call(this) || this;\\n        _this.scheduler = scheduler;\\n        _this._events = [];\\n        _this._infiniteTimeWindow = false;\\n        _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\\n        _this._windowTime = windowTime < 1 ? 1 : windowTime;\\n        if (windowTime === Number.POSITIVE_INFINITY) {\\n            _this._infiniteTimeWindow = true;\\n            _this.next = _this.nextInfiniteTimeWindow;\\n        }\\n        else {\\n            _this.next = _this.nextTimeWindow;\\n        }\\n        return _this;\\n    }\\n    ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {\\n        var _events = this._events;\\n        _events.push(value);\\n        if (_events.length > this._bufferSize) {\\n            _events.shift();\\n        }\\n        _super.prototype.next.call(this, value);\\n    };\\n    ReplaySubject.prototype.nextTimeWindow = function (value) {\\n        this._events.push(new ReplayEvent(this._getNow(), value));\\n        this._trimBufferThenGetEvents();\\n        _super.prototype.next.call(this, value);\\n    };\\n    ReplaySubject.prototype._subscribe = function (subscriber) {\\n        var _infiniteTimeWindow = this._infiniteTimeWindow;\\n        var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();\\n        var scheduler = this.scheduler;\\n        var len = _events.length;\\n        var subscription;\\n        if (this.closed) {\\n            throw new ObjectUnsubscribedError[\"a\" /* ObjectUnsubscribedError */]();\\n        }\\n        else if (this.isStopped || this.hasError) {\\n            subscription = Subscription[\"a\" /* Subscription */].EMPTY;\\n        }\\n        else {\\n            this.observers.push(subscriber);\\n            subscription = new SubjectSubscription[\"a\" /* SubjectSubscription */](this, subscriber);\\n        }\\n        if (scheduler) {\\n            subscriber.add(subscriber = new observeOn_ObserveOnSubscriber(subscriber, scheduler));\\n        }\\n        if (_infiniteTimeWindow) {\\n            for (var i = 0; i < len && !subscriber.closed; i++) {\\n                subscriber.next(_events[i]);\\n            }\\n        }\\n        else {\\n            for (var i = 0; i < len && !subscriber.closed; i++) {\\n                subscriber.next(_events[i].value);\\n            }\\n        }\\n        if (this.hasError) {\\n            subscriber.error(this.thrownError);\\n        }\\n        else if (this.isStopped) {\\n            subscriber.complete();\\n        }\\n        return subscription;\\n    };\\n    ReplaySubject.prototype._getNow = function () {\\n        return (this.scheduler || queue).now();\\n    };\\n    ReplaySubject.prototype._trimBufferThenGetEvents = function () {\\n        var now = this._getNow();\\n        var _bufferSize = this._bufferSize;\\n        var _windowTime = this._windowTime;\\n        var _events = this._events;\\n        var eventsCount = _events.length;\\n        var spliceCount = 0;\\n        while (spliceCount < eventsCount) {\\n            if ((now - _events[spliceCount].time) < _windowTime) {\\n                break;\\n            }\\n            spliceCount++;\\n        }\\n        if (eventsCount > _bufferSize) {\\n            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\\n        }\\n        if (spliceCount > 0) {\\n            _events.splice(0, spliceCount);\\n        }\\n        return _events;\\n    };\\n    return ReplaySubject;\\n}(Subject[\"a\" /* Subject */]));\\n\\nvar ReplayEvent = /*@__PURE__*/ (function () {\\n    function ReplayEvent(time, value) {\\n        this.time = time;\\n        this.value = value;\\n    }\\n    return ReplayEvent;\\n}());\\n//# sourceMappingURL=ReplaySubject.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/AsyncSubject.js\\n/** PURE_IMPORTS_START tslib,_Subject,_Subscription PURE_IMPORTS_END */\\n\\n\\n\\nvar AsyncSubject_AsyncSubject = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](AsyncSubject, _super);\\n    function AsyncSubject() {\\n        var _this = _super !== null && _super.apply(this, arguments) || this;\\n        _this.value = null;\\n        _this.hasNext = false;\\n        _this.hasCompleted = false;\\n        return _this;\\n    }\\n    AsyncSubject.prototype._subscribe = function (subscriber) {\\n        if (this.hasError) {\\n            subscriber.error(this.thrownError);\\n            return Subscription[\"a\" /* Subscription */].EMPTY;\\n        }\\n        else if (this.hasCompleted && this.hasNext) {\\n            subscriber.next(this.value);\\n            subscriber.complete();\\n            return Subscription[\"a\" /* Subscription */].EMPTY;\\n        }\\n        return _super.prototype._subscribe.call(this, subscriber);\\n    };\\n    AsyncSubject.prototype.next = function (value) {\\n        if (!this.hasCompleted) {\\n            this.value = value;\\n            this.hasNext = true;\\n        }\\n    };\\n    AsyncSubject.prototype.error = function (error) {\\n        if (!this.hasCompleted) {\\n            _super.prototype.error.call(this, error);\\n        }\\n    };\\n    AsyncSubject.prototype.complete = function () {\\n        this.hasCompleted = true;\\n        if (this.hasNext) {\\n            _super.prototype.next.call(this, this.value);\\n        }\\n        _super.prototype.complete.call(this);\\n    };\\n    return AsyncSubject;\\n}(Subject[\"a\" /* Subject */]));\\n\\n//# sourceMappingURL=AsyncSubject.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/Immediate.js\\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\\nvar nextHandle = 1;\\nvar tasksByHandle = {};\\nfunction runIfPresent(handle) {\\n    var cb = tasksByHandle[handle];\\n    if (cb) {\\n        cb();\\n    }\\n}\\nvar Immediate = {\\n    setImmediate: function (cb) {\\n        var handle = nextHandle++;\\n        tasksByHandle[handle] = cb;\\n        Promise.resolve().then(function () { return runIfPresent(handle); });\\n        return handle;\\n    },\\n    clearImmediate: function (handle) {\\n        delete tasksByHandle[handle];\\n    },\\n};\\n//# sourceMappingURL=Immediate.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/AsapAction.js\\n/** PURE_IMPORTS_START tslib,_util_Immediate,_AsyncAction PURE_IMPORTS_END */\\n\\n\\n\\nvar AsapAction_AsapAction = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](AsapAction, _super);\\n    function AsapAction(scheduler, work) {\\n        var _this = _super.call(this, scheduler, work) || this;\\n        _this.scheduler = scheduler;\\n        _this.work = work;\\n        return _this;\\n    }\\n    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\\n        if (delay === void 0) {\\n            delay = 0;\\n        }\\n        if (delay !== null && delay > 0) {\\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\\n        }\\n        scheduler.actions.push(this);\\n        return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\\n    };\\n    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\\n        if (delay === void 0) {\\n            delay = 0;\\n        }\\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\\n        }\\n        if (scheduler.actions.length === 0) {\\n            Immediate.clearImmediate(id);\\n            scheduler.scheduled = undefined;\\n        }\\n        return undefined;\\n    };\\n    return AsapAction;\\n}(AsyncAction_AsyncAction));\\n\\n//# sourceMappingURL=AsapAction.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/AsapScheduler.js\\n/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */\\n\\n\\nvar AsapScheduler_AsapScheduler = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](AsapScheduler, _super);\\n    function AsapScheduler() {\\n        return _super !== null && _super.apply(this, arguments) || this;\\n    }\\n    AsapScheduler.prototype.flush = function (action) {\\n        this.active = true;\\n        this.scheduled = undefined;\\n        var actions = this.actions;\\n        var error;\\n        var index = -1;\\n        var count = actions.length;\\n        action = action || actions.shift();\\n        do {\\n            if (error = action.execute(action.state, action.delay)) {\\n                break;\\n            }\\n        } while (++index < count && (action = actions.shift()));\\n        this.active = false;\\n        if (error) {\\n            while (++index < count && (action = actions.shift())) {\\n                action.unsubscribe();\\n            }\\n            throw error;\\n        }\\n    };\\n    return AsapScheduler;\\n}(AsyncScheduler_AsyncScheduler));\\n\\n//# sourceMappingURL=AsapScheduler.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/asap.js\\n/** PURE_IMPORTS_START _AsapAction,_AsapScheduler PURE_IMPORTS_END */\\n\\n\\nvar asap = /*@__PURE__*/ new AsapScheduler_AsapScheduler(AsapAction_AsapAction);\\n//# sourceMappingURL=asap.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/async.js\\n/** PURE_IMPORTS_START _AsyncAction,_AsyncScheduler PURE_IMPORTS_END */\\n\\n\\nvar async_async = /*@__PURE__*/ new AsyncScheduler_AsyncScheduler(AsyncAction_AsyncAction);\\n//# sourceMappingURL=async.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/AnimationFrameAction.js\\n/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */\\n\\n\\nvar AnimationFrameAction_AnimationFrameAction = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](AnimationFrameAction, _super);\\n    function AnimationFrameAction(scheduler, work) {\\n        var _this = _super.call(this, scheduler, work) || this;\\n        _this.scheduler = scheduler;\\n        _this.work = work;\\n        return _this;\\n    }\\n    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {\\n        if (delay === void 0) {\\n            delay = 0;\\n        }\\n        if (delay !== null && delay > 0) {\\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\\n        }\\n        scheduler.actions.push(this);\\n        return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () { return scheduler.flush(null); }));\\n    };\\n    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\\n        if (delay === void 0) {\\n            delay = 0;\\n        }\\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\\n        }\\n        if (scheduler.actions.length === 0) {\\n            cancelAnimationFrame(id);\\n            scheduler.scheduled = undefined;\\n        }\\n        return undefined;\\n    };\\n    return AnimationFrameAction;\\n}(AsyncAction_AsyncAction));\\n\\n//# sourceMappingURL=AnimationFrameAction.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/AnimationFrameScheduler.js\\n/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */\\n\\n\\nvar AnimationFrameScheduler_AnimationFrameScheduler = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](AnimationFrameScheduler, _super);\\n    function AnimationFrameScheduler() {\\n        return _super !== null && _super.apply(this, arguments) || this;\\n    }\\n    AnimationFrameScheduler.prototype.flush = function (action) {\\n        this.active = true;\\n        this.scheduled = undefined;\\n        var actions = this.actions;\\n        var error;\\n        var index = -1;\\n        var count = actions.length;\\n        action = action || actions.shift();\\n        do {\\n            if (error = action.execute(action.state, action.delay)) {\\n                break;\\n            }\\n        } while (++index < count && (action = actions.shift()));\\n        this.active = false;\\n        if (error) {\\n            while (++index < count && (action = actions.shift())) {\\n                action.unsubscribe();\\n            }\\n            throw error;\\n        }\\n    };\\n    return AnimationFrameScheduler;\\n}(AsyncScheduler_AsyncScheduler));\\n\\n//# sourceMappingURL=AnimationFrameScheduler.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/animationFrame.js\\n/** PURE_IMPORTS_START _AnimationFrameAction,_AnimationFrameScheduler PURE_IMPORTS_END */\\n\\n\\nvar animationFrame = /*@__PURE__*/ new AnimationFrameScheduler_AnimationFrameScheduler(AnimationFrameAction_AnimationFrameAction);\\n//# sourceMappingURL=animationFrame.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/VirtualTimeScheduler.js\\n/** PURE_IMPORTS_START tslib,_AsyncAction,_AsyncScheduler PURE_IMPORTS_END */\\n\\n\\n\\nvar VirtualTimeScheduler_VirtualTimeScheduler = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](VirtualTimeScheduler, _super);\\n    function VirtualTimeScheduler(SchedulerAction, maxFrames) {\\n        if (SchedulerAction === void 0) {\\n            SchedulerAction = VirtualTimeScheduler_VirtualAction;\\n        }\\n        if (maxFrames === void 0) {\\n            maxFrames = Number.POSITIVE_INFINITY;\\n        }\\n        var _this = _super.call(this, SchedulerAction, function () { return _this.frame; }) || this;\\n        _this.maxFrames = maxFrames;\\n        _this.frame = 0;\\n        _this.index = -1;\\n        return _this;\\n    }\\n    VirtualTimeScheduler.prototype.flush = function () {\\n        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;\\n        var error, action;\\n        while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\\n            if (error = action.execute(action.state, action.delay)) {\\n                break;\\n            }\\n        }\\n        if (error) {\\n            while (action = actions.shift()) {\\n                action.unsubscribe();\\n            }\\n            throw error;\\n        }\\n    };\\n    VirtualTimeScheduler.frameTimeFactor = 10;\\n    return VirtualTimeScheduler;\\n}(AsyncScheduler_AsyncScheduler));\\n\\nvar VirtualTimeScheduler_VirtualAction = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](VirtualAction, _super);\\n    function VirtualAction(scheduler, work, index) {\\n        if (index === void 0) {\\n            index = scheduler.index += 1;\\n        }\\n        var _this = _super.call(this, scheduler, work) || this;\\n        _this.scheduler = scheduler;\\n        _this.work = work;\\n        _this.index = index;\\n        _this.active = true;\\n        _this.index = scheduler.index = index;\\n        return _this;\\n    }\\n    VirtualAction.prototype.schedule = function (state, delay) {\\n        if (delay === void 0) {\\n            delay = 0;\\n        }\\n        if (!this.id) {\\n            return _super.prototype.schedule.call(this, state, delay);\\n        }\\n        this.active = false;\\n        var action = new VirtualAction(this.scheduler, this.work);\\n        this.add(action);\\n        return action.schedule(state, delay);\\n    };\\n    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {\\n        if (delay === void 0) {\\n            delay = 0;\\n        }\\n        this.delay = scheduler.frame + delay;\\n        var actions = scheduler.actions;\\n        actions.push(this);\\n        actions.sort(VirtualAction.sortActions);\\n        return true;\\n    };\\n    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\\n        if (delay === void 0) {\\n            delay = 0;\\n        }\\n        return undefined;\\n    };\\n    VirtualAction.prototype._execute = function (state, delay) {\\n        if (this.active === true) {\\n            return _super.prototype._execute.call(this, state, delay);\\n        }\\n    };\\n    VirtualAction.sortActions = function (a, b) {\\n        if (a.delay === b.delay) {\\n            if (a.index === b.index) {\\n                return 0;\\n            }\\n            else if (a.index > b.index) {\\n                return 1;\\n            }\\n            else {\\n                return -1;\\n            }\\n        }\\n        else if (a.delay > b.delay) {\\n            return 1;\\n        }\\n        else {\\n            return -1;\\n        }\\n    };\\n    return VirtualAction;\\n}(AsyncAction_AsyncAction));\\n\\n//# sourceMappingURL=VirtualTimeScheduler.js.map\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/pipe.js\\nvar pipe = __webpack_require__(63);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/noop.js\\nvar noop = __webpack_require__(21);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/identity.js\\nvar identity = __webpack_require__(36);\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/isObservable.js\\n/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\\n\\nfunction isObservable(obj) {\\n    return !!obj && (obj instanceof Observable[\"a\" /* Observable */] || (typeof obj.lift === \\'function\\' && typeof obj.subscribe === \\'function\\'));\\n}\\n//# sourceMappingURL=isObservable.js.map\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/ArgumentOutOfRangeError.js\\nvar ArgumentOutOfRangeError = __webpack_require__(71);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/EmptyError.js\\nvar EmptyError = __webpack_require__(54);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/UnsubscriptionError.js\\nvar UnsubscriptionError = __webpack_require__(64);\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/TimeoutError.js\\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\\nfunction TimeoutErrorImpl() {\\n    Error.call(this);\\n    this.message = \\'Timeout has occurred\\';\\n    this.name = \\'TimeoutError\\';\\n    return this;\\n}\\nTimeoutErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);\\nvar TimeoutError = TimeoutErrorImpl;\\n//# sourceMappingURL=TimeoutError.js.map\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/map.js\\nvar map = __webpack_require__(23);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/canReportError.js\\nvar canReportError = __webpack_require__(73);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/isArray.js\\nvar isArray = __webpack_require__(13);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/isScheduler.js\\nvar isScheduler = __webpack_require__(17);\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/bindCallback.js\\n/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isArray,_util_isScheduler PURE_IMPORTS_END */\\n\\n\\n\\n\\n\\n\\nfunction bindCallback(callbackFunc, resultSelector, scheduler) {\\n    if (resultSelector) {\\n        if (Object(isScheduler[\"a\" /* isScheduler */])(resultSelector)) {\\n            scheduler = resultSelector;\\n        }\\n        else {\\n            return function () {\\n                var args = [];\\n                for (var _i = 0; _i < arguments.length; _i++) {\\n                    args[_i] = arguments[_i];\\n                }\\n                return bindCallback(callbackFunc, scheduler).apply(void 0, args).pipe(Object(map[\"a\" /* map */])(function (args) { return Object(isArray[\"a\" /* isArray */])(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));\\n            };\\n        }\\n    }\\n    return function () {\\n        var args = [];\\n        for (var _i = 0; _i < arguments.length; _i++) {\\n            args[_i] = arguments[_i];\\n        }\\n        var context = this;\\n        var subject;\\n        var params = {\\n            context: context,\\n            subject: subject,\\n            callbackFunc: callbackFunc,\\n            scheduler: scheduler,\\n        };\\n        return new Observable[\"a\" /* Observable */](function (subscriber) {\\n            if (!scheduler) {\\n                if (!subject) {\\n                    subject = new AsyncSubject_AsyncSubject();\\n                    var handler = function () {\\n                        var innerArgs = [];\\n                        for (var _i = 0; _i < arguments.length; _i++) {\\n                            innerArgs[_i] = arguments[_i];\\n                        }\\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\\n                        subject.complete();\\n                    };\\n                    try {\\n                        callbackFunc.apply(context, args.concat([handler]));\\n                    }\\n                    catch (err) {\\n                        if (Object(canReportError[\"a\" /* canReportError */])(subject)) {\\n                            subject.error(err);\\n                        }\\n                        else {\\n                            console.warn(err);\\n                        }\\n                    }\\n                }\\n                return subject.subscribe(subscriber);\\n            }\\n            else {\\n                var state = {\\n                    args: args, subscriber: subscriber, params: params,\\n                };\\n                return scheduler.schedule(bindCallback_dispatch, 0, state);\\n            }\\n        });\\n    };\\n}\\nfunction bindCallback_dispatch(state) {\\n    var _this = this;\\n    var self = this;\\n    var args = state.args, subscriber = state.subscriber, params = state.params;\\n    var callbackFunc = params.callbackFunc, context = params.context, scheduler = params.scheduler;\\n    var subject = params.subject;\\n    if (!subject) {\\n        subject = params.subject = new AsyncSubject_AsyncSubject();\\n        var handler = function () {\\n            var innerArgs = [];\\n            for (var _i = 0; _i < arguments.length; _i++) {\\n                innerArgs[_i] = arguments[_i];\\n            }\\n            var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\\n            _this.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\\n        };\\n        try {\\n            callbackFunc.apply(context, args.concat([handler]));\\n        }\\n        catch (err) {\\n            subject.error(err);\\n        }\\n    }\\n    this.add(subject.subscribe(subscriber));\\n}\\nfunction dispatchNext(state) {\\n    var value = state.value, subject = state.subject;\\n    subject.next(value);\\n    subject.complete();\\n}\\nfunction dispatchError(state) {\\n    var err = state.err, subject = state.subject;\\n    subject.error(err);\\n}\\n//# sourceMappingURL=bindCallback.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/bindNodeCallback.js\\n/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isScheduler,_util_isArray PURE_IMPORTS_END */\\n\\n\\n\\n\\n\\n\\nfunction bindNodeCallback(callbackFunc, resultSelector, scheduler) {\\n    if (resultSelector) {\\n        if (Object(isScheduler[\"a\" /* isScheduler */])(resultSelector)) {\\n            scheduler = resultSelector;\\n        }\\n        else {\\n            return function () {\\n                var args = [];\\n                for (var _i = 0; _i < arguments.length; _i++) {\\n                    args[_i] = arguments[_i];\\n                }\\n                return bindNodeCallback(callbackFunc, scheduler).apply(void 0, args).pipe(Object(map[\"a\" /* map */])(function (args) { return Object(isArray[\"a\" /* isArray */])(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));\\n            };\\n        }\\n    }\\n    return function () {\\n        var args = [];\\n        for (var _i = 0; _i < arguments.length; _i++) {\\n            args[_i] = arguments[_i];\\n        }\\n        var params = {\\n            subject: undefined,\\n            args: args,\\n            callbackFunc: callbackFunc,\\n            scheduler: scheduler,\\n            context: this,\\n        };\\n        return new Observable[\"a\" /* Observable */](function (subscriber) {\\n            var context = params.context;\\n            var subject = params.subject;\\n            if (!scheduler) {\\n                if (!subject) {\\n                    subject = params.subject = new AsyncSubject_AsyncSubject();\\n                    var handler = function () {\\n                        var innerArgs = [];\\n                        for (var _i = 0; _i < arguments.length; _i++) {\\n                            innerArgs[_i] = arguments[_i];\\n                        }\\n                        var err = innerArgs.shift();\\n                        if (err) {\\n                            subject.error(err);\\n                            return;\\n                        }\\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\\n                        subject.complete();\\n                    };\\n                    try {\\n                        callbackFunc.apply(context, args.concat([handler]));\\n                    }\\n                    catch (err) {\\n                        if (Object(canReportError[\"a\" /* canReportError */])(subject)) {\\n                            subject.error(err);\\n                        }\\n                        else {\\n                            console.warn(err);\\n                        }\\n                    }\\n                }\\n                return subject.subscribe(subscriber);\\n            }\\n            else {\\n                return scheduler.schedule(bindNodeCallback_dispatch, 0, { params: params, subscriber: subscriber, context: context });\\n            }\\n        });\\n    };\\n}\\nfunction bindNodeCallback_dispatch(state) {\\n    var _this = this;\\n    var params = state.params, subscriber = state.subscriber, context = state.context;\\n    var callbackFunc = params.callbackFunc, args = params.args, scheduler = params.scheduler;\\n    var subject = params.subject;\\n    if (!subject) {\\n        subject = params.subject = new AsyncSubject_AsyncSubject();\\n        var handler = function () {\\n            var innerArgs = [];\\n            for (var _i = 0; _i < arguments.length; _i++) {\\n                innerArgs[_i] = arguments[_i];\\n            }\\n            var err = innerArgs.shift();\\n            if (err) {\\n                _this.add(scheduler.schedule(bindNodeCallback_dispatchError, 0, { err: err, subject: subject }));\\n            }\\n            else {\\n                var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\\n                _this.add(scheduler.schedule(bindNodeCallback_dispatchNext, 0, { value: value, subject: subject }));\\n            }\\n        };\\n        try {\\n            callbackFunc.apply(context, args.concat([handler]));\\n        }\\n        catch (err) {\\n            this.add(scheduler.schedule(bindNodeCallback_dispatchError, 0, { err: err, subject: subject }));\\n        }\\n    }\\n    this.add(subject.subscribe(subscriber));\\n}\\nfunction bindNodeCallback_dispatchNext(arg) {\\n    var value = arg.value, subject = arg.subject;\\n    subject.next(value);\\n    subject.complete();\\n}\\nfunction bindNodeCallback_dispatchError(arg) {\\n    var err = arg.err, subject = arg.subject;\\n    subject.error(err);\\n}\\n//# sourceMappingURL=bindNodeCallback.js.map\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/OuterSubscriber.js\\nvar OuterSubscriber = __webpack_require__(25);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/subscribeToResult.js\\nvar subscribeToResult = __webpack_require__(24);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/fromArray.js\\nvar fromArray = __webpack_require__(27);\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/combineLatest.js\\n/** PURE_IMPORTS_START tslib,_util_isScheduler,_util_isArray,_OuterSubscriber,_util_subscribeToResult,_fromArray PURE_IMPORTS_END */\\n\\n\\n\\n\\n\\n\\nvar NONE = {};\\nfunction combineLatest() {\\n    var observables = [];\\n    for (var _i = 0; _i < arguments.length; _i++) {\\n        observables[_i] = arguments[_i];\\n    }\\n    var resultSelector = null;\\n    var scheduler = null;\\n    if (Object(isScheduler[\"a\" /* isScheduler */])(observables[observables.length - 1])) {\\n        scheduler = observables.pop();\\n    }\\n    if (typeof observables[observables.length - 1] === \\'function\\') {\\n        resultSelector = observables.pop();\\n    }\\n    if (observables.length === 1 && Object(isArray[\"a\" /* isArray */])(observables[0])) {\\n        observables = observables[0];\\n    }\\n    return Object(fromArray[\"a\" /* fromArray */])(observables, scheduler).lift(new CombineLatestOperator(resultSelector));\\n}\\nvar CombineLatestOperator = /*@__PURE__*/ (function () {\\n    function CombineLatestOperator(resultSelector) {\\n        this.resultSelector = resultSelector;\\n    }\\n    CombineLatestOperator.prototype.call = function (subscriber, source) {\\n        return source.subscribe(new combineLatest_CombineLatestSubscriber(subscriber, this.resultSelector));\\n    };\\n    return CombineLatestOperator;\\n}());\\n\\nvar combineLatest_CombineLatestSubscriber = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](CombineLatestSubscriber, _super);\\n    function CombineLatestSubscriber(destination, resultSelector) {\\n        var _this = _super.call(this, destination) || this;\\n        _this.resultSelector = resultSelector;\\n        _this.active = 0;\\n        _this.values = [];\\n        _this.observables = [];\\n        return _this;\\n    }\\n    CombineLatestSubscriber.prototype._next = function (observable) {\\n        this.values.push(NONE);\\n        this.observables.push(observable);\\n    };\\n    CombineLatestSubscriber.prototype._complete = function () {\\n        var observables = this.observables;\\n        var len = observables.length;\\n        if (len === 0) {\\n            this.destination.complete();\\n        }\\n        else {\\n            this.active = len;\\n            this.toRespond = len;\\n            for (var i = 0; i < len; i++) {\\n                var observable = observables[i];\\n                this.add(Object(subscribeToResult[\"a\" /* subscribeToResult */])(this, observable, observable, i));\\n            }\\n        }\\n    };\\n    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\\n        if ((this.active -= 1) === 0) {\\n            this.destination.complete();\\n        }\\n    };\\n    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\\n        var values = this.values;\\n        var oldVal = values[outerIndex];\\n        var toRespond = !this.toRespond\\n            ? 0\\n            : oldVal === NONE ? --this.toRespond : this.toRespond;\\n        values[outerIndex] = innerValue;\\n        if (toRespond === 0) {\\n            if (this.resultSelector) {\\n                this._tryResultSelector(values);\\n            }\\n            else {\\n                this.destination.next(values.slice());\\n            }\\n        }\\n    };\\n    CombineLatestSubscriber.prototype._tryResultSelector = function (values) {\\n        var result;\\n        try {\\n            result = this.resultSelector.apply(this, values);\\n        }\\n        catch (err) {\\n            this.destination.error(err);\\n            return;\\n        }\\n        this.destination.next(result);\\n    };\\n    return CombineLatestSubscriber;\\n}(OuterSubscriber[\"a\" /* OuterSubscriber */]));\\n\\n//# sourceMappingURL=combineLatest.js.map\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/from.js + 5 modules\\nvar from = __webpack_require__(22);\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/concatAll.js\\nvar concatAll = __webpack_require__(163);\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/concat.js\\n/** PURE_IMPORTS_START _util_isScheduler,_of,_from,_operators_concatAll PURE_IMPORTS_END */\\n\\n\\n\\n\\nfunction concat() {\\n    var observables = [];\\n    for (var _i = 0; _i < arguments.length; _i++) {\\n        observables[_i] = arguments[_i];\\n    }\\n    if (observables.length === 1 || (observables.length === 2 && Object(isScheduler[\"a\" /* isScheduler */])(observables[1]))) {\\n        return Object(from[\"a\" /* from */])(observables[0]);\\n    }\\n    return Object(concatAll[\"a\" /* concatAll */])()(of[\"a\" /* of */].apply(void 0, observables));\\n}\\n//# sourceMappingURL=concat.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/defer.js\\n/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */\\n\\n\\n\\nfunction defer(observableFactory) {\\n    return new Observable[\"a\" /* Observable */](function (subscriber) {\\n        var input;\\n        try {\\n            input = observableFactory();\\n        }\\n        catch (err) {\\n            subscriber.error(err);\\n            return undefined;\\n        }\\n        var source = input ? Object(from[\"a\" /* from */])(input) : Object(empty[\"b\" /* empty */])();\\n        return source.subscribe(subscriber);\\n    });\\n}\\n//# sourceMappingURL=defer.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/forkJoin.js\\n/** PURE_IMPORTS_START tslib,_Observable,_util_isArray,_empty,_util_subscribeToResult,_OuterSubscriber,_operators_map PURE_IMPORTS_END */\\n\\n\\n\\n\\n\\n\\n\\nfunction forkJoin() {\\n    var sources = [];\\n    for (var _i = 0; _i < arguments.length; _i++) {\\n        sources[_i] = arguments[_i];\\n    }\\n    var resultSelector;\\n    if (typeof sources[sources.length - 1] === \\'function\\') {\\n        resultSelector = sources.pop();\\n    }\\n    if (sources.length === 1 && Object(isArray[\"a\" /* isArray */])(sources[0])) {\\n        sources = sources[0];\\n    }\\n    if (sources.length === 0) {\\n        return empty[\"a\" /* EMPTY */];\\n    }\\n    if (resultSelector) {\\n        return forkJoin(sources).pipe(Object(map[\"a\" /* map */])(function (args) { return resultSelector.apply(void 0, args); }));\\n    }\\n    return new Observable[\"a\" /* Observable */](function (subscriber) {\\n        return new forkJoin_ForkJoinSubscriber(subscriber, sources);\\n    });\\n}\\nvar forkJoin_ForkJoinSubscriber = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](ForkJoinSubscriber, _super);\\n    function ForkJoinSubscriber(destination, sources) {\\n        var _this = _super.call(this, destination) || this;\\n        _this.sources = sources;\\n        _this.completed = 0;\\n        _this.haveValues = 0;\\n        var len = sources.length;\\n        _this.values = new Array(len);\\n        for (var i = 0; i < len; i++) {\\n            var source = sources[i];\\n            var innerSubscription = Object(subscribeToResult[\"a\" /* subscribeToResult */])(_this, source, null, i);\\n            if (innerSubscription) {\\n                _this.add(innerSubscription);\\n            }\\n        }\\n        return _this;\\n    }\\n    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\\n        this.values[outerIndex] = innerValue;\\n        if (!innerSub._hasValue) {\\n            innerSub._hasValue = true;\\n            this.haveValues++;\\n        }\\n    };\\n    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {\\n        var _a = this, destination = _a.destination, haveValues = _a.haveValues, values = _a.values;\\n        var len = values.length;\\n        if (!innerSub._hasValue) {\\n            destination.complete();\\n            return;\\n        }\\n        this.completed++;\\n        if (this.completed !== len) {\\n            return;\\n        }\\n        if (haveValues === len) {\\n            destination.next(values);\\n        }\\n        destination.complete();\\n    };\\n    return ForkJoinSubscriber;\\n}(OuterSubscriber[\"a\" /* OuterSubscriber */]));\\n//# sourceMappingURL=forkJoin.js.map\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/isFunction.js\\nvar isFunction = __webpack_require__(37);\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/fromEvent.js\\n/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */\\n\\n\\n\\n\\nvar fromEvent_toString = Object.prototype.toString;\\nfunction fromEvent(target, eventName, options, resultSelector) {\\n    if (Object(isFunction[\"a\" /* isFunction */])(options)) {\\n        resultSelector = options;\\n        options = undefined;\\n    }\\n    if (resultSelector) {\\n        return fromEvent(target, eventName, options).pipe(Object(map[\"a\" /* map */])(function (args) { return Object(isArray[\"a\" /* isArray */])(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));\\n    }\\n    return new Observable[\"a\" /* Observable */](function (subscriber) {\\n        function handler(e) {\\n            if (arguments.length > 1) {\\n                subscriber.next(Array.prototype.slice.call(arguments));\\n            }\\n            else {\\n                subscriber.next(e);\\n            }\\n        }\\n        setupSubscription(target, eventName, handler, subscriber, options);\\n    });\\n}\\nfunction setupSubscription(sourceObj, eventName, handler, subscriber, options) {\\n    var unsubscribe;\\n    if (isEventTarget(sourceObj)) {\\n        var source_1 = sourceObj;\\n        sourceObj.addEventListener(eventName, handler, options);\\n        unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };\\n    }\\n    else if (isJQueryStyleEventEmitter(sourceObj)) {\\n        var source_2 = sourceObj;\\n        sourceObj.on(eventName, handler);\\n        unsubscribe = function () { return source_2.off(eventName, handler); };\\n    }\\n    else if (isNodeStyleEventEmitter(sourceObj)) {\\n        var source_3 = sourceObj;\\n        sourceObj.addListener(eventName, handler);\\n        unsubscribe = function () { return source_3.removeListener(eventName, handler); };\\n    }\\n    else if (sourceObj && sourceObj.length) {\\n        for (var i = 0, len = sourceObj.length; i < len; i++) {\\n            setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\\n        }\\n    }\\n    else {\\n        throw new TypeError(\\'Invalid event target\\');\\n    }\\n    subscriber.add(unsubscribe);\\n}\\nfunction isNodeStyleEventEmitter(sourceObj) {\\n    return sourceObj && typeof sourceObj.addListener === \\'function\\' && typeof sourceObj.removeListener === \\'function\\';\\n}\\nfunction isJQueryStyleEventEmitter(sourceObj) {\\n    return sourceObj && typeof sourceObj.on === \\'function\\' && typeof sourceObj.off === \\'function\\';\\n}\\nfunction isEventTarget(sourceObj) {\\n    return sourceObj && typeof sourceObj.addEventListener === \\'function\\' && typeof sourceObj.removeEventListener === \\'function\\';\\n}\\n//# sourceMappingURL=fromEvent.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/fromEventPattern.js\\n/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */\\n\\n\\n\\n\\nfunction fromEventPattern(addHandler, removeHandler, resultSelector) {\\n    if (resultSelector) {\\n        return fromEventPattern(addHandler, removeHandler).pipe(Object(map[\"a\" /* map */])(function (args) { return Object(isArray[\"a\" /* isArray */])(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));\\n    }\\n    return new Observable[\"a\" /* Observable */](function (subscriber) {\\n        var handler = function () {\\n            var e = [];\\n            for (var _i = 0; _i < arguments.length; _i++) {\\n                e[_i] = arguments[_i];\\n            }\\n            return subscriber.next(e.length === 1 ? e[0] : e);\\n        };\\n        var retValue;\\n        try {\\n            retValue = addHandler(handler);\\n        }\\n        catch (err) {\\n            subscriber.error(err);\\n            return undefined;\\n        }\\n        if (!Object(isFunction[\"a\" /* isFunction */])(removeHandler)) {\\n            return undefined;\\n        }\\n        return function () { return removeHandler(handler, retValue); };\\n    });\\n}\\n//# sourceMappingURL=fromEventPattern.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/generate.js\\n/** PURE_IMPORTS_START _Observable,_util_identity,_util_isScheduler PURE_IMPORTS_END */\\n\\n\\n\\nfunction generate(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {\\n    var resultSelector;\\n    var initialState;\\n    if (arguments.length == 1) {\\n        var options = initialStateOrOptions;\\n        initialState = options.initialState;\\n        condition = options.condition;\\n        iterate = options.iterate;\\n        resultSelector = options.resultSelector || identity[\"a\" /* identity */];\\n        scheduler = options.scheduler;\\n    }\\n    else if (resultSelectorOrObservable === undefined || Object(isScheduler[\"a\" /* isScheduler */])(resultSelectorOrObservable)) {\\n        initialState = initialStateOrOptions;\\n        resultSelector = identity[\"a\" /* identity */];\\n        scheduler = resultSelectorOrObservable;\\n    }\\n    else {\\n        initialState = initialStateOrOptions;\\n        resultSelector = resultSelectorOrObservable;\\n    }\\n    return new Observable[\"a\" /* Observable */](function (subscriber) {\\n        var state = initialState;\\n        if (scheduler) {\\n            return scheduler.schedule(generate_dispatch, 0, {\\n                subscriber: subscriber,\\n                iterate: iterate,\\n                condition: condition,\\n                resultSelector: resultSelector,\\n                state: state\\n            });\\n        }\\n        do {\\n            if (condition) {\\n                var conditionResult = void 0;\\n                try {\\n                    conditionResult = condition(state);\\n                }\\n                catch (err) {\\n                    subscriber.error(err);\\n                    return undefined;\\n                }\\n                if (!conditionResult) {\\n                    subscriber.complete();\\n                    break;\\n                }\\n            }\\n            var value = void 0;\\n            try {\\n                value = resultSelector(state);\\n            }\\n            catch (err) {\\n                subscriber.error(err);\\n                return undefined;\\n            }\\n            subscriber.next(value);\\n            if (subscriber.closed) {\\n                break;\\n            }\\n            try {\\n                state = iterate(state);\\n            }\\n            catch (err) {\\n                subscriber.error(err);\\n                return undefined;\\n            }\\n        } while (true);\\n        return undefined;\\n    });\\n}\\nfunction generate_dispatch(state) {\\n    var subscriber = state.subscriber, condition = state.condition;\\n    if (subscriber.closed) {\\n        return undefined;\\n    }\\n    if (state.needIterate) {\\n        try {\\n            state.state = state.iterate(state.state);\\n        }\\n        catch (err) {\\n            subscriber.error(err);\\n            return undefined;\\n        }\\n    }\\n    else {\\n        state.needIterate = true;\\n    }\\n    if (condition) {\\n        var conditionResult = void 0;\\n        try {\\n            conditionResult = condition(state.state);\\n        }\\n        catch (err) {\\n            subscriber.error(err);\\n            return undefined;\\n        }\\n        if (!conditionResult) {\\n            subscriber.complete();\\n            return undefined;\\n        }\\n        if (subscriber.closed) {\\n            return undefined;\\n        }\\n    }\\n    var value;\\n    try {\\n        value = state.resultSelector(state.state);\\n    }\\n    catch (err) {\\n        subscriber.error(err);\\n        return undefined;\\n    }\\n    if (subscriber.closed) {\\n        return undefined;\\n    }\\n    subscriber.next(value);\\n    if (subscriber.closed) {\\n        return undefined;\\n    }\\n    return this.schedule(state);\\n}\\n//# sourceMappingURL=generate.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/iif.js\\n/** PURE_IMPORTS_START _defer,_empty PURE_IMPORTS_END */\\n\\n\\nfunction iif(condition, trueResult, falseResult) {\\n    if (trueResult === void 0) {\\n        trueResult = empty[\"a\" /* EMPTY */];\\n    }\\n    if (falseResult === void 0) {\\n        falseResult = empty[\"a\" /* EMPTY */];\\n    }\\n    return defer(function () { return condition() ? trueResult : falseResult; });\\n}\\n//# sourceMappingURL=iif.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/isNumeric.js\\n/** PURE_IMPORTS_START _isArray PURE_IMPORTS_END */\\n\\nfunction isNumeric(val) {\\n    return !Object(isArray[\"a\" /* isArray */])(val) && (val - parseFloat(val) + 1) >= 0;\\n}\\n//# sourceMappingURL=isNumeric.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/interval.js\\n/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric PURE_IMPORTS_END */\\n\\n\\n\\nfunction interval(period, scheduler) {\\n    if (period === void 0) {\\n        period = 0;\\n    }\\n    if (scheduler === void 0) {\\n        scheduler = async_async;\\n    }\\n    if (!isNumeric(period) || period < 0) {\\n        period = 0;\\n    }\\n    if (!scheduler || typeof scheduler.schedule !== \\'function\\') {\\n        scheduler = async_async;\\n    }\\n    return new Observable[\"a\" /* Observable */](function (subscriber) {\\n        subscriber.add(scheduler.schedule(interval_dispatch, period, { subscriber: subscriber, counter: 0, period: period }));\\n        return subscriber;\\n    });\\n}\\nfunction interval_dispatch(state) {\\n    var subscriber = state.subscriber, counter = state.counter, period = state.period;\\n    subscriber.next(counter);\\n    this.schedule({ subscriber: subscriber, counter: counter + 1, period: period }, period);\\n}\\n//# sourceMappingURL=interval.js.map\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/merge.js\\nvar merge = __webpack_require__(129);\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/never.js\\n/** PURE_IMPORTS_START _Observable,_util_noop PURE_IMPORTS_END */\\n\\n\\nvar NEVER = /*@__PURE__*/ new Observable[\"a\" /* Observable */](noop[\"a\" /* noop */]);\\nfunction never() {\\n    return NEVER;\\n}\\n//# sourceMappingURL=never.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/onErrorResumeNext.js\\n/** PURE_IMPORTS_START _Observable,_from,_util_isArray,_empty PURE_IMPORTS_END */\\n\\n\\n\\n\\nfunction onErrorResumeNext() {\\n    var sources = [];\\n    for (var _i = 0; _i < arguments.length; _i++) {\\n        sources[_i] = arguments[_i];\\n    }\\n    if (sources.length === 0) {\\n        return empty[\"a\" /* EMPTY */];\\n    }\\n    var first = sources[0], remainder = sources.slice(1);\\n    if (sources.length === 1 && Object(isArray[\"a\" /* isArray */])(first)) {\\n        return onErrorResumeNext.apply(void 0, first);\\n    }\\n    return new Observable[\"a\" /* Observable */](function (subscriber) {\\n        var subNext = function () { return subscriber.add(onErrorResumeNext.apply(void 0, remainder).subscribe(subscriber)); };\\n        return Object(from[\"a\" /* from */])(first).subscribe({\\n            next: function (value) { subscriber.next(value); },\\n            error: subNext,\\n            complete: subNext,\\n        });\\n    });\\n}\\n//# sourceMappingURL=onErrorResumeNext.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/pairs.js\\n/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */\\n\\n\\nfunction pairs(obj, scheduler) {\\n    if (!scheduler) {\\n        return new Observable[\"a\" /* Observable */](function (subscriber) {\\n            var keys = Object.keys(obj);\\n            for (var i = 0; i < keys.length && !subscriber.closed; i++) {\\n                var key = keys[i];\\n                if (obj.hasOwnProperty(key)) {\\n                    subscriber.next([key, obj[key]]);\\n                }\\n            }\\n            subscriber.complete();\\n        });\\n    }\\n    else {\\n        return new Observable[\"a\" /* Observable */](function (subscriber) {\\n            var keys = Object.keys(obj);\\n            var subscription = new Subscription[\"a\" /* Subscription */]();\\n            subscription.add(scheduler.schedule(pairs_dispatch, 0, { keys: keys, index: 0, subscriber: subscriber, subscription: subscription, obj: obj }));\\n            return subscription;\\n        });\\n    }\\n}\\nfunction pairs_dispatch(state) {\\n    var keys = state.keys, index = state.index, subscriber = state.subscriber, subscription = state.subscription, obj = state.obj;\\n    if (!subscriber.closed) {\\n        if (index < keys.length) {\\n            var key = keys[index];\\n            subscriber.next([key, obj[key]]);\\n            subscription.add(this.schedule({ keys: keys, index: index + 1, subscriber: subscriber, subscription: subscription, obj: obj }));\\n        }\\n        else {\\n            subscriber.complete();\\n        }\\n    }\\n}\\n//# sourceMappingURL=pairs.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/race.js\\n/** PURE_IMPORTS_START tslib,_util_isArray,_fromArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\\n\\n\\n\\n\\n\\nfunction race() {\\n    var observables = [];\\n    for (var _i = 0; _i < arguments.length; _i++) {\\n        observables[_i] = arguments[_i];\\n    }\\n    if (observables.length === 1) {\\n        if (Object(isArray[\"a\" /* isArray */])(observables[0])) {\\n            observables = observables[0];\\n        }\\n        else {\\n            return observables[0];\\n        }\\n    }\\n    return Object(fromArray[\"a\" /* fromArray */])(observables, undefined).lift(new RaceOperator());\\n}\\nvar RaceOperator = /*@__PURE__*/ (function () {\\n    function RaceOperator() {\\n    }\\n    RaceOperator.prototype.call = function (subscriber, source) {\\n        return source.subscribe(new race_RaceSubscriber(subscriber));\\n    };\\n    return RaceOperator;\\n}());\\n\\nvar race_RaceSubscriber = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](RaceSubscriber, _super);\\n    function RaceSubscriber(destination) {\\n        var _this = _super.call(this, destination) || this;\\n        _this.hasFirst = false;\\n        _this.observables = [];\\n        _this.subscriptions = [];\\n        return _this;\\n    }\\n    RaceSubscriber.prototype._next = function (observable) {\\n        this.observables.push(observable);\\n    };\\n    RaceSubscriber.prototype._complete = function () {\\n        var observables = this.observables;\\n        var len = observables.length;\\n        if (len === 0) {\\n            this.destination.complete();\\n        }\\n        else {\\n            for (var i = 0; i < len && !this.hasFirst; i++) {\\n                var observable = observables[i];\\n                var subscription = Object(subscribeToResult[\"a\" /* subscribeToResult */])(this, observable, observable, i);\\n                if (this.subscriptions) {\\n                    this.subscriptions.push(subscription);\\n                }\\n                this.add(subscription);\\n            }\\n            this.observables = null;\\n        }\\n    };\\n    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\\n        if (!this.hasFirst) {\\n            this.hasFirst = true;\\n            for (var i = 0; i < this.subscriptions.length; i++) {\\n                if (i !== outerIndex) {\\n                    var subscription = this.subscriptions[i];\\n                    subscription.unsubscribe();\\n                    this.remove(subscription);\\n                }\\n            }\\n            this.subscriptions = null;\\n        }\\n        this.destination.next(innerValue);\\n    };\\n    return RaceSubscriber;\\n}(OuterSubscriber[\"a\" /* OuterSubscriber */]));\\n\\n//# sourceMappingURL=race.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/range.js\\n/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\\n\\nfunction range(start, count, scheduler) {\\n    if (start === void 0) {\\n        start = 0;\\n    }\\n    if (count === void 0) {\\n        count = 0;\\n    }\\n    return new Observable[\"a\" /* Observable */](function (subscriber) {\\n        var index = 0;\\n        var current = start;\\n        if (scheduler) {\\n            return scheduler.schedule(range_dispatch, 0, {\\n                index: index, count: count, start: start, subscriber: subscriber\\n            });\\n        }\\n        else {\\n            do {\\n                if (index++ >= count) {\\n                    subscriber.complete();\\n                    break;\\n                }\\n                subscriber.next(current++);\\n                if (subscriber.closed) {\\n                    break;\\n                }\\n            } while (true);\\n        }\\n        return undefined;\\n    });\\n}\\nfunction range_dispatch(state) {\\n    var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;\\n    if (index >= count) {\\n        subscriber.complete();\\n        return;\\n    }\\n    subscriber.next(start);\\n    if (subscriber.closed) {\\n        return;\\n    }\\n    state.index = index + 1;\\n    state.start = start + 1;\\n    this.schedule(state);\\n}\\n//# sourceMappingURL=range.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/timer.js\\n/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */\\n\\n\\n\\n\\nfunction timer(dueTime, periodOrScheduler, scheduler) {\\n    if (dueTime === void 0) {\\n        dueTime = 0;\\n    }\\n    var period = -1;\\n    if (isNumeric(periodOrScheduler)) {\\n        period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);\\n    }\\n    else if (Object(isScheduler[\"a\" /* isScheduler */])(periodOrScheduler)) {\\n        scheduler = periodOrScheduler;\\n    }\\n    if (!Object(isScheduler[\"a\" /* isScheduler */])(scheduler)) {\\n        scheduler = async_async;\\n    }\\n    return new Observable[\"a\" /* Observable */](function (subscriber) {\\n        var due = isNumeric(dueTime)\\n            ? dueTime\\n            : (+dueTime - scheduler.now());\\n        return scheduler.schedule(timer_dispatch, due, {\\n            index: 0, period: period, subscriber: subscriber\\n        });\\n    });\\n}\\nfunction timer_dispatch(state) {\\n    var index = state.index, period = state.period, subscriber = state.subscriber;\\n    subscriber.next(index);\\n    if (subscriber.closed) {\\n        return;\\n    }\\n    else if (period === -1) {\\n        return subscriber.complete();\\n    }\\n    state.index = index + 1;\\n    this.schedule(state, period);\\n}\\n//# sourceMappingURL=timer.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/using.js\\n/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */\\n\\n\\n\\nfunction using(resourceFactory, observableFactory) {\\n    return new Observable[\"a\" /* Observable */](function (subscriber) {\\n        var resource;\\n        try {\\n            resource = resourceFactory();\\n        }\\n        catch (err) {\\n            subscriber.error(err);\\n            return undefined;\\n        }\\n        var result;\\n        try {\\n            result = observableFactory(resource);\\n        }\\n        catch (err) {\\n            subscriber.error(err);\\n            return undefined;\\n        }\\n        var source = result ? Object(from[\"a\" /* from */])(result) : empty[\"a\" /* EMPTY */];\\n        var subscription = source.subscribe(subscriber);\\n        return function () {\\n            subscription.unsubscribe();\\n            if (resource) {\\n                resource.unsubscribe();\\n            }\\n        };\\n    });\\n}\\n//# sourceMappingURL=using.js.map\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/symbol/iterator.js\\nvar iterator = __webpack_require__(28);\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/zip.js\\n/** PURE_IMPORTS_START tslib,_fromArray,_util_isArray,_Subscriber,_OuterSubscriber,_util_subscribeToResult,_.._internal_symbol_iterator PURE_IMPORTS_END */\\n\\n\\n\\n\\n\\n\\n\\nfunction zip() {\\n    var observables = [];\\n    for (var _i = 0; _i < arguments.length; _i++) {\\n        observables[_i] = arguments[_i];\\n    }\\n    var resultSelector = observables[observables.length - 1];\\n    if (typeof resultSelector === \\'function\\') {\\n        observables.pop();\\n    }\\n    return Object(fromArray[\"a\" /* fromArray */])(observables, undefined).lift(new ZipOperator(resultSelector));\\n}\\nvar ZipOperator = /*@__PURE__*/ (function () {\\n    function ZipOperator(resultSelector) {\\n        this.resultSelector = resultSelector;\\n    }\\n    ZipOperator.prototype.call = function (subscriber, source) {\\n        return source.subscribe(new zip_ZipSubscriber(subscriber, this.resultSelector));\\n    };\\n    return ZipOperator;\\n}());\\n\\nvar zip_ZipSubscriber = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](ZipSubscriber, _super);\\n    function ZipSubscriber(destination, resultSelector, values) {\\n        if (values === void 0) {\\n            values = Object.create(null);\\n        }\\n        var _this = _super.call(this, destination) || this;\\n        _this.iterators = [];\\n        _this.active = 0;\\n        _this.resultSelector = (typeof resultSelector === \\'function\\') ? resultSelector : null;\\n        _this.values = values;\\n        return _this;\\n    }\\n    ZipSubscriber.prototype._next = function (value) {\\n        var iterators = this.iterators;\\n        if (Object(isArray[\"a\" /* isArray */])(value)) {\\n            iterators.push(new zip_StaticArrayIterator(value));\\n        }\\n        else if (typeof value[iterator[\"a\" /* iterator */]] === \\'function\\') {\\n            iterators.push(new StaticIterator(value[iterator[\"a\" /* iterator */]]()));\\n        }\\n        else {\\n            iterators.push(new zip_ZipBufferIterator(this.destination, this, value));\\n        }\\n    };\\n    ZipSubscriber.prototype._complete = function () {\\n        var iterators = this.iterators;\\n        var len = iterators.length;\\n        this.unsubscribe();\\n        if (len === 0) {\\n            this.destination.complete();\\n            return;\\n        }\\n        this.active = len;\\n        for (var i = 0; i < len; i++) {\\n            var iterator = iterators[i];\\n            if (iterator.stillUnsubscribed) {\\n                var destination = this.destination;\\n                destination.add(iterator.subscribe(iterator, i));\\n            }\\n            else {\\n                this.active--;\\n            }\\n        }\\n    };\\n    ZipSubscriber.prototype.notifyInactive = function () {\\n        this.active--;\\n        if (this.active === 0) {\\n            this.destination.complete();\\n        }\\n    };\\n    ZipSubscriber.prototype.checkIterators = function () {\\n        var iterators = this.iterators;\\n        var len = iterators.length;\\n        var destination = this.destination;\\n        for (var i = 0; i < len; i++) {\\n            var iterator = iterators[i];\\n            if (typeof iterator.hasValue === \\'function\\' && !iterator.hasValue()) {\\n                return;\\n            }\\n        }\\n        var shouldComplete = false;\\n        var args = [];\\n        for (var i = 0; i < len; i++) {\\n            var iterator = iterators[i];\\n            var result = iterator.next();\\n            if (iterator.hasCompleted()) {\\n                shouldComplete = true;\\n            }\\n            if (result.done) {\\n                destination.complete();\\n                return;\\n            }\\n            args.push(result.value);\\n        }\\n        if (this.resultSelector) {\\n            this._tryresultSelector(args);\\n        }\\n        else {\\n            destination.next(args);\\n        }\\n        if (shouldComplete) {\\n            destination.complete();\\n        }\\n    };\\n    ZipSubscriber.prototype._tryresultSelector = function (args) {\\n        var result;\\n        try {\\n            result = this.resultSelector.apply(this, args);\\n        }\\n        catch (err) {\\n            this.destination.error(err);\\n            return;\\n        }\\n        this.destination.next(result);\\n    };\\n    return ZipSubscriber;\\n}(Subscriber[\"a\" /* Subscriber */]));\\n\\nvar StaticIterator = /*@__PURE__*/ (function () {\\n    function StaticIterator(iterator) {\\n        this.iterator = iterator;\\n        this.nextResult = iterator.next();\\n    }\\n    StaticIterator.prototype.hasValue = function () {\\n        return true;\\n    };\\n    StaticIterator.prototype.next = function () {\\n        var result = this.nextResult;\\n        this.nextResult = this.iterator.next();\\n        return result;\\n    };\\n    StaticIterator.prototype.hasCompleted = function () {\\n        var nextResult = this.nextResult;\\n        return nextResult && nextResult.done;\\n    };\\n    return StaticIterator;\\n}());\\nvar zip_StaticArrayIterator = /*@__PURE__*/ (function () {\\n    function StaticArrayIterator(array) {\\n        this.array = array;\\n        this.index = 0;\\n        this.length = 0;\\n        this.length = array.length;\\n    }\\n    StaticArrayIterator.prototype[iterator[\"a\" /* iterator */]] = function () {\\n        return this;\\n    };\\n    StaticArrayIterator.prototype.next = function (value) {\\n        var i = this.index++;\\n        var array = this.array;\\n        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\\n    };\\n    StaticArrayIterator.prototype.hasValue = function () {\\n        return this.array.length > this.index;\\n    };\\n    StaticArrayIterator.prototype.hasCompleted = function () {\\n        return this.array.length === this.index;\\n    };\\n    return StaticArrayIterator;\\n}());\\nvar zip_ZipBufferIterator = /*@__PURE__*/ (function (_super) {\\n    tslib_es6[\"c\" /* __extends */](ZipBufferIterator, _super);\\n    function ZipBufferIterator(destination, parent, observable) {\\n        var _this = _super.call(this, destination) || this;\\n        _this.parent = parent;\\n        _this.observable = observable;\\n        _this.stillUnsubscribed = true;\\n        _this.buffer = [];\\n        _this.isComplete = false;\\n        return _this;\\n    }\\n    ZipBufferIterator.prototype[iterator[\"a\" /* iterator */]] = function () {\\n        return this;\\n    };\\n    ZipBufferIterator.prototype.next = function () {\\n        var buffer = this.buffer;\\n        if (buffer.length === 0 && this.isComplete) {\\n            return { value: null, done: true };\\n        }\\n        else {\\n            return { value: buffer.shift(), done: false };\\n        }\\n    };\\n    ZipBufferIterator.prototype.hasValue = function () {\\n        return this.buffer.length > 0;\\n    };\\n    ZipBufferIterator.prototype.hasCompleted = function () {\\n        return this.buffer.length === 0 && this.isComplete;\\n    };\\n    ZipBufferIterator.prototype.notifyComplete = function () {\\n        if (this.buffer.length > 0) {\\n            this.isComplete = true;\\n            this.parent.notifyInactive();\\n        }\\n        else {\\n            this.destination.complete();\\n        }\\n    };\\n    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\\n        this.buffer.push(innerValue);\\n        this.parent.checkIterators();\\n    };\\n    ZipBufferIterator.prototype.subscribe = function (value, index) {\\n        return Object(subscribeToResult[\"a\" /* subscribeToResult */])(this, this.observable, this, index);\\n    };\\n    return ZipBufferIterator;\\n}(OuterSubscriber[\"a\" /* OuterSubscriber */]));\\n//# sourceMappingURL=zip.js.map\\n\\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/config.js\\nvar config = __webpack_require__(19);\\n\\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/index.js\\n/* concated harmony reexport Observable */__webpack_require__.d(__webpack_exports__, \"Observable\", function() { return Observable[\"a\" /* Observable */]; });\\n/* concated harmony reexport ConnectableObservable */__webpack_require__.d(__webpack_exports__, \"ConnectableObservable\", function() { return ConnectableObservable[\"a\" /* ConnectableObservable */]; });\\n/* concated harmony reexport GroupedObservable */__webpack_require__.d(__webpack_exports__, \"GroupedObservable\", function() { return groupBy_GroupedObservable; });\\n/* concated harmony reexport observable */__webpack_require__.d(__webpack_exports__, \"observable\", function() { return symbol_observable[\"a\" /* observable */]; });\\n/* concated harmony reexport Subject */__webpack_require__.d(__webpack_exports__, \"Subject\", function() { return Subject[\"a\" /* Subject */]; });\\n/* concated harmony reexport BehaviorSubject */__webpack_require__.d(__webpack_exports__, \"BehaviorSubject\", function() { return BehaviorSubject[\"a\" /* BehaviorSubject */]; });\\n/* concated harmony reexport ReplaySubject */__webpack_require__.d(__webpack_exports__, \"ReplaySubject\", function() { return ReplaySubject_ReplaySubject; });\\n/* concated harmony reexport AsyncSubject */__webpack_require__.d(__webpack_exports__, \"AsyncSubject\", function() { return AsyncSubject_AsyncSubject; });\\n/* concated harmony reexport asapScheduler */__webpack_require__.d(__webpack_exports__, \"asapScheduler\", function() { return asap; });\\n/* concated harmony reexport asyncScheduler */__webpack_require__.d(__webpack_exports__, \"asyncScheduler\", function() { return async_async; });\\n/* concated harmony reexport queueScheduler */__webpack_require__.d(__webpack_exports__, \"queueScheduler\", function() { return queue; });\\n/* concated harmony reexport animationFrameScheduler */__webpack_require__.d(__webpack_exports__, \"animationFrameScheduler\", function() { return animationFrame; });\\n/* concated harmony reexport VirtualTimeScheduler */__webpack_require__.d(__webpack_exports__, \"VirtualTimeScheduler\", function() { return VirtualTimeScheduler_VirtualTimeScheduler; });\\n/* concated harmony reexport VirtualAction */__webpack_require__.d(__webpack_exports__, \"VirtualAction\", function() { return VirtualTimeScheduler_VirtualAction; });\\n/* concated harmony reexport Scheduler */__webpack_require__.d(__webpack_exports__, \"Scheduler\", function() { return Scheduler; });\\n/* concated harmony reexport Subscription */__webpack_require__.d(__webpack_exports__, \"Subscription\", function() { return Subscription[\"a\" /* Subscription */]; });\\n/* concated harmony reexport Subscriber */__webpack_require__.d(__webpack_exports__, \"Subscriber\", function() { return Subscriber[\"a\" /* Subscriber */]; });\\n/* concated harmony reexport Notification */__webpack_require__.d(__webpack_exports__, \"Notification\", function() { return Notification_Notification; });\\n/* concated harmony reexport pipe */__webpack_require__.d(__webpack_exports__, \"pipe\", function() { return pipe[\"a\" /* pipe */]; });\\n/* concated harmony reexport noop */__webpack_require__.d(__webpack_exports__, \"noop\", function() { return noop[\"a\" /* noop */]; });\\n/* concated harmony reexport identity */__webpack_require__.d(__webpack_exports__, \"identity\", function() { return identity[\"a\" /* identity */]; });\\n/* concated harmony reexport isObservable */__webpack_require__.d(__webpack_exports__, \"isObservable\", function() { return isObservable; });\\n/* concated harmony reexport ArgumentOutOfRangeError */__webpack_require__.d(__webpack_exports__, \"ArgumentOutOfRangeError\", function() { return ArgumentOutOfRangeError[\"a\" /* ArgumentOutOfRangeError */]; });\\n/* concated harmony reexport EmptyError */__webpack_require__.d(__webpack_exports__, \"EmptyError\", function() { return EmptyError[\"a\" /* EmptyError */]; });\\n/* concated harmony reexport ObjectUnsubscribedError */__webpack_require__.d(__webpack_exports__, \"ObjectUnsubscribedError\", function() { return ObjectUnsubscribedError[\"a\" /* ObjectUnsubscribedError */]; });\\n/* concated harmony reexport UnsubscriptionError */__webpack_require__.d(__webpack_exports__, \"UnsubscriptionError\", function() { return UnsubscriptionError[\"a\" /* UnsubscriptionError */]; });\\n/* concated harmony reexport TimeoutError */__webpack_require__.d(__webpack_exports__, \"TimeoutError\", function() { return TimeoutError; });\\n/* concated harmony reexport bindCallback */__webpack_require__.d(__webpack_exports__, \"bindCallback\", function() { return bindCallback; });\\n/* concated harmony reexport bindNodeCallback */__webpack_require__.d(__webpack_exports__, \"bindNodeCallback\", function() { return bindNodeCallback; });\\n/* concated harmony reexport combineLatest */__webpack_require__.d(__webpack_exports__, \"combineLatest\", function() { return combineLatest; });\\n/* concated harmony reexport concat */__webpack_require__.d(__webpack_exports__, \"concat\", function() { return concat; });\\n/* concated harmony reexport defer */__webpack_require__.d(__webpack_exports__, \"defer\", function() { return defer; });\\n/* concated harmony reexport empty */__webpack_require__.d(__webpack_exports__, \"empty\", function() { return empty[\"b\" /* empty */]; });\\n/* concated harmony reexport forkJoin */__webpack_require__.d(__webpack_exports__, \"forkJoin\", function() { return forkJoin; });\\n/* concated harmony reexport from */__webpack_require__.d(__webpack_exports__, \"from\", function() { return from[\"a\" /* from */]; });\\n/* concated harmony reexport fromEvent */__webpack_require__.d(__webpack_exports__, \"fromEvent\", function() { return fromEvent; });\\n/* concated harmony reexport fromEventPattern */__webpack_require__.d(__webpack_exports__, \"fromEventPattern\", function() { return fromEventPattern; });\\n/* concated harmony reexport generate */__webpack_require__.d(__webpack_exports__, \"generate\", function() { return generate; });\\n/* concated harmony reexport iif */__webpack_require__.d(__webpack_exports__, \"iif\", function() { return iif; });\\n/* concated harmony reexport interval */__webpack_require__.d(__webpack_exports__, \"interval\", function() { return interval; });\\n/* concated harmony reexport merge */__webpack_require__.d(__webpack_exports__, \"merge\", function() { return merge[\"a\" /* merge */]; });\\n/* concated harmony reexport never */__webpack_require__.d(__webpack_exports__, \"never\", function() { return never; });\\n/* concated harmony reexport of */__webpack_require__.d(__webpack_exports__, \"of\", function() { return of[\"a\" /* of */]; });\\n/* concated harmony reexport onErrorResumeNext */__webpack_require__.d(__webpack_exports__, \"onErrorResumeNext\", function() { return onErrorResumeNext; });\\n/* concated harmony reexport pairs */__webpack_require__.d(__webpack_exports__, \"pairs\", function() { return pairs; });\\n/* concated harmony reexport race */__webpack_require__.d(__webpack_exports__, \"race\", function() { return race; });\\n/* concated harmony reexport range */__webpack_require__.d(__webpack_exports__, \"range\", function() { return range; });\\n/* concated harmony reexport throwError */__webpack_require__.d(__webpack_exports__, \"throwError\", function() { return throwError; });\\n/* concated harmony reexport timer */__webpack_require__.d(__webpack_exports__, \"timer\", function() { return timer; });\\n/* concated harmony reexport using */__webpack_require__.d(__webpack_exports__, \"using\", function() { return using; });\\n/* concated harmony reexport zip */__webpack_require__.d(__webpack_exports__, \"zip\", function() { return zip; });\\n/* concated harmony reexport EMPTY */__webpack_require__.d(__webpack_exports__, \"EMPTY\", function() { return empty[\"a\" /* EMPTY */]; });\\n/* concated harmony reexport NEVER */__webpack_require__.d(__webpack_exports__, \"NEVER\", function() { return NEVER; });\\n/* concated harmony reexport config */__webpack_require__.d(__webpack_exports__, \"config\", function() { return config[\"a\" /* config */]; });\\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n//# sourceMappingURL=index.js.map\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///90\\n')}});","extractedComments":[]}